!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ADDR_MODE	src/common.h	/^typedef enum {AD_ANY=0, AD_GEOMETRIC, AD_LINEAR, AD_LBA32=4} ADDR_MODE;$/;"	t	typeref:enum:__anon25
ADD_NEW_DISK	src/md-int.h	62;"	d
AD_ANY	src/common.h	/^typedef enum {AD_ANY=0, AD_GEOMETRIC, AD_LINEAR, AD_LBA32=4} ADDR_MODE;$/;"	e	enum:__anon25
AD_GEOMETRIC	src/common.h	/^typedef enum {AD_ANY=0, AD_GEOMETRIC, AD_LINEAR, AD_LBA32=4} ADDR_MODE;$/;"	e	enum:__anon25
AD_LBA32	src/common.h	/^typedef enum {AD_ANY=0, AD_GEOMETRIC, AD_LINEAR, AD_LBA32=4} ADDR_MODE;$/;"	e	enum:__anon25
AD_LINEAR	src/common.h	/^typedef enum {AD_ANY=0, AD_GEOMETRIC, AD_LINEAR, AD_LBA32=4} ADDR_MODE;$/;"	e	enum:__anon25
AOPT	diagnose/Makefile	/^AOPT = -0 -a -w$/;"	m
AOPT	dos/Makefile	/^AOPT = -0 -a -w$/;"	m
AS	diagnose/Makefile	/^AS = as86$/;"	m
AS	dos/Makefile	/^AS = as86$/;"	m
AS86	src/Makefile	/^AS86=as86 -0 -a$/;"	m
ASK_VGA	src/bootsect.S	/^ASK_VGA   = 0xfffd$/;"	d
ASK_VGA	src/bootsect.s	/^ASK_VGA   = 0xfffd$/;"	d
ASK_VGA	src/lilo.h	58;"	d
ASM_CVT	diagnose/cprintf.c	13;"	d	file:
All	src/crt.S	/^All rights reserved.$/;"	l
All	src/dparam.S	/^All rights reserved.$/;"	l
All	src/first.S	/^All rights reserved.$/;"	l
All	src/graph.S	/^All rights reserved.$/;"	l
All	src/menu.S	/^All rights reserved.$/;"	l
All	src/second.S	/^All rights reserved.$/;"	l
All	src/volume.S	/^All rights reserved.$/;"	l
Ashs	src/shs3.S	/^#define Ashs eax$/;"	d
BACKUP_DIR	src/config.h	34;"	d
BACKUP_DIR	src/config.h	45;"	d
BACKUP_DIR	src/config.h	63;"	d
BAUD_BASE	src/bitmap.s	/^BAUD_BASE = 115200 ; divisor == 1$/;"	d
BAUD_BASE	src/second.S	/^BAUD_BASE = 115200			; divisor == 1$/;"	d
BAUD_BASE	src/second.s	/^BAUD_BASE = 115200 ; divisor == 1$/;"	d
BAUD_BASE	src/third.s	/^BAUD_BASE = 115200 ; divisor == 1$/;"	d
BD_GET_VIDEO	src/bdata.h	23;"	d
BD_MAX_FLOPPY	src/bdata.h	26;"	d
BD_MAX_HARD	src/bdata.h	29;"	d
BD_VERBOSE	src/disk.S	/^#define BD_VERBOSE$/;"	d
BEG_FS	src/second.S	/^#define BEG_FS call fs_check$/;"	d
BEG_FS	src/second.S	/^#define BEG_FS db 0x1e,0x2e,0x8e,0x1e,0x02,0x00$/;"	d
BEG_FS	src/second.S	/^#define BEG_FS$/;"	d
BETA_TEST	src/lilo.h	80;"	d
BETA_TEST	src/lilo.h	82;"	d
BFILES	src/Makefile	/^BFILES=first.b second.b third.b bitmap.b chain.b mbr.b mbr2.b \\$/;"	m
BIG_CHAIN	src/boot.c	12;"	d	file:
BIG_ENDIAN	src/shs2.h	35;"	d
BINLILO	images/Makefile	/^BINLILO := ..\/src\/lilo$/;"	m
BIOS restrictions	doc/user.tex	/^(e.g. SCSI disks; \\path{\/dev\/sda$\\ldots$}) too.$/;"	b
BIOS_MAX_CYLS	src/lilo.h	292;"	d
BIOS_MAX_DEVS	src/lilo.h	289;"	d
BIOS_MAX_HEADS	src/lilo.h	290;"	d
BIOS_MAX_SECS	src/lilo.h	293;"	d
BIOS_PARAMETER_BLOCK	src/common.h	/^;*\/} BIOS_PARAMETER_BLOCK;	\/*$/;"	t	typeref:struct:__anon10
BITMAP	src/probe.c	12;"	d	file:
BITMAPFILEHEADER	src/bitmap.h	/^} BITMAPFILEHEADER;	\/* needed to compensate for GCC's alignment rules *\/$/;"	t	typeref:struct:BitMapFileHeader
BITMAPHEADER	src/bitmap.h	/^} BITMAPHEADER;$/;"	t	typeref:struct:BitMapHeader
BITMAPHEADER2	src/bitmap.h	/^} BITMAPHEADER2;$/;"	t	typeref:struct:BitMapHeader2
BITMAPLILOHEADER	src/bitmap.h	/^} BITMAPLILOHEADER;$/;"	t	typeref:struct:BitmapLiloHeader
BITMAP_H	src/bitmap.h	12;"	d
BLOCK_SIZE	src/lilo.h	183;"	d
BMAP_IOCTL	src/geometry.h	81;"	d
BMPS4	images/Makefile	/^BMPS4 := debian.bmp debian-de.bmp debianlilo.bmp inside.bmp onlyblue.bmp tuxlogo.bmp$/;"	m
BMPS8	images/Makefile	/^BMPS8 := coffee.bmp$/;"	m
BMP_BMP	src/edit.c	40;"	d	file:
BMP_CONF	src/edit.c	39;"	d	file:
BOOTSECT	src/bitmap.s	/^BOOTSECT = 0x200 ! kernel bootsect.S$/;"	d
BOOTSECT	src/chain.s	/^BOOTSECT = 0x200 ! kernel bootsect.S$/;"	d
BOOTSECT	src/disk.s	/^BOOTSECT  = 0x200		! kernel bootsect.S$/;"	d
BOOTSECT	src/first.s	/^BOOTSECT = 0x200 ! kernel bootsect.S$/;"	d
BOOTSECT	src/mbr.s	/^BOOTSECT  = 0x200		! kernel bootsect.S$/;"	d
BOOTSECT	src/mbr2.s	/^BOOTSECT  = 0x200		! kernel bootsect.S$/;"	d
BOOTSECT	src/second.s	/^BOOTSECT = 0x200 ! kernel bootsect.S$/;"	d
BOOTSECT	src/third.s	/^BOOTSECT = 0x200 ! kernel bootsect.S$/;"	d
BOOTSEG	src/bitmap.s	/^BOOTSEG = 0x07C0 ! original address of boot-sector$/;"	d
BOOTSEG	src/bootsect.S	/^BOOTSEG   = 0x07C0			! original address of boot-sector$/;"	d
BOOTSEG	src/bootsect.s	/^BOOTSEG   = 0x07C0			! original address of boot-sector$/;"	d
BOOTSEG	src/chain.s	/^BOOTSEG = 0x07C0 ! original address of boot-sector$/;"	d
BOOTSEG	src/disk.s	/^BOOTSEG   = 0x07C0			! original address of boot-sector$/;"	d
BOOTSEG	src/first.s	/^BOOTSEG = 0x07C0 ! original address of boot-sector$/;"	d
BOOTSEG	src/mbr.s	/^BOOTSEG   = 0x07C0			! original address of boot-sector$/;"	d
BOOTSEG	src/mbr2.s	/^BOOTSEG   = 0x07C0			! original address of boot-sector$/;"	d
BOOTSEG	src/second.s	/^BOOTSEG = 0x07C0 ! original address of boot-sector$/;"	d
BOOTSEG	src/third.s	/^BOOTSEG = 0x07C0 ! original address of boot-sector$/;"	d
BOOT_DIR	src/config.h	44;"	d
BOOT_DIR	src/config.h	62;"	d
BOOT_H	src/boot.h	13;"	d
BOOT_PARAMS_1	src/common.h	/^;*\/} BOOT_PARAMS_1; \/* first stage boot loader $/;"	t	typeref:struct:__anon12
BOOT_PARAMS_2	src/common.h	/^;*\/} BOOT_PARAMS_2; \/* second stage boot loader$/;"	t	typeref:struct:__anon13
BOOT_PARAMS_C	src/common.h	/^;*\/} BOOT_PARAMS_C; \/* chain loader$/;"	t	typeref:struct:__anon14
BOOT_PARAMS_DOS	src/common.h	/^;*\/} BOOT_PARAMS_DOS;	\/* DOS fat header$/;"	t	typeref:struct:__anon11
BOOT_SECTOR	src/common.h	/^} BOOT_SECTOR;$/;"	t	typeref:union:__anon17
BOOT_SIGNATURE	src/lilo.h	202;"	d
BOOT_SIG_OFFSET	src/lilo.h	203;"	d
BOOT_VOLID	src/common.h	/^} BOOT_VOLID;$/;"	t	typeref:struct:__anon16
BPB_rsvd	diagnose/sector.S	/^BPB_rsvd:		dw      0       ; reserved$/;"	d
BSECT_H	src/bsect.h	13;"	d
BSS_DATA	src/second.S	/^#define BSS_DATA$/;"	d
BSSend	src/bitmap.s	/^BSSend = *$/;"	d
BSSend	src/second.S	/^BSSend	=	*$/;"	d
BSSend	src/second.s	/^BSSend = *$/;"	d
BSSend	src/third.s	/^BSSend = *$/;"	d
BSSsize	src/bitmap.s	/^BSSsize = BSSend-BSSstart$/;"	d
BSSsize	src/second.S	/^BSSsize		=	BSSend-BSSstart$/;"	d
BSSsize	src/second.s	/^BSSsize = BSSend-BSSstart$/;"	d
BSSsize	src/third.s	/^BSSsize = BSSend-BSSstart$/;"	d
BSSstart	src/bitmap.s	/^BSSstart = ParmBSS$/;"	d
BSSstart	src/second.S	/^BSSstart	=	ParmBSS$/;"	d
BSSstart	src/second.S	/^BSSstart	=	Parmline + CL_LENGTH$/;"	d
BSSstart	src/second.s	/^BSSstart = ParmBSS$/;"	d
BSSstart	src/third.s	/^BSSstart = ParmBSS$/;"	d
BUILTIN_FILE	src/common.h	/^} BUILTIN_FILE;$/;"	t	typeref:struct:__anon21
BYPASS18	src/mbr.S	/^#define BYPASS18 0		\/* bypass int 18h exit *\/$/;"	d
BYTE	src/shs2.h	/^typedef unsigned char BYTE;$/;"	t
BankSize	src/vesainfo.h	/^ unsigned char BankSize;$/;"	m	struct:__anon1::__anon3
BitMapFileHeader	src/bitmap.h	/^typedef struct BitMapFileHeader {$/;"	s
BitMapHeader	src/bitmap.h	/^typedef struct BitMapHeader {$/;"	s
BitMapHeader2	src/bitmap.h	/^typedef struct BitMapHeader2 {$/;"	s
BitmapLiloHeader	src/bitmap.h	/^typedef struct BitmapLiloHeader {$/;"	s
BitsPerPixel	src/vesainfo.h	/^         char  BitsPerPixel;$/;"	m	struct:__anon1::__anon3
Booting basics	doc/user.tex	/^invalid location, you should not rely on that.$/;"	u
Bshs	src/shs3.S	/^#define Bshs esi$/;"	d
Buf	src/probe.c	/^static union Buf {$/;"	u	file:
Buffer	diagnose/test5.c	/^struct Buffer {$/;"	s	file:
Build-time configuration	doc/user.tex	/^\\end{itemize}$/;"	b
BytesPerScanLine	src/vesainfo.h	/^         short BytesPerScanLine;$/;"	m	struct:__anon1::__anon3
CACHE_ENTRY	src/device.c	/^} CACHE_ENTRY;$/;"	t	typeref:struct:_cache_entry	file:
CALL_HIGHLOAD_KLUDGE	src/bootsect.S	/^#define CALL_HIGHLOAD_KLUDGE .word 0x1eff,0x220 ! call far * bootsect_kludge$/;"	d
CC	diagnose/Makefile	/^CC = bcc -M$(MODEL)$/;"	m
CC	dos/Makefile	/^CC = bcc -M$(MODEL)$/;"	m
CC	src/Makefile	/^CC=gcc$/;"	m
CFG_DIR	src/config.h	43;"	d
CFG_DIR	src/config.h	61;"	d
CFG_H	src/cfg.h	13;"	d
CFILES	src/Makefile	/^CFILES=boot.c bsect.c cfg.c common.c device.c edit.c geometry.c \\$/;"	m
CFLAGS	dos/Makefile	/^CFLAGS = -DLCF_IGNORECASE -DLCF_DSECS=3 -DLCF_PASS160$/;"	m
CFLAGS	src/Makefile	/^CFLAGS=$(OPT) -Wall $(PCONFIG)$/;"	m
CHAIN_LOADER	src/chain.S	/^#define CHAIN_LOADER$/;"	d
CHANGE_RULE	src/partition.h	/^} CHANGE_RULE;$/;"	t	typeref:struct:_change_rule
CHECK	src/chain.S	/^#define CHECK$/;"	d
CHECK_FS_VERBOSE	src/second.S	/^#define CHECK_FS_VERBOSE 0$/;"	d
CINCL	diagnose/Makefile	/^CINCL = \/usr\/lib\/bcc\/include$/;"	m
CINCL	dos/Makefile	/^CINCL = \/usr\/lib\/bcc\/include$/;"	m
CLEAR_ARRAY	src/md-int.h	61;"	d
CL_HDRS_VERSION	src/bitmap.s	/^CL_HDRS_VERSION = 0x206 ! 0x0201=old; 0x0202=new$/;"	d
CL_HDRS_VERSION	src/chain.s	/^CL_HDRS_VERSION = 0x206 ! 0x0201=old; 0x0202=new$/;"	d
CL_HDRS_VERSION	src/disk.s	/^CL_HDRS_VERSION	= 0x206			! 0x0201=old;  0x0202=new$/;"	d
CL_HDRS_VERSION	src/first.s	/^CL_HDRS_VERSION = 0x206 ! 0x0201=old; 0x0202=new$/;"	d
CL_HDRS_VERSION	src/mbr.s	/^CL_HDRS_VERSION	= 0x206			! 0x0201=old;  0x0202=new$/;"	d
CL_HDRS_VERSION	src/mbr2.s	/^CL_HDRS_VERSION	= 0x206			! 0x0201=old;  0x0202=new$/;"	d
CL_HDRS_VERSION	src/second.s	/^CL_HDRS_VERSION = 0x206 ! 0x0201=old; 0x0202=new$/;"	d
CL_HDRS_VERSION	src/third.s	/^CL_HDRS_VERSION = 0x206 ! 0x0201=old; 0x0202=new$/;"	d
CL_HEADER_ID	src/bitmap.s	/^CL_HEADER_ID = 0x202 ! "HdrS"$/;"	d
CL_HEADER_ID	src/chain.s	/^CL_HEADER_ID = 0x202 ! "HdrS"$/;"	d
CL_HEADER_ID	src/disk.s	/^CL_HEADER_ID	= 0x202			! "HdrS"$/;"	d
CL_HEADER_ID	src/first.s	/^CL_HEADER_ID = 0x202 ! "HdrS"$/;"	d
CL_HEADER_ID	src/mbr.s	/^CL_HEADER_ID	= 0x202			! "HdrS"$/;"	d
CL_HEADER_ID	src/mbr2.s	/^CL_HEADER_ID	= 0x202			! "HdrS"$/;"	d
CL_HEADER_ID	src/second.s	/^CL_HEADER_ID = 0x202 ! "HdrS"$/;"	d
CL_HEADER_ID	src/third.s	/^CL_HEADER_ID = 0x202 ! "HdrS"$/;"	d
CL_LENGTH	diagnose/test5.c	44;"	d	file:
CL_LENGTH	src/bitmap.s	/^CL_LENGTH = 512 ! maximum length = 256-1$/;"	d
CL_LENGTH	src/chain.s	/^CL_LENGTH = 512 ! maximum length = 256-1$/;"	d
CL_LENGTH	src/disk.s	/^CL_LENGTH	= 512	! maximum length = 256-1$/;"	d
CL_LENGTH	src/first.s	/^CL_LENGTH = 512 ! maximum length = 256-1$/;"	d
CL_LENGTH	src/mbr.s	/^CL_LENGTH	= 512	! maximum length = 256-1$/;"	d
CL_LENGTH	src/mbr2.s	/^CL_LENGTH	= 512	! maximum length = 256-1$/;"	d
CL_LENGTH	src/pseudo.S	/^CL_LENGTH	= 256			! maximum length$/;"	d
CL_LENGTH	src/second.s	/^CL_LENGTH = 512 ! maximum length = 256-1$/;"	d
CL_LENGTH	src/third.s	/^CL_LENGTH = 512 ! maximum length = 256-1$/;"	d
CL_MAGIC	diagnose/test5.c	42;"	d	file:
CL_MAGIC	src/bitmap.s	/^CL_MAGIC = 0xa33f ! very unusual command sequence$/;"	d
CL_MAGIC	src/chain.s	/^CL_MAGIC = 0xa33f ! very unusual command sequence$/;"	d
CL_MAGIC	src/disk.s	/^CL_MAGIC	= 0xa33f		! very unusual command sequence$/;"	d
CL_MAGIC	src/first.s	/^CL_MAGIC = 0xa33f ! very unusual command sequence$/;"	d
CL_MAGIC	src/mbr.s	/^CL_MAGIC	= 0xa33f		! very unusual command sequence$/;"	d
CL_MAGIC	src/mbr2.s	/^CL_MAGIC	= 0xa33f		! very unusual command sequence$/;"	d
CL_MAGIC	src/pseudo.S	/^CL_MAGIC	= 0xa33f		! very unusual command sequence$/;"	d
CL_MAGIC	src/second.s	/^CL_MAGIC = 0xa33f ! very unusual command sequence$/;"	d
CL_MAGIC	src/third.s	/^CL_MAGIC = 0xa33f ! very unusual command sequence$/;"	d
CL_MAGIC_ADDR	diagnose/test5.c	41;"	d	file:
CL_MAGIC_ADDR	src/bitmap.s	/^CL_MAGIC_ADDR = 0x20 ! command line magic number$/;"	d
CL_MAGIC_ADDR	src/chain.s	/^CL_MAGIC_ADDR = 0x20 ! command line magic number$/;"	d
CL_MAGIC_ADDR	src/disk.s	/^CL_MAGIC_ADDR	= 0x20			! command line magic number$/;"	d
CL_MAGIC_ADDR	src/first.s	/^CL_MAGIC_ADDR = 0x20 ! command line magic number$/;"	d
CL_MAGIC_ADDR	src/mbr.s	/^CL_MAGIC_ADDR	= 0x20			! command line magic number$/;"	d
CL_MAGIC_ADDR	src/mbr2.s	/^CL_MAGIC_ADDR	= 0x20			! command line magic number$/;"	d
CL_MAGIC_ADDR	src/pseudo.S	/^CL_MAGIC_ADDR	= 0x20			! command line magic number$/;"	d
CL_MAGIC_ADDR	src/second.s	/^CL_MAGIC_ADDR = 0x20 ! command line magic number$/;"	d
CL_MAGIC_ADDR	src/third.s	/^CL_MAGIC_ADDR = 0x20 ! command line magic number$/;"	d
CL_OFFSET	diagnose/test5.c	43;"	d	file:
CL_OFFSET	src/bitmap.s	/^CL_OFFSET = 0x22 ! command line offset$/;"	d
CL_OFFSET	src/chain.s	/^CL_OFFSET = 0x22 ! command line offset$/;"	d
CL_OFFSET	src/disk.s	/^CL_OFFSET	= 0x22			! command line offset$/;"	d
CL_OFFSET	src/first.s	/^CL_OFFSET = 0x22 ! command line offset$/;"	d
CL_OFFSET	src/mbr.s	/^CL_OFFSET	= 0x22			! command line offset$/;"	d
CL_OFFSET	src/mbr2.s	/^CL_OFFSET	= 0x22			! command line offset$/;"	d
CL_OFFSET	src/pseudo.S	/^CL_OFFSET	= 0x22			! command line offset$/;"	d
CL_OFFSET	src/second.s	/^CL_OFFSET = 0x22 ! command line offset$/;"	d
CL_OFFSET	src/third.s	/^CL_OFFSET = 0x22 ! command line offset$/;"	d
CL_POINTER	src/bitmap.s	/^CL_POINTER = 0x228 ! new pointer is dword address$/;"	d
CL_POINTER	src/chain.s	/^CL_POINTER = 0x228 ! new pointer is dword address$/;"	d
CL_POINTER	src/disk.s	/^CL_POINTER	= 0x228			! new pointer is dword address$/;"	d
CL_POINTER	src/first.s	/^CL_POINTER = 0x228 ! new pointer is dword address$/;"	d
CL_POINTER	src/mbr.s	/^CL_POINTER	= 0x228			! new pointer is dword address$/;"	d
CL_POINTER	src/mbr2.s	/^CL_POINTER	= 0x228			! new pointer is dword address$/;"	d
CL_POINTER	src/second.s	/^CL_POINTER = 0x228 ! new pointer is dword address$/;"	d
CL_POINTER	src/third.s	/^CL_POINTER = 0x228 ! new pointer is dword address$/;"	d
CL_RAMDISK_MAX	src/bitmap.s	/^CL_RAMDISK_MAX = CL_POINTER+4 ! ramdisk_max; header version 0x0203$/;"	d
CL_RAMDISK_MAX	src/chain.s	/^CL_RAMDISK_MAX = CL_POINTER+4 ! ramdisk_max; header version 0x0203$/;"	d
CL_RAMDISK_MAX	src/disk.s	/^CL_RAMDISK_MAX	= CL_POINTER+4		! ramdisk_max; header version 0x0203$/;"	d
CL_RAMDISK_MAX	src/first.s	/^CL_RAMDISK_MAX = CL_POINTER+4 ! ramdisk_max; header version 0x0203$/;"	d
CL_RAMDISK_MAX	src/mbr.s	/^CL_RAMDISK_MAX	= CL_POINTER+4		! ramdisk_max; header version 0x0203$/;"	d
CL_RAMDISK_MAX	src/mbr2.s	/^CL_RAMDISK_MAX	= CL_POINTER+4		! ramdisk_max; header version 0x0203$/;"	d
CL_RAMDISK_MAX	src/second.s	/^CL_RAMDISK_MAX = CL_POINTER+4 ! ramdisk_max; header version 0x0203$/;"	d
CL_RAMDISK_MAX	src/third.s	/^CL_RAMDISK_MAX = CL_POINTER+4 ! ramdisk_max; header version 0x0203$/;"	d
COMMAND_LINE_SIZE	src/lilo.h	180;"	d
COMMON_H	src/common.h	15;"	d
CONFIG	src/cfg.h	/^} CONFIG;$/;"	t	typeref:struct:__anon33
CONFIG_H	src/config.h	14;"	d
CONFIG_ROOT_RDONLY	src/bootsect.S	/^#define CONFIG_ROOT_RDONLY 1$/;"	d
CONFIG_TYPE	src/cfg.h	/^typedef enum { cft_strg,cft_flag,cft_link,cft_end } CONFIG_TYPE;$/;"	t	typeref:enum:__anon32
COPT	diagnose/Makefile	/^COPT = -ansi -I$(CINCL) -c -O -DDEBUG=0$/;"	m
COPT	dos/Makefile	/^COPT = -ansi -I.. -I$(CINCL) -c -O $(CFLAGS)$/;"	m
COUNT	src/chain.S	/^COUNT	=  DRVMAP_SIZE*2$/;"	d
COUNT	src/chain.s	/^COUNT = 24*2$/;"	d
COVERED	src/raid.c	53;"	d	file:
CPP	diagnose/Makefile	/^CPP = gcc -E$/;"	m
CPP	dos/Makefile	/^CPP = gcc -E$/;"	m
CPP	src/Makefile	/^CPP=$(CC) -E$/;"	m
CR	diagnose/test4.c	19;"	d	file:
CR	diagnose/test4.c	24;"	d	file:
CR	diagnose/test5.c	20;"	d	file:
CR	diagnose/test5.c	25;"	d	file:
CRC_PASSWORDS	src/lilo.h	164;"	d
CRC_POLY1	src/lilo.h	361;"	d
CRC_POLY2	src/lilo.h	362;"	d
CRC_POLY3	src/lilo.h	363;"	d
CRC_POLY4	src/lilo.h	364;"	d
CRC_POLY5	src/lilo.h	365;"	d
CTRL_C	diagnose/test4.c	27;"	d	file:
CTRL_C	diagnose/test5.c	28;"	d	file:
CYL1023	src/mbr.S	/^#define CYL1023 0		\/* 1==compare to 1023 \/ 0==fn8 cyl #    *\/$/;"	d
Capabilities	src/vesainfo.h	/^         int  Capabilities;$/;"	m	struct:__anon1::__anon2
Choosing the   right  boot concept	doc/user.tex	/^\\end{description}$/;"	u
Compatibility	doc/user.tex	/^for how to uninstall \\LILO.$/;"	b
Configuration	doc/user.tex	/^$\$$/;"	u
Configuration parameters	doc/tech.tex	/^options.$/;"	s
Copyright	src/crt.S	/^Copyright 2000-2005 John Coffman.$/;"	l
Copyright	src/dparam.S	/^Copyright 1992 Werner Almesberger *\/$/;"	l
Copyright	src/first.S	/^Copyright 1992-1998 Werner Almesberger.$/;"	l
Copyright	src/first.S	/^Copyright 1999-2005 John Coffman.$/;"	l
Copyright	src/graph.S	/^Copyright 2000-2004 John Coffman.$/;"	l
Copyright	src/menu.S	/^Copyright 2000-2004 John Coffman.$/;"	l
Copyright	src/second.S	/^Copyright 1992-1998 Werner Almesberger.$/;"	l
Copyright	src/second.S	/^Copyright 1999-2006 John Coffman.$/;"	l
Copyright	src/volume.S	/^Copyright 2003-2004 John Coffman.$/;"	l
Cshs	src/shs3.S	/^#define Cshs ecx$/;"	d
DC_MAGIC	src/lilo.h	344;"	d
DC_MGOFF	src/lilo.h	345;"	d
DEBUG	diagnose/sector.S	/^#define DEBUG 0		\/* enables loading .EXE for codeview debugging *\/$/;"	d
DEBUG	src/disk.S	/^#define DEBUG 0$/;"	d
DEBUG	src/first.S	/^#define DEBUG 0$/;"	d
DEBUG	src/mbr.S	/^#define DEBUG 0$/;"	d
DEBUG	src/pseudo.S	/^#define DEBUG 0$/;"	d
DEBUG_INITRD	src/second.S	/^#define DEBUG_INITRD 0$/;"	d
DEBUG_NEW	src/chain.S	/^#define DEBUG_NEW$/;"	d
DEBUG_NEW	src/second.S	/^#define DEBUG_NEW 0$/;"	d
DEBUG_NEW	src/second.S	/^#define DEBUG_NEW 1$/;"	d
DEF_INITSEG	src/lilo.h	50;"	d
DEF_SETUPSEG	src/lilo.h	52;"	d
DEF_SYSSEG	src/lilo.h	51;"	d
DEF_SYSSIZE	src/lilo.h	53;"	d
DELAY	src/mbr.S	/^DELAY	= 12			\/* tenths of a second *\/$/;"	d
DELAY	src/mbr.s	/^DELAY	= 12			$/;"	d
DELAY	src/mbr2.s	/^DELAY	= 12			$/;"	d
DELL_DIRTY_HACK	src/disk.S	/^#define DELL_DIRTY_HACK$/;"	d
DELL_DIRTY_HACK	src/pseudo.S	/^#define DELL_DIRTY_HACK$/;"	d
DESCR	src/second.S	/^#define DESCR Descr$/;"	d
DESCR0	src/bitmap.s	/^DESCR0 = Descr$/;"	d
DESCR0	src/second.S	/^DESCR0 = DESCR$/;"	d
DESCR0	src/second.S	/^DESCR0 = DESCR+2$/;"	d
DESCR0	src/second.s	/^DESCR0 = Descr$/;"	d
DESCR0	src/third.s	/^DESCR0 = Descr$/;"	d
DESCR_SECTORS	src/common.h	/^} DESCR_SECTORS;$/;"	t	typeref:union:__anon18
DEVICE	src/device.h	/^} DEVICE;$/;"	t	typeref:struct:__anon5
DEVICE_H	src/device.h	14;"	d
DEV_DIR	src/config.h	56;"	d
DEV_DISK_DIR	src/config.h	57;"	d
DEV_MASK	src/lilo.h	280;"	d
DEV_MASK_EXP	src/lilo.h	279;"	d
DEV_MASK_asm	src/bitmap.s	/^DEV_MASK_asm = 0x80+16 -1 ! **$/;"	d
DEV_MASK_asm	src/chain.s	/^DEV_MASK_asm = 0x80+16 -1 ! **$/;"	d
DEV_MASK_asm	src/disk.s	/^DEV_MASK_asm = 0x80+16-1		! **$/;"	d
DEV_MASK_asm	src/first.s	/^DEV_MASK_asm = 0x80+16 -1 ! **$/;"	d
DEV_MASK_asm	src/mbr.s	/^DEV_MASK_asm = 0x80+16-1		! **$/;"	d
DEV_MASK_asm	src/mbr2.s	/^DEV_MASK_asm = 0x80+16-1		! **$/;"	d
DEV_MASK_asm	src/second.s	/^DEV_MASK_asm = 0x80+16 -1 ! **$/;"	d
DEV_MASK_asm	src/third.s	/^DEV_MASK_asm = 0x80+16 -1 ! **$/;"	d
DFLCMD	src/second.S	/^#define DFLCMD Dflcmd$/;"	d
DFL_BOOT	src/config.h	39;"	d
DFL_BOOT	src/config.h	50;"	d
DFL_CHAIN	src/config.h	40;"	d
DFL_CHAIN	src/config.h	51;"	d
DFL_CONFIG	src/config.h	35;"	d
DFL_CONFIG	src/config.h	46;"	d
DFL_CONFIG	src/config.h	64;"	d
DFL_DISKTAB	src/config.h	36;"	d
DFL_DISKTAB	src/config.h	47;"	d
DFL_KEYTAB	src/config.h	53;"	d
DFL_MBR	src/config.h	41;"	d
DFL_MBR	src/config.h	52;"	d
DIFF	src/geometry.c	1068;"	d	file:
DISK_VERSION	diagnose/test4.c	13;"	d	file:
DISK_VERSION	diagnose/test5.c	14;"	d	file:
DL_BAD	src/common.h	/^typedef enum {DL_NOT_SET=0, DL_BAD=1, DL_UNKNOWN, DL_MAYBE, DL_GOOD} DL_BIOS;$/;"	e	enum:__anon26
DL_BIOS	src/common.h	/^typedef enum {DL_NOT_SET=0, DL_BAD=1, DL_UNKNOWN, DL_MAYBE, DL_GOOD} DL_BIOS;$/;"	t	typeref:enum:__anon26
DL_GOOD	src/common.h	/^typedef enum {DL_NOT_SET=0, DL_BAD=1, DL_UNKNOWN, DL_MAYBE, DL_GOOD} DL_BIOS;$/;"	e	enum:__anon26
DL_MAYBE	src/common.h	/^typedef enum {DL_NOT_SET=0, DL_BAD=1, DL_UNKNOWN, DL_MAYBE, DL_GOOD} DL_BIOS;$/;"	e	enum:__anon26
DL_NOT_SET	src/common.h	/^typedef enum {DL_NOT_SET=0, DL_BAD=1, DL_UNKNOWN, DL_MAYBE, DL_GOOD} DL_BIOS;$/;"	e	enum:__anon26
DL_UNKNOWN	src/common.h	/^typedef enum {DL_NOT_SET=0, DL_BAD=1, DL_UNKNOWN, DL_MAYBE, DL_GOOD} DL_BIOS;$/;"	e	enum:__anon26
DM_TABLE	src/geometry.c	/^} DM_TABLE;$/;"	t	typeref:struct:_dm_table	file:
DM_TARGET	src/geometry.c	/^} DM_TARGET;$/;"	t	typeref:struct:_dm_target	file:
DNAME	src/second.S	/^#define DNAME 1$/;"	d
DOS_D	src/chain.S	/^#define DOS_D$/;"	d
DRVMAP_SIZE	src/lilo.h	359;"	d
DT_ENTRY	src/geometry.h	/^} DT_ENTRY;$/;"	t	typeref:struct:_dt_entry
DUPLICATE	src/device.c	/^enum {INVALID=1, DUPLICATE=2, REGENERATE=3, NTCAUTION=4};$/;"	e	enum:__anon28	file:
D_MASK	src/lilo.h	194;"	d
Dataend	src/bitmap.s	/^Dataend = Parmline + 512$/;"	d
Dataend	src/second.S	/^Dataend		=	Parmline + SECTOR_SIZE$/;"	d
Dataend	src/second.s	/^Dataend = Parmline + 512$/;"	d
Dataend	src/third.s	/^Dataend = Parmline + 512$/;"	d
Descr	src/bitmap.s	/^Descr = Keytable + 512$/;"	d
Descr	src/second.S	/^Descr		=	Dflcmd + SECTOR_SIZE$/;"	d
Descr	src/second.S	/^Descr		=	Keytable + SECTOR_SIZE$/;"	d
Descr	src/second.s	/^Descr = Keytable + 512$/;"	d
Descr	src/third.s	/^Descr = Keytable + 512$/;"	d
Device-specific options	doc/user.tex	/^(including \\raw{lock}) when invoked the next time.$/;"	b
Dflcmd	src/bitmap.s	/^Dflcmd = Map + 512$/;"	d
Dflcmd	src/second.S	/^Dflcmd		=	Map + SECTOR_SIZE$/;"	d
Dflcmd	src/second.s	/^Dflcmd = Map + 512$/;"	d
Dflcmd	src/third.s	/^Dflcmd = Map + 512$/;"	d
Disk geometry	doc/user.tex	/^\\end{verbatim}$/;"	u
Disk organization	doc/user.tex	/^\\LILO\\ in particular.$/;"	u
Dshs	src/shs3.S	/^#define Dshs edx$/;"	d
E820_MAGIC	diagnose/test4.c	63;"	d	file:
EARLY_MAP	src/bsect.c	53;"	d	file:
EBDA	src/chain.S	/^#define EBDA 0$/;"	d
EBDA_EXTRA	src/lilo.h	475;"	d
EDD_DMA_BOUNDARY_TRANSP	src/probe.h	45;"	d
EDD_LOCK	diagnose/test4.c	35;"	d	file:
EDD_LOCK	diagnose/test5.c	34;"	d	file:
EDD_LOCK	src/lilo.h	371;"	d
EDD_LTH	src/lilo.h	369;"	d
EDD_PACKET	diagnose/test4.c	36;"	d	file:
EDD_PACKET	diagnose/test5.c	35;"	d	file:
EDD_PACKET	src/lilo.h	370;"	d
EDD_PARAM_GEOM_VALID	src/probe.h	46;"	d
EDD_SUBSET	diagnose/test4.c	34;"	d	file:
EDD_SUBSET	diagnose/test5.c	33;"	d	file:
EDD_SUBSET	src/lilo.h	372;"	d
EDD_flags	src/probe.h	/^   char EDD_flags;$/;"	m	struct:disk_geom
EDD_rev	src/probe.h	/^   char EDD_rev;$/;"	m	struct:disk_geom
EDIT	src/Makefile	/^EDIT=edit.c common.o$/;"	m
EDIT_H	src/edit.h	14;"	d
EEWW	src/graph.S	/^EEWW	= 205$/;"	d
EEWW	src/third.s	/^EEWW = 205$/;"	d
END_FS	src/second.S	/^#define END_FS pop ds$/;"	d
END_FS	src/second.S	/^#define END_FS$/;"	d
EVMS_GET_BMAP	src/geometry.c	125;"	d	file:
EVMS_GET_IOCTL_VERSION	src/geometry.c	128;"	d	file:
EW	src/graph.S	/^EW	= 196$/;"	d
EW	src/third.s	/^EW = 196$/;"	d
EXTENDED_VGA	src/lilo.h	57;"	d
EX_DL_MAG	src/lilo.h	283;"	d
EX_MAG_H	src/lilo.h	285;"	d
EX_MAG_HL	src/lilo.h	286;"	d
EX_MAG_L	src/lilo.h	284;"	d
EX_MAG_STRING	src/lilo.h	287;"	d
EX_OFF	src/lilo.h	282;"	d
Edd	src/probe.h	/^struct Edd {$/;"	s
Equip	src/probe.h	/^struct Equip {$/;"	s
Eshs	src/shs3.S	/^#define Eshs edi$/;"	d
FAIL	src/display4.S	/^#define FAIL	0$/;"	d
FAT_copies	diagnose/sector.S	/^FAT_copies:		db	2$/;"	d
FATbase	diagnose/sector.S	/^FATbase:	.blkw	1	; reserved_sectors$/;"	l
FATnibbles	diagnose/sector.S	/^FATnibbles:	.blkw	1$/;"	l
FATsector	diagnose/sector.S	/^FATsector:	.blkw	1$/;"	l
FATshift	diagnose/sector.S	/^FATshift:	.blkb	1$/;"	l
FD	diagnose/Makefile	/^FD = msdos.b$/;"	m
FDGETPRM	src/geometry.h	53;"	d
FDSIZE	diagnose/Makefile	/^FDSIZE = 1440$/;"	m
FD_2M	src/geometry.h	42;"	d
FD_PERP	src/geometry.h	47;"	d
FD_SECTSIZE	src/geometry.h	45;"	d
FD_SIZECODE	src/geometry.h	44;"	d
FD_SIZECODEMASK	src/geometry.h	43;"	d
FD_STRETCH	src/geometry.h	35;"	d
FD_SWAPSIDES	src/geometry.h	36;"	d
FD_ZEROBASED	src/geometry.h	37;"	d
FIBMAP	src/geometry.c	1373;"	d	file:
FIBMAP	src/geometry.h	82;"	d
FIG2DEV	doc/Makefile	/^FIG2DEV=fig2dev$/;"	m
FIGETBSZ	src/geometry.h	83;"	d
FIRSTSEG	src/lilo.h	404;"	d
FLAG2_EL_TORITO	src/lilo.h	313;"	d
FLAG2_NOKBD	src/lilo.h	316;"	d
FLAG2_UNATTENDED	src/lilo.h	314;"	d
FLAG2_VIRTUAL	src/lilo.h	315;"	d
FLAG_BD_OKAY	src/lilo.h	305;"	d
FLAG_FALLBACK	src/lilo.h	325;"	d
FLAG_KERNEL	src/lilo.h	323;"	d
FLAG_LARGEMEM	src/lilo.h	303;"	d
FLAG_LOADHI	src/lilo.h	327;"	d
FLAG_LOCK	src/lilo.h	321;"	d
FLAG_MAP_ON_BOOT	src/lilo.h	304;"	d
FLAG_MODKRN	src/lilo.h	322;"	d
FLAG_NOBD	src/lilo.h	302;"	d
FLAG_NOKBDEFAULT	src/lilo.h	336;"	d
FLAG_NOKBDISABLE	src/lilo.h	337;"	d
FLAG_PASSWORD	src/lilo.h	326;"	d
FLAG_PROMPT	src/lilo.h	296;"	d
FLAG_RAID	src/lilo.h	297;"	d
FLAG_RAID_DEFEAT	src/lilo.h	298;"	d
FLAG_RESTR	src/lilo.h	320;"	d
FLAG_RETAIN	src/lilo.h	334;"	d
FLAG_SAVE	src/lilo.h	307;"	d
FLAG_SAVE	src/lilo.h	309;"	d
FLAG_SINGLE	src/lilo.h	333;"	d
FLAG_TOOBIG	src/lilo.h	324;"	d
FLAG_VGA	src/lilo.h	319;"	d
FLAG_VMDEFAULT	src/lilo.h	331;"	d
FLAG_VMDISABLE	src/lilo.h	329;"	d
FLAG_VMWARN	src/lilo.h	330;"	d
FS_REG	diagnose/test4.c	31;"	d	file:
File references	doc/tech.tex	/^the secondary boot loader is running.$/;"	s
Floppy	src/probe.h	/^struct Floppy {$/;"	s
Fn48	src/probe.h	/^struct Fn48 {$/;"	s
ForceFatSector	diagnose/sector.S	/^ForceFatSector:$/;"	l
G	src/Makefile	/^G=`cat foo1 foo2 | grep version | cut -d " " -f 3`$/;"	m
GEOMETRY	src/geometry.h	/^} GEOMETRY;$/;"	t	typeref:struct:__anon6
GEOMETRY_H	src/geometry.h	12;"	d
GET_ARRAY_INFO	src/md-int.h	56;"	d
GET_DISK_INFO	src/md-int.h	57;"	d
GRAPH_S	src/graph.S	/^#define GRAPH_S$/;"	d
Global options	doc/user.tex	/^\\end{verbatim}$/;"	b
HDIO_GETGEO	src/geometry.c	133;"	d	file:
HDIO_GETGEO	src/geometry.h	28;"	d
HFILES	dos/Makefile	/^HFILES = ..\/src\/lilo.h ..\/src\/bitmap.h ..\/src\/cfg.h ..\/src\/config.h ..\/src\/common.h ..\/src\/map.h ..\/src\/temp.h ..\/src\/version.h$/;"	m
HFILES	src/Makefile	/^HFILES=bdata.h bitmap.h boot.h bsect.h cfg.h common.h config.h device.h \\$/;"	m
HIDDEN_OFF	src/lilo.h	240;"	d
HIGHMEM_MAX	src/second.S	/^#define HIGHMEM_MAX 0x38000000$/;"	d
HIGH_4M	src/boot.c	42;"	d	file:
HIGH_SECTORS	src/boot.c	41;"	d	file:
HOT_ADD_DISK	src/md-int.h	69;"	d
HOT_REMOVE_DISK	src/md-int.h	63;"	d
Hard	src/probe.h	/^struct Hard {$/;"	s
Hue	src/edit.c	/^char *Hue(int idx)$/;"	f
IDENTIFY_H	src/identify.h	15;"	d
ID_GET	src/device.c	/^enum {ID_GET=0, ID_SET};$/;"	e	enum:__anon27	file:
ID_SET	src/device.c	/^enum {ID_GET=0, ID_SET};$/;"	e	enum:__anon27	file:
IMAGES	doc/Makefile	/^IMAGES=bootloader.tex map.tex image.tex parameter.tex other.tex$/;"	m
IMAGE_DESCR	src/common.h	/^;*\/} IMAGE_DESCR;		\/*$/;"	t	typeref:struct:__anon9
INITSEG	src/bitmap.s	/^INITSEG = 0x9000 ! we move boot here - out of the way$/;"	d
INITSEG	src/bootsect.S	/^INITSEG   = 0x9000			! we move boot here - out of the way$/;"	d
INITSEG	src/bootsect.s	/^INITSEG   = 0x9000			! we move boot here - out of the way$/;"	d
INITSEG	src/chain.s	/^INITSEG = 0x9000 ! we move boot here - out of the way$/;"	d
INITSEG	src/disk.s	/^INITSEG   = 0x9000			! we move boot here - out of the way$/;"	d
INITSEG	src/first.s	/^INITSEG = 0x9000 ! we move boot here - out of the way$/;"	d
INITSEG	src/mbr.s	/^INITSEG   = 0x9000			! we move boot here - out of the way$/;"	d
INITSEG	src/mbr2.s	/^INITSEG   = 0x9000			! we move boot here - out of the way$/;"	d
INITSEG	src/second.s	/^INITSEG = 0x9000 ! we move boot here - out of the way$/;"	d
INITSEG	src/third.s	/^INITSEG = 0x9000 ! we move boot here - out of the way$/;"	d
INT4	src/lilo.h	20;"	d
INT4	src/lilo.h	22;"	d
INVALID	src/device.c	/^enum {INVALID=1, DUPLICATE=2, REGENERATE=3, NTCAUTION=4};$/;"	e	enum:__anon28	file:
IS_COVERED	src/raid.c	51;"	d	file:
Installation	doc/user.tex	/^\\section{Installation and updates}$/;"	u
Installation and updates	doc/user.tex	/^\\newpage$/;"	s
Installation of other operating systems	doc/user.tex	/^date should be carefully checked.$/;"	u
Introduction	doc/user.tex	/^\\newpage$/;"	s
JRC_DS_EQ_SS	src/first.S	/^#define JRC_DS_EQ_SS$/;"	d
K1	src/shs2.c	34;"	d	file:
K2	src/shs2.c	35;"	d	file:
K3	src/shs2.c	36;"	d	file:
K4	src/shs2.c	37;"	d	file:
KBBEG	src/bitmap.s	/^KBBEG = 0x41A ! beginning of keyboard buffer$/;"	d
KBBEG	src/chain.s	/^KBBEG = 0x41A ! beginning of keyboard buffer$/;"	d
KBBEG	src/disk.s	/^KBBEG     = 0x41A			! beginning of keyboard buffer$/;"	d
KBBEG	src/first.s	/^KBBEG = 0x41A ! beginning of keyboard buffer$/;"	d
KBBEG	src/mbr.s	/^KBBEG     = 0x41A			! beginning of keyboard buffer$/;"	d
KBBEG	src/mbr2.s	/^KBBEG     = 0x41A			! beginning of keyboard buffer$/;"	d
KBBEG	src/second.s	/^KBBEG = 0x41A ! beginning of keyboard buffer$/;"	d
KBBEG	src/third.s	/^KBBEG = 0x41A ! beginning of keyboard buffer$/;"	d
KBEND	src/bitmap.s	/^KBEND = 0x41C ! end of keyboard buffer$/;"	d
KBEND	src/chain.s	/^KBEND = 0x41C ! end of keyboard buffer$/;"	d
KBEND	src/disk.s	/^KBEND	  = 0x41C			! end of keyboard buffer$/;"	d
KBEND	src/first.s	/^KBEND = 0x41C ! end of keyboard buffer$/;"	d
KBEND	src/mbr.s	/^KBEND	  = 0x41C			! end of keyboard buffer$/;"	d
KBEND	src/mbr2.s	/^KBEND	  = 0x41C			! end of keyboard buffer$/;"	d
KBEND	src/second.s	/^KBEND = 0x41C ! end of keyboard buffer$/;"	d
KBEND	src/third.s	/^KBEND = 0x41C ! end of keyboard buffer$/;"	d
KBHIGH	src/bitmap.s	/^KBHIGH = 0x3e$/;"	d
KBHIGH	src/chain.s	/^KBHIGH = 0x3e$/;"	d
KBHIGH	src/disk.s	/^KBHIGH	  = 0x3e$/;"	d
KBHIGH	src/first.s	/^KBHIGH = 0x3e$/;"	d
KBHIGH	src/mbr.s	/^KBHIGH	  = 0x3e$/;"	d
KBHIGH	src/mbr2.s	/^KBHIGH	  = 0x3e$/;"	d
KBHIGH	src/second.s	/^KBHIGH = 0x3e$/;"	d
KBHIGH	src/third.s	/^KBHIGH = 0x3e$/;"	d
KBLOW	src/bitmap.s	/^KBLOW = 0x1e$/;"	d
KBLOW	src/chain.s	/^KBLOW = 0x1e$/;"	d
KBLOW	src/disk.s	/^KBLOW	  = 0x1e$/;"	d
KBLOW	src/first.s	/^KBLOW = 0x1e$/;"	d
KBLOW	src/mbr.s	/^KBLOW	  = 0x1e$/;"	d
KBLOW	src/mbr2.s	/^KBLOW	  = 0x1e$/;"	d
KBLOW	src/second.s	/^KBLOW = 0x1e$/;"	d
KBLOW	src/third.s	/^KBLOW = 0x1e$/;"	d
KERNEL_VERSION	src/lilo.h	70;"	d
KEYTABLE	src/second.S	/^#define KEYTABLE Keytable$/;"	d
Keytable	src/bitmap.s	/^Keytable = Dflcmd + 512$/;"	d
Keytable	src/second.S	/^Keytable	=	Descr + SECTOR_SIZE*MAX_DESCR_SECS_asm$/;"	d
Keytable	src/second.S	/^Keytable	=	Dflcmd + SECTOR_SIZE$/;"	d
Keytable	src/second.s	/^Keytable = Dflcmd + 512$/;"	d
Keytable	src/third.s	/^Keytable = Dflcmd + 512$/;"	d
LARGE	diagnose/sector.S	/^#define LARGE 0		\/* enables loading code >32K *\/$/;"	d
LATEX	doc/Makefile	/^LATEX=latex$/;"	m
LBA32_FLAG	src/lilo.h	267;"	d
LBA32_NOCOUNT	src/lilo.h	268;"	d
LCF_BUILTIN	src/lilo.h	489;"	d
LCF_DEVMAPPER	src/config.h	19;"	d
LCF_FIRST6	src/lilo.h	492;"	d
LCF_UNIFY	src/lilo.h	486;"	d
LD86	src/Makefile	/^LD86=ld86 -0$/;"	m
LDFLAGS	src/Makefile	/^LDFLAGS=#-Xlinker -qmagic$/;"	m
LFLAG_HIGH	src/lilo.h	355;"	d
LFLAG_USE_HEAP	src/lilo.h	356;"	d
LIBS	src/Makefile	/^LIBS=$(DEVMAPPER)$/;"	m
LILO  alone	doc/user.tex	/^sector on that ``spare'' Linux partition has to be updated too.$/;"	b
LILO_ASM	src/chain.S	/^#define LILO_ASM$/;"	d
LILO_ASM	src/disk.S	/^#define LILO_ASM$/;"	d
LILO_ASM	src/dump.S	/^#define LILO_ASM$/;"	d
LILO_ASM	src/first.S	/^#define LILO_ASM$/;"	d
LILO_ASM	src/mbr.S	/^#define LILO_ASM$/;"	d
LILO_ASM	src/second.S	/^#define LILO_ASM$/;"	d
LILO_DIR	src/config.h	33;"	d
LILO_EXTRA	src/common.h	/^typedef enum {X_NULL=0, X_NONE, X_AUTO, X_MBR_ONLY, X_MBR, X_SPEC} LILO_EXTRA;$/;"	t	typeref:enum:__anon24
LILO_H	src/lilo.h	17;"	d
LINEAR	src/md-int.h	83;"	d
LINEAR_FLAG	src/lilo.h	266;"	d
LINK	diagnose/Makefile	/^LINK = $(CC) -v$/;"	m
LINK	dos/Makefile	/^LINK = $(CC) -v$/;"	m
LINUX	src/geometry.h	14;"	d
LINUX_VERSION_CODE	src/lilo.h	67;"	d
LIS	src/Makefile	/^LIS=chain.lis disk.lis dparam.lis first.lis second.lis \\$/;"	m
LITTLE_ENDIAN	src/shs2.h	38;"	d
LLSECTORSIZE	src/partition.h	31;"	d
LOADER_VERSION	src/lilo.h	354;"	d
LOADSEG	src/bitmap.s	/^LOADSEG = SYSSEG ; max kernel = 1024 sectors$/;"	d
LOADSEG	src/second.S	/^LOADSEG	= SYSSEG		; max kernel = 1024 sectors$/;"	d
LOADSEG	src/second.s	/^LOADSEG = SYSSEG ; max kernel = 1024 sectors$/;"	d
LOADSEG	src/third.s	/^LOADSEG = SYSSEG ; max kernel = 1024 sectors$/;"	d
LONG	src/shs2.h	/^typedef unsigned int  LONG;$/;"	t
LOOP	diagnose/Makefile	/^LOOP=\/dev\/loop5$/;"	m
LOPT	diagnose/Makefile	/^LOPT = -m >$*.map -M -d$/;"	m
LOPT	dos/Makefile	/^LOPT = -m >$*.map -M -d$/;"	m
LVM	src/md-int.h	89;"	d
LVM_GET_IOP_VERSION	src/geometry.c	105;"	d	file:
LV_BMAP	src/geometry.c	99;"	d	file:
Licensed	src/crt.S	/^Licensed under the terms contained in the file 'COPYING' in the $/;"	l
Licensed	src/dparam.S	/^Licensed under the terms contained in the file 'COPYING' in the $/;"	l
Licensed	src/first.S	/^Licensed under the terms contained in the file 'COPYING' in the $/;"	l
Licensed	src/graph.S	/^Licensed under the terms contained in the file 'COPYING' in the $/;"	l
Licensed	src/menu.S	/^Licensed under the terms contained in the file 'COPYING' in the $/;"	l
Licensed	src/second.S	/^Licensed under the terms contained in the file 'COPYING' in the $/;"	l
Licensed	src/volume.S	/^Licensed under the terms contained in the file 'COPYING' in the $/;"	l
Load sequence	doc/tech.tex	/^reflect the current ('98) status of Linux or of \\LILO\\ (version 21).}$/;"	s
MAGIC_SERIAL	src/lilo.h	204;"	d
MAJMIN_RAM	src/lilo.h	94;"	d
MAJOR	src/geometry.h	57;"	d
MAJOR	src/geometry.h	65;"	d
MAJOR	src/geometry.h	74;"	d
MAJOR_ACORN	src/lilo.h	106;"	d
MAJOR_AMI_HYP	src/lilo.h	140;"	d
MAJOR_CISS	src/lilo.h	141;"	d
MAJOR_DAC960	src/lilo.h	114;"	d
MAJOR_DAC960_8	src/lilo.h	147;"	d
MAJOR_DOC	src/lilo.h	139;"	d
MAJOR_EMD	src/lilo.h	148;"	d
MAJOR_EMD_SORT	src/lilo.h	98;"	d
MAJOR_ESDI	src/lilo.h	110;"	d
MAJOR_EVMS	src/lilo.h	144;"	d
MAJOR_EXPR	src/lilo.h	120;"	d
MAJOR_FD	src/lilo.h	100;"	d
MAJOR_FTL	src/lilo.h	111;"	d
MAJOR_HD	src/lilo.h	101;"	d
MAJOR_HPT370	src/lilo.h	143;"	d
MAJOR_HPT370_SORT	src/lilo.h	99;"	d
MAJOR_I2O	src/lilo.h	132;"	d
MAJOR_IBM_iSER	src/lilo.h	142;"	d
MAJOR_IDE10	src/lilo.h	136;"	d
MAJOR_IDE2	src/lilo.h	107;"	d
MAJOR_IDE3	src/lilo.h	108;"	d
MAJOR_IDE4	src/lilo.h	109;"	d
MAJOR_IDE5	src/lilo.h	116;"	d
MAJOR_IDE6	src/lilo.h	118;"	d
MAJOR_IDE7	src/lilo.h	133;"	d
MAJOR_IDE8	src/lilo.h	134;"	d
MAJOR_IDE9	src/lilo.h	135;"	d
MAJOR_LOOP	src/lilo.h	102;"	d
MAJOR_LVM	src/lilo.h	119;"	d
MAJOR_MD	src/lilo.h	104;"	d
MAJOR_MDP	src/lilo.h	152;"	d
MAJOR_MDP_SORT	src/lilo.h	96;"	d
MAJOR_NFTL	src/lilo.h	138;"	d
MAJOR_PP	src/lilo.h	112;"	d
MAJOR_PPDD	src/lilo.h	137;"	d
MAJOR_PPFD	src/lilo.h	113;"	d
MAJOR_SATA	src/lilo.h	149;"	d
MAJOR_SATA2	src/lilo.h	150;"	d
MAJOR_SD	src/lilo.h	103;"	d
MAJOR_SD16	src/lilo.h	146;"	d
MAJOR_SD2	src/lilo.h	124;"	d
MAJOR_SD3	src/lilo.h	125;"	d
MAJOR_SD4	src/lilo.h	126;"	d
MAJOR_SD5	src/lilo.h	127;"	d
MAJOR_SD6	src/lilo.h	128;"	d
MAJOR_SD7	src/lilo.h	129;"	d
MAJOR_SD8	src/lilo.h	130;"	d
MAJOR_SD9	src/lilo.h	145;"	d
MAJOR_SD_SORT	src/lilo.h	123;"	d
MAJOR_SMART2	src/lilo.h	131;"	d
MAJOR_XT	src/lilo.h	105;"	d
MAP	src/second.S	/^#define MAP Map$/;"	d
MAP2	src/second.S	/^#define MAP2 Map2$/;"	d
MAP_ENTRY	src/map.c	/^} MAP_ENTRY;$/;"	t	typeref:struct:_map_entry	file:
MAP_FILE	src/config.h	37;"	d
MAP_FILE	src/config.h	48;"	d
MAP_FILE	src/config.h	65;"	d
MAP_H	src/map.h	13;"	d
MAP_TMP_APP	src/config.h	38;"	d
MAP_TMP_APP	src/config.h	49;"	d
MAX	src/device.c	265;"	d	file:
MAX	src/device.c	394;"	d	file:
MAX	src/edit.c	773;"	d	file:
MAX2COL	src/crt.S	/^MAX2COL	=	14$/;"	d
MAX2COL	src/third.s	/^MAX2COL = 14$/;"	d
MAXCOMMENT	src/crt.S	/^MAXCOMMENT  =	3$/;"	d
MAXCOMMENT	src/third.s	/^MAXCOMMENT = 3$/;"	d
MAXTITLE	src/crt.S	/^MAXTITLE  =	3$/;"	d
MAXTITLE	src/third.s	/^MAXTITLE = 3$/;"	d
MAX_BIOS_DEVICES	src/lilo.h	208;"	d
MAX_BIOS_DEVICES	src/lilo.h	211;"	d
MAX_BIOS_DEVICES_asm	src/bitmap.s	/^MAX_BIOS_DEVICES_asm = 16 ! **$/;"	d
MAX_BIOS_DEVICES_asm	src/chain.s	/^MAX_BIOS_DEVICES_asm = 16 ! **$/;"	d
MAX_BIOS_DEVICES_asm	src/disk.s	/^MAX_BIOS_DEVICES_asm = 16	! **$/;"	d
MAX_BIOS_DEVICES_asm	src/first.s	/^MAX_BIOS_DEVICES_asm = 16 ! **$/;"	d
MAX_BIOS_DEVICES_asm	src/mbr.s	/^MAX_BIOS_DEVICES_asm = 16	! **$/;"	d
MAX_BIOS_DEVICES_asm	src/mbr2.s	/^MAX_BIOS_DEVICES_asm = 16	! **$/;"	d
MAX_BIOS_DEVICES_asm	src/second.s	/^MAX_BIOS_DEVICES_asm = 16 ! **$/;"	d
MAX_BIOS_DEVICES_asm	src/third.s	/^MAX_BIOS_DEVICES_asm = 16 ! **$/;"	d
MAX_BOOT_SIZE	src/lilo.h	198;"	d
MAX_CHUNK_SIZE	src/md-int.h	229;"	d
MAX_DESCR_SECS	src/lilo.h	170;"	d
MAX_DESCR_SECS	src/lilo.h	172;"	d
MAX_DESCR_SECS_asm	src/bitmap.s	/^MAX_DESCR_SECS_asm = 3 ! **$/;"	d
MAX_DESCR_SECS_asm	src/chain.s	/^MAX_DESCR_SECS_asm = 3 ! **$/;"	d
MAX_DESCR_SECS_asm	src/disk.s	/^MAX_DESCR_SECS_asm = 3	! **$/;"	d
MAX_DESCR_SECS_asm	src/first.s	/^MAX_DESCR_SECS_asm = 3 ! **$/;"	d
MAX_DESCR_SECS_asm	src/mbr.s	/^MAX_DESCR_SECS_asm = 3	! **$/;"	d
MAX_DESCR_SECS_asm	src/mbr2.s	/^MAX_DESCR_SECS_asm = 3	! **$/;"	d
MAX_DESCR_SECS_asm	src/second.s	/^MAX_DESCR_SECS_asm = 3 ! **$/;"	d
MAX_DESCR_SECS_asm	src/third.s	/^MAX_DESCR_SECS_asm = 3 ! **$/;"	d
MAX_DESCR_SECTORS	src/lilo.h	156;"	d
MAX_DESCR_SECTORS_asm	src/bitmap.s	/^MAX_DESCR_SECTORS_asm = 12 ! **$/;"	d
MAX_DESCR_SECTORS_asm	src/chain.s	/^MAX_DESCR_SECTORS_asm = 12 ! **$/;"	d
MAX_DESCR_SECTORS_asm	src/disk.s	/^MAX_DESCR_SECTORS_asm = 12 ! **$/;"	d
MAX_DESCR_SECTORS_asm	src/first.s	/^MAX_DESCR_SECTORS_asm = 12 ! **$/;"	d
MAX_DESCR_SECTORS_asm	src/mbr.s	/^MAX_DESCR_SECTORS_asm = 12 ! **$/;"	d
MAX_DESCR_SECTORS_asm	src/mbr2.s	/^MAX_DESCR_SECTORS_asm = 12 ! **$/;"	d
MAX_DESCR_SECTORS_asm	src/second.s	/^MAX_DESCR_SECTORS_asm = 12 ! **$/;"	d
MAX_DESCR_SECTORS_asm	src/third.s	/^MAX_DESCR_SECTORS_asm = 12 ! **$/;"	d
MAX_DEVICES	src/lilo.h	209;"	d
MAX_DEVICES	src/lilo.h	212;"	d
MAX_IMAGES	src/lilo.h	177;"	d
MAX_IMAGE_NAME	src/lilo.h	155;"	d
MAX_IMAGE_NAME_asm	src/bitmap.s	/^MAX_IMAGE_NAME_asm = 15 ! **$/;"	d
MAX_IMAGE_NAME_asm	src/chain.s	/^MAX_IMAGE_NAME_asm = 15 ! **$/;"	d
MAX_IMAGE_NAME_asm	src/disk.s	/^MAX_IMAGE_NAME_asm = 15	! **$/;"	d
MAX_IMAGE_NAME_asm	src/first.s	/^MAX_IMAGE_NAME_asm = 15 ! **$/;"	d
MAX_IMAGE_NAME_asm	src/mbr.s	/^MAX_IMAGE_NAME_asm = 15	! **$/;"	d
MAX_IMAGE_NAME_asm	src/mbr2.s	/^MAX_IMAGE_NAME_asm = 15	! **$/;"	d
MAX_IMAGE_NAME_asm	src/second.s	/^MAX_IMAGE_NAME_asm = 15 ! **$/;"	d
MAX_IMAGE_NAME_asm	src/third.s	/^MAX_IMAGE_NAME_asm = 15 ! **$/;"	d
MAX_KERNEL_SECS	src/lilo.h	260;"	d
MAX_LINE	src/config.h	69;"	d
MAX_MENU_TITLE	src/lilo.h	348;"	d
MAX_MENU_TITLE_asm	src/bitmap.s	/^MAX_MENU_TITLE_asm = 37 ! **$/;"	d
MAX_MENU_TITLE_asm	src/chain.s	/^MAX_MENU_TITLE_asm = 37 ! **$/;"	d
MAX_MENU_TITLE_asm	src/disk.s	/^MAX_MENU_TITLE_asm = 37	! **$/;"	d
MAX_MENU_TITLE_asm	src/first.s	/^MAX_MENU_TITLE_asm = 37 ! **$/;"	d
MAX_MENU_TITLE_asm	src/mbr.s	/^MAX_MENU_TITLE_asm = 37	! **$/;"	d
MAX_MENU_TITLE_asm	src/mbr2.s	/^MAX_MENU_TITLE_asm = 37	! **$/;"	d
MAX_MENU_TITLE_asm	src/second.s	/^MAX_MENU_TITLE_asm = 37 ! **$/;"	d
MAX_MENU_TITLE_asm	src/third.s	/^MAX_MENU_TITLE_asm = 37 ! **$/;"	d
MAX_MESSAGE	src/lilo.h	347;"	d
MAX_PERSONALITY	src/md-int.h	90;"	d
MAX_PW_CRC	src/lilo.h	161;"	d
MAX_PW_CRC	src/lilo.h	165;"	d
MAX_PW_CRC_asm	src/bitmap.s	/^MAX_PW_CRC_asm = 5 ! **$/;"	d
MAX_PW_CRC_asm	src/chain.s	/^MAX_PW_CRC_asm = 5 ! **$/;"	d
MAX_PW_CRC_asm	src/disk.s	/^MAX_PW_CRC_asm	= 5		! **$/;"	d
MAX_PW_CRC_asm	src/first.s	/^MAX_PW_CRC_asm = 5 ! **$/;"	d
MAX_PW_CRC_asm	src/mbr.s	/^MAX_PW_CRC_asm	= 5		! **$/;"	d
MAX_PW_CRC_asm	src/mbr2.s	/^MAX_PW_CRC_asm	= 5		! **$/;"	d
MAX_PW_CRC_asm	src/second.s	/^MAX_PW_CRC_asm = 5 ! **$/;"	d
MAX_PW_CRC_asm	src/third.s	/^MAX_PW_CRC_asm = 5 ! **$/;"	d
MAX_RAID	src/lilo.h	214;"	d
MAX_RAID_DEVICES	src/lilo.h	218;"	d
MAX_RAID_DEVICES_asm	src/bitmap.s	/^MAX_RAID_DEVICES_asm = 12 -3 +6 ! **$/;"	d
MAX_RAID_DEVICES_asm	src/chain.s	/^MAX_RAID_DEVICES_asm = 12 -3 +6 ! **$/;"	d
MAX_RAID_DEVICES_asm	src/disk.s	/^MAX_RAID_DEVICES_asm = 12-3+6	! **$/;"	d
MAX_RAID_DEVICES_asm	src/first.s	/^MAX_RAID_DEVICES_asm = 12 -3 +6 ! **$/;"	d
MAX_RAID_DEVICES_asm	src/mbr.s	/^MAX_RAID_DEVICES_asm = 12-3+6	! **$/;"	d
MAX_RAID_DEVICES_asm	src/mbr2.s	/^MAX_RAID_DEVICES_asm = 12-3+6	! **$/;"	d
MAX_RAID_DEVICES_asm	src/second.s	/^MAX_RAID_DEVICES_asm = 12 -3 +6 ! **$/;"	d
MAX_RAID_DEVICES_asm	src/third.s	/^MAX_RAID_DEVICES_asm = 12 -3 +6 ! **$/;"	d
MAX_SETUPSECS	src/bootsect.S	/^MAX_SETUPSECS = 63			! same as  lilo.h   (for kernel >= 2.4.0)$/;"	d
MAX_SETUPSECS	src/bootsect.s	/^MAX_SETUPSECS = 63			! same as  lilo.h   (for kernel >= 2.4.0)$/;"	d
MAX_SETUPSECS	src/lilo.h	258;"	d
MAX_TMP_DEV	src/config.h	30;"	d
MAX_TOKEN	src/lilo.h	154;"	d
MAX_VAR_NAME	src/cfg.c	29;"	d	file:
MD_DISK_ACTIVE	src/md-int.h	152;"	d
MD_DISK_FAULTY	src/md-int.h	151;"	d
MD_DISK_SYNC	src/md-int.h	153;"	d
MD_INT_H	src/md-int.h	18;"	d
MD_MAJOR	src/md-int.h	30;"	d
MD_MIXED	src/raid.c	/^enum {MD_NULL=0, MD_PARALLEL, MD_MIXED, MD_SKEWED};$/;"	e	enum:__anon55	file:
MD_NEW_SIZE_BLOCKS	src/md-int.h	123;"	d
MD_NEW_SIZE_SECTORS	src/md-int.h	122;"	d
MD_NULL	src/raid.c	/^enum {MD_NULL=0, MD_PARALLEL, MD_MIXED, MD_SKEWED};$/;"	e	enum:__anon55	file:
MD_PARALLEL	src/raid.c	/^enum {MD_NULL=0, MD_PARALLEL, MD_MIXED, MD_SKEWED};$/;"	e	enum:__anon55	file:
MD_PERSONALITY_SHIFT	src/md-int.h	80;"	d
MD_READAHEAD	src/md-int.h	47;"	d
MD_RESERVED	src/md-int.h	82;"	d
MD_RESERVED_BLOCKS	src/md-int.h	120;"	d
MD_RESERVED_BYTES	src/md-int.h	118;"	d
MD_RESERVED_SECTORS	src/md-int.h	119;"	d
MD_SB_BLOCKS	src/md-int.h	127;"	d
MD_SB_BYTES	src/md-int.h	125;"	d
MD_SB_CLEAN	src/md-int.h	169;"	d
MD_SB_DESCRIPTOR_OFFSET	src/md-int.h	136;"	d
MD_SB_DESCRIPTOR_WORDS	src/md-int.h	143;"	d
MD_SB_DISKS	src/md-int.h	146;"	d
MD_SB_DISKS_OFFSET	src/md-int.h	135;"	d
MD_SB_DISKS_WORDS	src/md-int.h	142;"	d
MD_SB_EQUAL_WORDS	src/md-int.h	145;"	d
MD_SB_ERRORS	src/md-int.h	170;"	d
MD_SB_GENERIC_CONSTANT_WORDS	src/md-int.h	138;"	d
MD_SB_GENERIC_OFFSET	src/md-int.h	133;"	d
MD_SB_GENERIC_STATE_WORDS	src/md-int.h	139;"	d
MD_SB_GENERIC_WORDS	src/md-int.h	140;"	d
MD_SB_MAGIC	src/md-int.h	164;"	d
MD_SB_PERSONALITY_OFFSET	src/md-int.h	134;"	d
MD_SB_PERSONALITY_WORDS	src/md-int.h	141;"	d
MD_SB_RESERVED_WORDS	src/md-int.h	144;"	d
MD_SB_SECTORS	src/md-int.h	128;"	d
MD_SB_WORDS	src/md-int.h	126;"	d
MD_SKEWED	src/raid.c	/^enum {MD_NULL=0, MD_PARALLEL, MD_MIXED, MD_SKEWED};$/;"	e	enum:__anon55	file:
MEMORY_CHECK	src/second.S	/^#define MEMORY_CHECK$/;"	d
MEM_OKAY	src/bsect.c	120;"	d	file:
MENUTABLE	src/common.h	/^;*\/} MENUTABLE;		\/* MENU and BITMAP parameters at KEYTABLE+256$/;"	t	typeref:struct:__anon15
MFILE	diagnose/Makefile	/^MFILE=\/tmp\/liloboot$/;"	m
MIN	src/edit.c	774;"	d	file:
MINOR	src/geometry.h	58;"	d
MINOR	src/geometry.h	66;"	d
MINOR	src/geometry.h	75;"	d
MINORBITS	src/geometry.h	71;"	d
MINORMASK	src/geometry.h	72;"	d
MINROW	src/crt.S	/^MINROW	=	4$/;"	d
MINROW	src/third.s	/^MINROW = 4$/;"	d
MKDEV	src/geometry.h	59;"	d
MKDEV	src/geometry.h	67;"	d
MKDEV	src/geometry.h	76;"	d
MODEL	diagnose/Makefile	/^MODEL=s$/;"	m
MODEL	dos/Makefile	/^MODEL=d$/;"	m
MSDOS_TOO	diagnose/bios.c	10;"	d	file:
Map	src/bitmap.s	/^Map = max_secondary + 512$/;"	d
Map	src/second.S	/^Map		=	max_secondary + SECTOR_SIZE$/;"	d
Map	src/second.s	/^Map = max_secondary + 512$/;"	d
Map	src/third.s	/^Map = max_secondary + 512$/;"	d
Map2	src/bitmap.s	/^Map2 = Dflcmd$/;"	d
Map2	src/second.S	/^Map2		=	Dflcmd$/;"	d
Map2	src/second.s	/^Map2 = Dflcmd$/;"	d
Map2	src/third.s	/^Map2 = Dflcmd$/;"	d
MemoryModel	src/vesainfo.h	/^         char  MemoryModel;$/;"	m	struct:__anon1::__anon3
ModeAttributes	src/vesainfo.h	/^         short ModeAttributes;$/;"	m	struct:__anon1::__anon3
More than two disks	doc/user.tex	/^changed to \\verb"boot = \/dev\/hda" in this example.$/;"	b
NAREA	diagnose/test4.c	573;"	d	file:
NASM	src/Makefile	/^NASM=nasm$/;"	m
NBUF	src/temp.c	89;"	d	file:
NDEVICE	src/device.c	396;"	d	file:
NE	src/graph.S	/^NE	= 192	; 0xC0$/;"	d
NE	src/third.s	/^NE = 192 ; 0xC0$/;"	d
NEE	src/graph.S	/^NEE	= 212$/;"	d
NEE	src/third.s	/^NEE = 212$/;"	d
NEEWW	src/graph.S	/^NEEWW	= 207$/;"	d
NEEWW	src/third.s	/^NEEWW = 207$/;"	d
NEW	src/graph.S	/^NEW	= 193$/;"	d
NEW	src/third.s	/^NEW = 193$/;"	d
NEW13B	src/chain.S	/^NEW13B	=   drvmap-new13$/;"	d
NEW13B	src/chain.s	/^NEW13B = drvmap-new13$/;"	d
NEW2_HDR_VERSION	src/lilo.h	352;"	d
NEW3_HDR_VERSION	src/lilo.h	353;"	d
NEW_HDR_SIG	src/lilo.h	350;"	d
NEW_HDR_VERSION	src/lilo.h	351;"	d
NEW_PARSE	src/cfg.c	27;"	d	file:
NEW_VERSION	src/bitmap.s	/^NEW_VERSION = 0x202 ! 0x0202 for new cmdline protocol$/;"	d
NEW_VERSION	src/chain.s	/^NEW_VERSION = 0x202 ! 0x0202 for new cmdline protocol$/;"	d
NEW_VERSION	src/disk.s	/^NEW_VERSION	= 0x202	! 0x0202 for new cmdline protocol$/;"	d
NEW_VERSION	src/first.s	/^NEW_VERSION = 0x202 ! 0x0202 for new cmdline protocol$/;"	d
NEW_VERSION	src/mbr.s	/^NEW_VERSION	= 0x202	! 0x0202 for new cmdline protocol$/;"	d
NEW_VERSION	src/mbr2.s	/^NEW_VERSION	= 0x202	! 0x0202 for new cmdline protocol$/;"	d
NEW_VERSION	src/second.s	/^NEW_VERSION = 0x202 ! 0x0202 for new cmdline protocol$/;"	d
NEW_VERSION	src/third.s	/^NEW_VERSION = 0x202 ! 0x0202 for new cmdline protocol$/;"	d
NEW_WRITE	src/read.S	/^#define NEW_WRITE 1$/;"	d
NNE	src/graph.S	/^NNE	= 211$/;"	d
NNE	src/third.s	/^NNE = 211$/;"	d
NNEE	src/graph.S	/^NNEE	= 200	; 0xC8$/;"	d
NNEE	src/third.s	/^NNEE = 200 ; 0xC8$/;"	d
NNEEWW	src/graph.S	/^NNEEWW	= 202$/;"	d
NNEEWW	src/third.s	/^NNEEWW = 202$/;"	d
NNEW	src/graph.S	/^NNEW	= 208	; 0xD0$/;"	d
NNEW	src/third.s	/^NNEW = 208 ; 0xD0$/;"	d
NNSS	src/graph.S	/^NNSS	= 186$/;"	d
NNSS	src/third.s	/^NNSS = 186$/;"	d
NNSSE	src/graph.S	/^NNSSE	= 199$/;"	d
NNSSE	src/third.s	/^NNSSE = 199$/;"	d
NNSSEE	src/graph.S	/^NNSSEE	= 204$/;"	d
NNSSEE	src/third.s	/^NNSSEE = 204$/;"	d
NNSSEEWW	src/graph.S	/^NNSSEEWW = 206$/;"	d
NNSSEEWW	src/third.s	/^NNSSEEWW = 206$/;"	d
NNSSEW	src/graph.S	/^NNSSEW	= 215$/;"	d
NNSSEW	src/third.s	/^NNSSEW = 215$/;"	d
NNSSW	src/graph.S	/^NNSSW	= 182$/;"	d
NNSSW	src/third.s	/^NNSSW = 182$/;"	d
NNSSWW	src/graph.S	/^NNSSWW	= 185$/;"	d
NNSSWW	src/third.s	/^NNSSWW = 185$/;"	d
NNW	src/graph.S	/^NNW	= 189$/;"	d
NNW	src/third.s	/^NNW = 189$/;"	d
NNWW	src/graph.S	/^NNWW	= 188$/;"	d
NNWW	src/third.s	/^NNWW = 188$/;"	d
NORM	src/edit.c	45;"	d	file:
NORMAL_VGA	src/lilo.h	56;"	d
NPALETTE	src/edit.c	41;"	d	file:
NS	src/graph.S	/^NS	= 179	; 0xB3$/;"	d
NS	src/third.s	/^NS = 179 ; 0xB3$/;"	d
NSE	src/graph.S	/^NSE	= 195$/;"	d
NSE	src/third.s	/^NSE = 195$/;"	d
NSEE	src/graph.S	/^NSEE	= 198$/;"	d
NSEE	src/third.s	/^NSEE = 198$/;"	d
NSEEWW	src/graph.S	/^NSEEWW	= 216$/;"	d
NSEEWW	src/third.s	/^NSEEWW = 216$/;"	d
NSEW	src/graph.S	/^NSEW	= 197$/;"	d
NSEW	src/third.s	/^NSEW = 197$/;"	d
NSW	src/graph.S	/^NSW	= 180$/;"	d
NSW	src/third.s	/^NSW = 180$/;"	d
NSWW	src/graph.S	/^NSWW	= 181$/;"	d
NSWW	src/third.s	/^NSWW = 181$/;"	d
NTCAUTION	src/device.c	/^enum {INVALID=1, DUPLICATE=2, REGENERATE=3, NTCAUTION=4};$/;"	e	enum:__anon28	file:
NUMLTH	diagnose/cprintf.c	137;"	d	file:
NW	src/graph.S	/^NW	= 217$/;"	d
NW	src/third.s	/^NW = 217$/;"	d
NWW	src/graph.S	/^NWW	= 190$/;"	d
NWW	src/third.s	/^NWW = 190$/;"	d
NumberOfBanks	src/vesainfo.h	/^ unsigned char NumberOfBanks;$/;"	m	struct:__anon1::__anon3
NumberOfPlanes	src/vesainfo.h	/^         char  NumberOfPlanes;$/;"	m	struct:__anon1::__anon3
OBJS	src/Makefile	/^OBJS=lilo.o raid.o map.o geometry.o boot.o device.o common.o bsect.o cfg.o \\$/;"	m
OEMstring	src/vesainfo.h	/^         char  *OEMstring;		\/* far pointer *\/$/;"	m	struct:__anon1::__anon2
OPTION	diagnose/sector.S	/^#define OPTION 1	\/* enables fast directory search exit *\/$/;"	d
OTHER	src/lilo.c	480;"	d	file:
OTHER	src/lilo.c	504;"	d	file:
O_BYPASS	src/common.h	36;"	d
O_NOACCESS	src/common.h	29;"	d
O_NOACCESS	src/common.h	32;"	d
One disk  Linux on a logical partition	doc/user.tex	/^the boot sector is on the root partition.$/;"	b
One disk  Linux on a primary partition	doc/user.tex	/^description of problems with large disks.$/;"	b
Options corresponding to configuration variables	doc/user.tex	/^\\end{description}$/;"	b
Other options	doc/user.tex	/^source tree.$/;"	b
PAGE0	src/menu.S	/^#define PAGE0$/;"	d
PAGE_SIZE	src/common.h	25;"	d
PARMLINE	src/second.S	/^#define PARMLINE Parmline$/;"	d
PART	src/boot.c	309;"	d	file:
PARTITIONS	src/lilo.h	87;"	d
PARTITIONS	src/lilo.h	89;"	d
PARTITION_ENTRIES	src/lilo.h	187;"	d
PARTITION_ENTRY	src/lilo.h	186;"	d
PARTITION_H	src/partition.h	15;"	d
PARTS_SCR	src/bitmap.s	/^PARTS_SCR = 0x0800 ! ditto, for non-boot partitions$/;"	d
PARTS_SCR	src/chain.s	/^PARTS_SCR = 0x0800 ! ditto, for non-boot partitions$/;"	d
PARTS_SCR	src/disk.s	/^PARTS_SCR = 0x0800			! ditto, for non-boot partitions$/;"	d
PARTS_SCR	src/first.s	/^PARTS_SCR = 0x0800 ! ditto, for non-boot partitions$/;"	d
PARTS_SCR	src/mbr.s	/^PARTS_SCR = 0x0800			! ditto, for non-boot partitions$/;"	d
PARTS_SCR	src/mbr2.s	/^PARTS_SCR = 0x0800			! ditto, for non-boot partitions$/;"	d
PARTS_SCR	src/second.s	/^PARTS_SCR = 0x0800 ! ditto, for non-boot partitions$/;"	d
PARTS_SCR	src/third.s	/^PARTS_SCR = 0x0800 ! ditto, for non-boot partitions$/;"	d
PART_ACTIVE	src/partition.c	580;"	d	file:
PART_ACT_ENT_OFF	src/lilo.h	190;"	d
PART_BEGIN	src/partition.c	577;"	d	file:
PART_DOS12	src/lilo.h	230;"	d
PART_DOS16_BIG	src/lilo.h	232;"	d
PART_DOS16_SMALL	src/lilo.h	231;"	d
PART_DOS_EXTD	src/lilo.h	224;"	d
PART_FAT16_LBA	src/lilo.h	237;"	d
PART_FAT32	src/lilo.h	235;"	d
PART_FAT32_LBA	src/lilo.h	236;"	d
PART_HDOS12	src/lilo.h	241;"	d
PART_HDOS16_BIG	src/lilo.h	243;"	d
PART_HDOS16_SMALL	src/lilo.h	242;"	d
PART_HPFS	src/lilo.h	233;"	d
PART_INACTIVE	src/partition.c	581;"	d	file:
PART_INVALID	src/lilo.h	238;"	d
PART_LINUX_EXTD	src/lilo.h	226;"	d
PART_LINUX_LVM	src/lilo.h	227;"	d
PART_LINUX_MINIX	src/lilo.h	221;"	d
PART_LINUX_NATIVE	src/lilo.h	223;"	d
PART_LINUX_SWAP	src/lilo.h	222;"	d
PART_MAX	src/lilo.h	195;"	d
PART_MAX_MAX	src/lilo.h	196;"	d
PART_NTFS	src/lilo.h	234;"	d
PART_NUM	src/partition.c	578;"	d	file:
PART_OS2_BOOTMGR	src/lilo.h	228;"	d
PART_SIZE	src/partition.c	579;"	d	file:
PART_TABLE_OFFSET	src/lilo.h	189;"	d
PART_TABLE_SIZE	src/lilo.h	188;"	d
PART_TYPE_ENT_OFF	src/lilo.h	191;"	d
PART_WIN_EXTD_LBA	src/lilo.h	225;"	d
PASSWORD	src/bsect.c	/^    } PASSWORD;$/;"	t	typeref:struct:Pass	file:
PASS_PARAMS	src/mbr.S	/^#define PASS_PARAMS 1		\/* 1==pass lilo parameters *\/$/;"	d
PDFLATEX	doc/Makefile	/^PDFLATEX=pdflatex$/;"	m
PIXADDRESS	src/second.S	/^#define PIXADDRESS$/;"	d
POSTINST	hooks/Makefile	/^POSTINST = kernel\/postinst.d$/;"	m
POSTRM	hooks/Makefile	/^POSTRM   = kernel\/postrm.d$/;"	m
POSTUP	hooks/Makefile	/^POSTUP   = initramfs\/post-update.d$/;"	m
PRIME	src/lilo.h	205;"	d
PRINT_RAID_DEBUG	src/md-int.h	58;"	d
PROBESEG	src/lilo.h	368;"	d
PROBE_SIGNATURE	src/lilo.h	367;"	d
PROBE_VERSION	src/bdata.h	14;"	d
PROTECT_ARRAY	src/md-int.h	68;"	d
PRTMAP_SIZE	src/lilo.h	358;"	d
PTW_DOS	src/partition.h	/^enum {PTW_OKAY=0, PTW_DOS=1, PTW_OS2=2, PTW_SWAP, PTW_XFS,$/;"	e	enum:__anon4
PTW_NTFS	src/partition.h	/^		PTW_mask=7, PTW_NTFS=8};$/;"	e	enum:__anon4
PTW_OKAY	src/partition.h	/^enum {PTW_OKAY=0, PTW_DOS=1, PTW_OS2=2, PTW_SWAP, PTW_XFS,$/;"	e	enum:__anon4
PTW_OS2	src/partition.h	/^enum {PTW_OKAY=0, PTW_DOS=1, PTW_OS2=2, PTW_SWAP, PTW_XFS,$/;"	e	enum:__anon4
PTW_SWAP	src/partition.h	/^enum {PTW_OKAY=0, PTW_DOS=1, PTW_OS2=2, PTW_SWAP, PTW_XFS,$/;"	e	enum:__anon4
PTW_XFS	src/partition.h	/^enum {PTW_OKAY=0, PTW_DOS=1, PTW_OS2=2, PTW_SWAP, PTW_XFS,$/;"	e	enum:__anon4
PTW_mask	src/partition.h	/^		PTW_mask=7, PTW_NTFS=8};$/;"	e	enum:__anon4
PWTYPE	src/bsect.c	334;"	d	file:
PW_FILE_SUFFIX	src/lilo.h	162;"	d
PW_FILE_SUFFIX	src/lilo.h	166;"	d
P_MASK	src/lilo.h	193;"	d
Parameter line interface	doc/tech.tex	/^\\end{description}$/;"	s
ParmBSS	src/bitmap.s	/^ParmBSS = Descr + 512*MAX_DESCR_SECS_asm$/;"	d
ParmBSS	src/second.S	/^ParmBSS		=	Descr + SECTOR_SIZE*MAX_DESCR_SECS_asm$/;"	d
ParmBSS	src/second.S	/^ParmBSS		=	Keytable + SECTOR_SIZE$/;"	d
ParmBSS	src/second.s	/^ParmBSS = Descr + 512*MAX_DESCR_SECS_asm$/;"	d
ParmBSS	src/third.s	/^ParmBSS = Descr + 512*MAX_DESCR_SECS_asm$/;"	d
Parmline	src/bitmap.s	/^Parmline = BSSstart + 512$/;"	d
Parmline	src/second.S	/^Parmline	=	BSSstart + SECTOR_SIZE$/;"	d
Parmline	src/second.S	/^Parmline	=	ParmBSS$/;"	d
Parmline	src/second.s	/^Parmline = BSSstart + 512$/;"	d
Parmline	src/third.s	/^Parmline = BSSstart + 512$/;"	d
Partition activation	doc/user.tex	/^different.$/;"	b
Partition table manipulation	doc/user.tex	/^\\end{verbatim}$/;"	u
Partition type change rules	doc/user.tex	/^\\end{verbatim}$/;"	b
Pass	src/bsect.c	/^typedef struct Pass {$/;"	s	file:
Print version number	doc/user.tex	/^\\end{description}$/;"	b
Probes	src/probe.c	/^struct Probes {$/;"	s	file:
Quick installation	doc/user.tex	/^compatibility notes.$/;"	b
RAID0	src/md-int.h	85;"	d
RAID1	src/md-int.h	86;"	d
RAID5	src/md-int.h	87;"	d
RAID5_ALGORITHM_LEFT_ASYMMETRIC	src/md-int.h	287;"	d
RAID5_ALGORITHM_LEFT_SYMMETRIC	src/md-int.h	289;"	d
RAID5_ALGORITHM_RIGHT_ASYMMETRIC	src/md-int.h	288;"	d
RAID5_ALGORITHM_RIGHT_SYMMETRIC	src/md-int.h	290;"	d
RAID_EXTRA_BOOT	src/cfg.h	25;"	d
RAID_REL_FLAG	src/lilo.h	269;"	d
RAID_VERSION	src/md-int.h	55;"	d
RAMDISK	src/bootsect.S	/^#define RAMDISK 0$/;"	d
RANDOM	src/device.c	560;"	d	file:
RANDOM	src/device.c	579;"	d	file:
RD	diagnose/test5.c	/^enum {RD=0, WR=1};$/;"	e	enum:__anon56	file:
REGENERATE	src/device.c	/^enum {INVALID=1, DUPLICATE=2, REGENERATE=3, NTCAUTION=4};$/;"	e	enum:__anon28	file:
REGISTER_MD_DEV	src/md-int.h	50;"	d
REG_DUMP	src/second.S	/^#define REG_DUMP 1$/;"	d
REISER4_IOC_UNPACK	src/geometry.c	67;"	d	file:
REISER4_SUPER_MAGIC	src/geometry.c	63;"	d	file:
REISERFS_IOC_UNPACK	src/geometry.c	59;"	d	file:
REISERFS_SUPER_MAGIC	src/geometry.c	49;"	d	file:
RELOCATABLE	src/first.S	/^#define RELOCATABLE -1$/;"	d
RESTART_ARRAY_RW	src/md-int.h	76;"	d
RETAIN	src/second.S	/^#define RETAIN$/;"	d
REVERSE_DL	src/chain.S	/^#define REVERSE_DL 1$/;"	d
RGB	src/bitmap.h	/^} RGB;$/;"	t	typeref:struct:Rgb
RGB2	src/bitmap.h	/^} RGB2;$/;"	t	typeref:struct:Rgb2
RLATEX	doc/Makefile	/^RLATEX=.\/rlatex$/;"	m
ROOT_DEV	src/bootsect.S	/^ROOT_DEV = 0$/;"	d
ROOT_DEV	src/bootsect.s	/^ROOT_DEV = 0$/;"	d
ROT	src/shs2.c	49;"	d	file:
RUN_ARRAY	src/md-int.h	72;"	d
ReadSector	diagnose/sector.S	/^ReadSector:$/;"	l
Rgb	src/bitmap.h	/^typedef struct Rgb {$/;"	s
Rgb2	src/bitmap.h	/^typedef struct Rgb2 {$/;"	s
S2	src/lilo.h	74;"	d
S21	diagnose/sector.S	/^S21:    pop     si$/;"	l
SA	src/lilo.h	75;"	d
SAVE_SP	diagnose/bios.c	11;"	d	file:
SCHEME	src/bitmap.h	/^   } SCHEME;$/;"	t	typeref:struct:Scheme
SE	src/graph.S	/^SE	= 218	; 0xDA$/;"	d
SE	src/third.s	/^SE = 218 ; 0xDA$/;"	d
SEARCH	src/mbr.S	/^#define SEARCH 1		\/* turn on search for device code *\/$/;"	d
SECOND_STAGE_LOADER	src/second.S	/^#define SECOND_STAGE_LOADER$/;"	d
SECTOR_ADDR	src/common.h	/^;*\/} SECTOR_ADDR; \/*$/;"	t	typeref:struct:__anon8
SECTOR_ADDR6	src/common.h	/^} SECTOR_ADDR6;$/;"	t	typeref:struct:__anon22
SECTOR_SIZE	diagnose/test4.c	39;"	d	file:
SECTOR_SIZE	diagnose/test5.c	38;"	d	file:
SECTOR_SIZE	src/lilo.h	181;"	d
SECTOR_SIZE_asm	src/bitmap.s	/^SECTOR_SIZE_asm = 512 ! **$/;"	d
SECTOR_SIZE_asm	src/chain.s	/^SECTOR_SIZE_asm = 512 ! **$/;"	d
SECTOR_SIZE_asm	src/disk.s	/^SECTOR_SIZE_asm = 512		! **$/;"	d
SECTOR_SIZE_asm	src/first.s	/^SECTOR_SIZE_asm = 512 ! **$/;"	d
SECTOR_SIZE_asm	src/mbr.s	/^SECTOR_SIZE_asm = 512		! **$/;"	d
SECTOR_SIZE_asm	src/mbr2.s	/^SECTOR_SIZE_asm = 512		! **$/;"	d
SECTOR_SIZE_asm	src/second.s	/^SECTOR_SIZE_asm = 512 ! **$/;"	d
SECTOR_SIZE_asm	src/third.s	/^SECTOR_SIZE_asm = 512 ! **$/;"	d
SEE	src/graph.S	/^SEE	= 213$/;"	d
SEE	src/third.s	/^SEE = 213$/;"	d
SEEK_CUR	src/map.h	20;"	d
SEEK_END	src/map.h	23;"	d
SEEK_SET	src/map.h	17;"	d
SEEWW	src/graph.S	/^SEEWW	= 209$/;"	d
SEEWW	src/third.s	/^SEEWW = 209$/;"	d
SEG_FS	src/second.S	/^#define SEG_FS seg fs$/;"	d
SEG_FS	src/second.S	/^#define SEG_FS$/;"	d
SEQ	diagnose/test4.c	29;"	d	file:
SER_DFL_PRM	src/lilo.h	342;"	d
SETUPSECS	src/bootsect.S	/^SETUPSECS = SIZEBYTES\/512		! size of disk.b in sectors$/;"	d
SETUPSECS	src/bootsect.s	/^SETUPSECS = SIZEBYTES\/512		! size of disk.b in sectors$/;"	d
SETUPSECS	src/lilo.h	257;"	d
SETUPSEG	src/bitmap.s	/^SETUPSEG = 0x9020 ! setup starts here$/;"	d
SETUPSEG	src/bootsect.S	/^SETUPSEG  = INITSEG+0x20		! setup starts here$/;"	d
SETUPSEG	src/bootsect.s	/^SETUPSEG  = INITSEG+0x20		! setup starts here$/;"	d
SETUPSEG	src/chain.s	/^SETUPSEG = 0x9020 ! setup starts here$/;"	d
SETUPSEG	src/disk.S	/^SETUPSEG = 0x9020	; DEF_SETUPSEG$/;"	d
SETUPSEG	src/disk.s	/^SETUPSEG  = 0x9020		! setup starts here$/;"	d
SETUPSEG	src/disk.s	/^SETUPSEG = 0x9020	; DEF_SETUPSEG$/;"	d
SETUPSEG	src/first.s	/^SETUPSEG = 0x9020 ! setup starts here$/;"	d
SETUPSEG	src/mbr.s	/^SETUPSEG  = 0x9020		! setup starts here$/;"	d
SETUPSEG	src/mbr2.s	/^SETUPSEG  = 0x9020		! setup starts here$/;"	d
SETUPSEG	src/pseudo.S	/^SETUPSEG = 0x9020	; DEF_SETUPSEG$/;"	d
SETUPSEG	src/second.s	/^SETUPSEG = 0x9020 ! setup starts here$/;"	d
SETUPSEG	src/third.s	/^SETUPSEG = 0x9020 ! setup starts here$/;"	d
SETUP_HDR	src/common.h	/^} SETUP_HDR;$/;"	t	typeref:struct:__anon23
SETUP_STACKSIZE	src/bitmap.s	/^SETUP_STACKSIZE = 2048 ! stacksize for kernel setup.S$/;"	d
SETUP_STACKSIZE	src/chain.s	/^SETUP_STACKSIZE = 2048 ! stacksize for kernel setup.S$/;"	d
SETUP_STACKSIZE	src/disk.s	/^SETUP_STACKSIZE = 2048		! stacksize for kernel setup.S$/;"	d
SETUP_STACKSIZE	src/first.s	/^SETUP_STACKSIZE = 2048 ! stacksize for kernel setup.S$/;"	d
SETUP_STACKSIZE	src/mbr.s	/^SETUP_STACKSIZE = 2048		! stacksize for kernel setup.S$/;"	d
SETUP_STACKSIZE	src/mbr2.s	/^SETUP_STACKSIZE = 2048		! stacksize for kernel setup.S$/;"	d
SETUP_STACKSIZE	src/second.s	/^SETUP_STACKSIZE = 2048 ! stacksize for kernel setup.S$/;"	d
SETUP_STACKSIZE	src/third.s	/^SETUP_STACKSIZE = 2048 ! stacksize for kernel setup.S$/;"	d
SETUP_STACK_DYN	src/lilo.h	413;"	d
SET_ARRAY_INFO	src/md-int.h	64;"	d
SET_DISK_INFO	src/md-int.h	65;"	d
SEW	src/graph.S	/^SEW	= 194$/;"	d
SEW	src/third.s	/^SEW = 194$/;"	d
SHELL	doc/Makefile	/^SHELL=\/bin\/sh$/;"	m
SHELL	src/Makefile	/^SHELL=\/bin\/sh$/;"	m
SHS_BLOCKSIZE	src/shs2.h	20;"	d
SHS_DEBUG	src/shs2.c	22;"	d	file:
SHS_DIGESTSIZE	src/shs2.h	21;"	d
SHS_EXPAND	src/shs2.c	23;"	d	file:
SHS_INFO	src/shs2.h	/^   } SHS_INFO;$/;"	t	typeref:struct:__anon7
SHS_PASSWORDS	src/lilo.h	159;"	d
SHS_PASSWORDS	src/lilo.h	160;"	d
SIG_VBE2	src/vesainfo.h	69;"	d
SIG_VESA	src/vesainfo.h	70;"	d
SIZEBYTES	src/bootsect.S	/^SIZEBYTES = SIZEDISKB+511		! round disk.b size for division$/;"	d
SIZEBYTES	src/bootsect.s	/^SIZEBYTES = 4016+511		! round disk.b size for division$/;"	d
SIZEKRNLP	src/bootsect.S	/^SIZEKRNLP	= SIZEKRNL+15$/;"	d
SLA_SIZE_DYN	src/lilo.h	414;"	d
SMALL_PRIME	src/lilo.h	206;"	d
SORT	src/device.c	866;"	d	file:
SORT	src/device.c	872;"	d	file:
SPACER	diagnose/test4.c	28;"	d	file:
SPACER	diagnose/test5.c	29;"	d	file:
SPECIAL_BOOTSECT	src/lilo.h	263;"	d
SPECIAL_SECTORS	src/lilo.h	261;"	d
SSDIFF	src/bitmap.s	/^SSDIFF = 0$/;"	d
SSDIFF	src/chain.s	/^SSDIFF = 0$/;"	d
SSDIFF	src/disk.s	/^SSDIFF	= 0$/;"	d
SSDIFF	src/first.s	/^SSDIFF = 0$/;"	d
SSDIFF	src/mbr.s	/^SSDIFF	= 0$/;"	d
SSDIFF	src/mbr2.s	/^SSDIFF	= 0$/;"	d
SSDIFF	src/second.s	/^SSDIFF = 0$/;"	d
SSDIFF	src/third.s	/^SSDIFF = 0$/;"	d
SSE	src/graph.S	/^SSE	= 214$/;"	d
SSE	src/third.s	/^SSE = 214$/;"	d
SSEE	src/graph.S	/^SSEE	= 201$/;"	d
SSEE	src/third.s	/^SSEE = 201$/;"	d
SSEEWW	src/graph.S	/^SSEEWW	= 203$/;"	d
SSEEWW	src/third.s	/^SSEEWW = 203$/;"	d
SSEW	src/graph.S	/^SSEW	= 210$/;"	d
SSEW	src/third.s	/^SSEW = 210$/;"	d
SSW	src/graph.S	/^SSW	= 183$/;"	d
SSW	src/third.s	/^SSW = 183$/;"	d
SSWW	src/graph.S	/^SSWW	= 187$/;"	d
SSWW	src/third.s	/^SSWW = 187$/;"	d
STACK	src/bitmap.s	/^STACK = 2048 ! amount of stack space to reserve$/;"	d
STACK	src/chain.s	/^STACK = 2048 ! amount of stack space to reserve$/;"	d
STACK	src/disk.s	/^STACK	  = 2048		! amount of stack space to reserve$/;"	d
STACK	src/first.s	/^STACK = 2048 ! amount of stack space to reserve$/;"	d
STACK	src/mbr.s	/^STACK	  = 2048		! amount of stack space to reserve$/;"	d
STACK	src/mbr2.s	/^STACK	  = 2048		! amount of stack space to reserve$/;"	d
STACK	src/second.s	/^STACK = 2048 ! amount of stack space to reserve$/;"	d
STACK	src/third.s	/^STACK = 2048 ! amount of stack space to reserve$/;"	d
STACKSEG	src/bitmap.s	/^STACKSEG = 0x9000 ! MUST == INITSEG for kernel 2.0.36 (and others?)$/;"	d
STACKSEG	src/chain.s	/^STACKSEG = 0x9000 ! MUST == INITSEG for kernel 2.0.36 (and others?)$/;"	d
STACKSEG	src/disk.s	/^STACKSEG  = 0x9000	     ! MUST == INITSEG for kernel 2.0.36 (and others?)$/;"	d
STACKSEG	src/first.s	/^STACKSEG = 0x9000 ! MUST == INITSEG for kernel 2.0.36 (and others?)$/;"	d
STACKSEG	src/mbr.s	/^STACKSEG  = 0x9000	     ! MUST == INITSEG for kernel 2.0.36 (and others?)$/;"	d
STACKSEG	src/mbr2.s	/^STACKSEG  = 0x9000	     ! MUST == INITSEG for kernel 2.0.36 (and others?)$/;"	d
STACKSEG	src/second.s	/^STACKSEG = 0x9000 ! MUST == INITSEG for kernel 2.0.36 (and others?)$/;"	d
STACKSEG	src/third.s	/^STACKSEG = 0x9000 ! MUST == INITSEG for kernel 2.0.36 (and others?)$/;"	d
STAGE_BITMAP	src/bitmap.s	/^STAGE_BITMAP = 0x0400$/;"	d
STAGE_BITMAP	src/second.S	/^STAGE_BITMAP	=	0$/;"	d
STAGE_BITMAP	src/second.S	/^STAGE_BITMAP	=	STAGE_FLAG_BMP4$/;"	d
STAGE_BITMAP	src/second.s	/^STAGE_BITMAP = 0$/;"	d
STAGE_BITMAP	src/third.s	/^STAGE_BITMAP = 0$/;"	d
STAGE_CHAIN	src/lilo.h	247;"	d
STAGE_DRIVE_MAP	src/lilo.h	248;"	d
STAGE_FIRST	src/lilo.h	245;"	d
STAGE_FLAG_BMP4	src/lilo.h	253;"	d
STAGE_FLAG_MENU	src/lilo.h	252;"	d
STAGE_FLAG_SERIAL	src/lilo.h	251;"	d
STAGE_MBR	src/lilo.h	249;"	d
STAGE_MBR2	src/lilo.h	250;"	d
STAGE_MENU	src/bitmap.s	/^STAGE_MENU = 0$/;"	d
STAGE_MENU	src/second.S	/^STAGE_MENU	=	0$/;"	d
STAGE_MENU	src/second.S	/^STAGE_MENU	=	STAGE_FLAG_MENU$/;"	d
STAGE_MENU	src/second.s	/^STAGE_MENU = 0$/;"	d
STAGE_MENU	src/third.s	/^STAGE_MENU = 0x0200$/;"	d
STAGE_SECOND	src/lilo.h	246;"	d
STAGE_SERIAL	src/bitmap.s	/^STAGE_SERIAL = 0x0100$/;"	d
STAGE_SERIAL	src/second.S	/^STAGE_SERIAL	=	0$/;"	d
STAGE_SERIAL	src/second.S	/^STAGE_SERIAL	=	STAGE_FLAG_SERIAL$/;"	d
STAGE_SERIAL	src/second.s	/^STAGE_SERIAL = 0x0100$/;"	d
STAGE_SERIAL	src/third.s	/^STAGE_SERIAL = 0x0100$/;"	d
START_ARRAY	src/md-int.h	73;"	d
START_MD	src/md-int.h	51;"	d
STEP	src/mbr.S	/^STEP	= 1			\/* delay is in seconds if DEBUG *\/$/;"	d
STEP	src/mbr.S	/^STEP	= 10			\/* delay is in deciseconds if not DEBUG *\/$/;"	d
STEP	src/mbr.s	/^STEP	= 10			$/;"	d
STEP	src/mbr2.s	/^STEP	= 10			$/;"	d
STK_SIZE	src/bootsect.S	/^STK_SIZE  = MAX_SETUPSECS*512+512	! 0x4000$/;"	d
STK_SIZE	src/bootsect.s	/^STK_SIZE  = MAX_SETUPSECS*512+512	! 0x4000$/;"	d
STOP_ARRAY	src/md-int.h	74;"	d
STOP_ARRAY_RO	src/md-int.h	75;"	d
STOP_MD	src/md-int.h	52;"	d
STRIPED	src/md-int.h	84;"	d
ST_BUF	src/device.c	/^} ST_BUF;$/;"	t	typeref:struct:_st_buf	file:
ST_BUF	src/geometry.c	/^} ST_BUF;$/;"	t	typeref:struct:_st_buf	file:
SVGA_MODE	src/bootsect.S	/^#define SVGA_MODE ASK_VGA$/;"	d
SW	src/graph.S	/^SW	= 191$/;"	d
SW	src/third.s	/^SW = 191$/;"	d
SWAP_DEV	src/bootsect.S	/^SWAP_DEV = 0$/;"	d
SWAP_DEV	src/bootsect.s	/^SWAP_DEV = 0$/;"	d
SWW	src/graph.S	/^SWW	= 184	; 0xB8$/;"	d
SWW	src/third.s	/^SWW = 184 ; 0xB8$/;"	d
SYSSEG	diagnose/sector.S	/^#define SYSSEG 0x1000  	\/* load at a fixed address SYSSEG:0000 *\/$/;"	d
SYSSEG	src/bitmap.s	/^SYSSEG = 0x1000 ! system loaded at 0x10000 (65536).$/;"	d
SYSSEG	src/bootsect.S	/^SYSSEG    = 0x1000			! system loaded at 0x10000 (65536).$/;"	d
SYSSEG	src/bootsect.s	/^SYSSEG    = 0x1000			! system loaded at 0x10000 (65536).$/;"	d
SYSSEG	src/chain.s	/^SYSSEG = 0x1000 ! system loaded at 0x10000 (65536).$/;"	d
SYSSEG	src/disk.S	/^SYSSEG	=  0x1000	; DEF_SYSSEG$/;"	d
SYSSEG	src/disk.s	/^SYSSEG	=  0x1000	; DEF_SYSSEG$/;"	d
SYSSEG	src/disk.s	/^SYSSEG    = 0x1000			! system loaded at 0x10000 (65536).$/;"	d
SYSSEG	src/first.s	/^SYSSEG = 0x1000 ! system loaded at 0x10000 (65536).$/;"	d
SYSSEG	src/mbr.s	/^SYSSEG    = 0x1000			! system loaded at 0x10000 (65536).$/;"	d
SYSSEG	src/mbr2.s	/^SYSSEG    = 0x1000			! system loaded at 0x10000 (65536).$/;"	d
SYSSEG	src/pseudo.S	/^SYSSEG	=  0x1000	; DEF_SYSSEG$/;"	d
SYSSEG	src/second.s	/^SYSSEG = 0x1000 ! system loaded at 0x10000 (65536).$/;"	d
SYSSEG	src/third.s	/^SYSSEG = 0x1000 ! system loaded at 0x10000 (65536).$/;"	d
SYSSIZE	src/bootsect.S	/^SYSSIZE		= SIZEKRNLP\/16$/;"	d
SYSSIZE	src/bootsect.S	/^SYSSIZE	  = 0x8000			! system size: number of 16-byte clicks$/;"	d
SYSSIZE	src/bootsect.s	/^SYSSIZE	  = 0x8000			! system size: number of 16-byte clicks$/;"	d
Scheme	src/bitmap.h	/^typedef struct Scheme {$/;"	s
Signature	src/vesainfo.h	/^         char  Signature[4];$/;"	m	struct:__anon1::__anon2
Standard options	doc/user.tex	/^or from one of the many mirror sites.$/;"	b
Syntax	doc/user.tex	/^and consists of variable assignments.$/;"	b
TEMP	src/temp.c	/^} TEMP;$/;"	t	typeref:struct:_temp	file:
TEMP_H	src/temp.h	14;"	d
TESTFAT	diagnose/sector.S	/^#define TESTFAT 0	\/* enables testing for FAT12\/FAT16 *\/$/;"	d
TMP_DEV	src/config.h	29;"	d
TO_BE_COVERED	src/raid.c	52;"	d	file:
TRANSLUCENT	src/md-int.h	88;"	d
The boot prompt	doc/user.tex	/^\\newpage$/;"	s
Two disks  Linux  at least partially  on the first disk	doc/user.tex	/^necessary in this case.$/;"	b
Two disks  Linux on second disk  first disk has an extended partition	doc/user.tex	/^provided that the constraints described in section \\ref{broken} are met.$/;"	b
UI_MAGIC	src/second.S	/^#define UI_MAGIC 0xff		\/* take input from keyboard *\/$/;"	d
UNPROTECT_ARRAY	src/md-int.h	67;"	d
USE_BSECT_PW_INPUT	src/edit.c	38;"	d	file:
Using keyboard translation tables	doc/user.tex	/^\\end{verbatim}$/;"	b
VERSION	src/lilo.h	78;"	d
VERSION_DATE	src/version.h	9;"	d
VERSION_EDIT	src/version.h	8;"	d
VERSION_H	src/version.h	4;"	d
VERSION_MAJOR	src/version.h	6;"	d
VERSION_MINOR	src/version.h	7;"	d
VESAINFO	src/vesainfo.h	/^      } VESAINFO;$/;"	t	typeref:union:__anon1
VGA_NOCOVR	src/lilo.h	340;"	d
VGA_SET	src/lilo.h	256;"	d
VIDEO_CGA	src/probe.h	/^enum {VIDEO_UNKNOWN, VIDEO_MDA, VIDEO_CGA, VIDEO_EGA, VIDEO_MCGA,$/;"	e	enum:__anon52
VIDEO_EGA	src/probe.h	/^enum {VIDEO_UNKNOWN, VIDEO_MDA, VIDEO_CGA, VIDEO_EGA, VIDEO_MCGA,$/;"	e	enum:__anon52
VIDEO_MCGA	src/probe.h	/^enum {VIDEO_UNKNOWN, VIDEO_MDA, VIDEO_CGA, VIDEO_EGA, VIDEO_MCGA,$/;"	e	enum:__anon52
VIDEO_MDA	src/probe.h	/^enum {VIDEO_UNKNOWN, VIDEO_MDA, VIDEO_CGA, VIDEO_EGA, VIDEO_MCGA,$/;"	e	enum:__anon52
VIDEO_UNKNOWN	src/probe.h	/^enum {VIDEO_UNKNOWN, VIDEO_MDA, VIDEO_CGA, VIDEO_EGA, VIDEO_MCGA,$/;"	e	enum:__anon52
VIDEO_VESA	src/probe.h	/^	VIDEO_VGA, VIDEO_VESA, VIDEO_VESA_800};$/;"	e	enum:__anon52
VIDEO_VESA_800	src/probe.h	/^	VIDEO_VGA, VIDEO_VESA, VIDEO_VESA_800};$/;"	e	enum:__anon52
VIDEO_VGA	src/probe.h	/^	VIDEO_VGA, VIDEO_VESA, VIDEO_VESA_800};$/;"	e	enum:__anon52
VOLID	src/probe.c	13;"	d	file:
VSS_NUM	src/lilo.h	255;"	d
Version	src/vesainfo.h	/^         short Version;$/;"	m	struct:__anon1::__anon2
Video	src/probe.h	/^struct Video {$/;"	s
Video1	src/probe.h	/^struct Video1 {$/;"	s
Video2	src/probe.h	/^struct Video2 {$/;"	s
Video25	src/probe.h	/^struct Video25 {$/;"	s
Video3	src/probe.h	/^struct Video3 {$/;"	s
VideoModePtr	src/vesainfo.h	/^         short *VideoModePtr;		\/* far pointer *\/$/;"	m	struct:__anon1::__anon2
VolumeMgmt	src/device.c	/^struct VolumeMgmt {$/;"	s	file:
W	src/shs2.c	/^   LONG W[16];$/;"	v
W	src/shs2.c	/^   LONG W[80];$/;"	v	file:
WORDA	diagnose/test4.c	537;"	d	file:
WORDB	diagnose/test4.c	538;"	d	file:
WR	diagnose/test5.c	/^enum {RD=0, WR=1};$/;"	e	enum:__anon56	file:
WRITE_RAID_INFO	src/md-int.h	66;"	d
Warnings	doc/user.tex	/^\\end{description}$/;"	b
WinAAttributes	src/vesainfo.h	/^         char  WinAAttributes;$/;"	m	struct:__anon1::__anon3
WinASegment	src/vesainfo.h	/^         short WinASegment;$/;"	m	struct:__anon1::__anon3
WinBAttributes	src/vesainfo.h	/^         char  WinBAttributes;$/;"	m	struct:__anon1::__anon3
WinBSegment	src/vesainfo.h	/^         short WinBSegment;$/;"	m	struct:__anon1::__anon3
WinFuncPtr	src/vesainfo.h	/^         char *WinFuncPtr;          \/* window swapping function *\/$/;"	m	struct:__anon1::__anon3
WinGranularity	src/vesainfo.h	/^         short WinGranularity;$/;"	m	struct:__anon1::__anon3
WinSize	src/vesainfo.h	/^         short WinSize;$/;"	m	struct:__anon1::__anon3
Wshs	src/bitmap.s	/^Wshs = *$/;"	d
Wshs	src/second.s	/^Wshs = *$/;"	d
Wshs	src/shs3.S	/^Wshs		=	*$/;"	d
Wshs	src/shs3.S	/^Wshs:	      .blkb	16*4$/;"	l
Wshs	src/third.s	/^Wshs = *$/;"	d
XPITCH	src/crt.S	/^XPITCH  =	MAX_IMAGE_NAME+6$/;"	d
XPITCH	src/third.s	/^XPITCH = 15 +6$/;"	d
X_AUTO	src/common.h	/^typedef enum {X_NULL=0, X_NONE, X_AUTO, X_MBR_ONLY, X_MBR, X_SPEC} LILO_EXTRA;$/;"	e	enum:__anon24
X_MBR	src/common.h	/^typedef enum {X_NULL=0, X_NONE, X_AUTO, X_MBR_ONLY, X_MBR, X_SPEC} LILO_EXTRA;$/;"	e	enum:__anon24
X_MBR_ONLY	src/common.h	/^typedef enum {X_NULL=0, X_NONE, X_AUTO, X_MBR_ONLY, X_MBR, X_SPEC} LILO_EXTRA;$/;"	e	enum:__anon24
X_NONE	src/common.h	/^typedef enum {X_NULL=0, X_NONE, X_AUTO, X_MBR_ONLY, X_MBR, X_SPEC} LILO_EXTRA;$/;"	e	enum:__anon24
X_NULL	src/common.h	/^typedef enum {X_NULL=0, X_NONE, X_AUTO, X_MBR_ONLY, X_MBR, X_SPEC} LILO_EXTRA;$/;"	e	enum:__anon24
X_SPEC	src/common.h	/^typedef enum {X_NULL=0, X_NONE, X_AUTO, X_MBR_ONLY, X_MBR, X_SPEC} LILO_EXTRA;$/;"	e	enum:__anon24
XcharSize	src/vesainfo.h	/^ unsigned char XcharSize;$/;"	m	struct:__anon1::__anon3
Xresolution	src/vesainfo.h	/^         short Xresolution;$/;"	m	struct:__anon1::__anon3
Y	src/edit.c	44;"	d	file:
YcharSize	src/vesainfo.h	/^ unsigned char YcharSize;$/;"	m	struct:__anon1::__anon3
Yresolution	src/vesainfo.h	/^         short Yresolution;$/;"	m	struct:__anon1::__anon3
_BDATA_H	src/bdata.h	12;"	d
_GNU_SOURCE	src/boot.c	14;"	d	file:
_GNU_SOURCE	src/bsect.c	12;"	d	file:
_GNU_SOURCE	src/cfg.c	12;"	d	file:
_GNU_SOURCE	src/common.c	13;"	d	file:
_GNU_SOURCE	src/device.c	12;"	d	file:
_GNU_SOURCE	src/edit.c	11;"	d	file:
_GNU_SOURCE	src/geometry.c	13;"	d	file:
_GNU_SOURCE	src/identify.c	14;"	d	file:
_GNU_SOURCE	src/lilo.c	12;"	d	file:
_GNU_SOURCE	src/map.c	13;"	d	file:
_GNU_SOURCE	src/partition.c	12;"	d	file:
_GNU_SOURCE	src/probe.c	15;"	d	file:
_GNU_SOURCE	src/raid.c	11;"	d	file:
_GNU_SOURCE	src/shs2.c	12;"	d	file:
_GNU_SOURCE	src/temp.c	12;"	d	file:
_I386_STATFS_H	src/bsect.c	23;"	d	file:
_I386_STATFS_H	src/edit.c	25;"	d	file:
_I386_STATFS_H	src/geometry.c	27;"	d	file:
_MD_H	src/md-int.h	21;"	d
_Mode	src/bitmap.s	/^_Mode: dw 0$/;"	d
_Mode	src/display4.S	/^_Mode:  dw      0$/;"	d
_SHS2_H	src/shs2.h	11;"	d
_VESAINFO_H	src/vesainfo.h	12;"	d
_VesaWindow	src/bitmap.s	/^_VesaWindow: dw -1$/;"	d
_VesaWindow	src/display4.S	/^_VesaWindow:	dw	-1$/;"	d
__PROBE_H_	src/probe.h	12;"	d
__cleanup	diagnose/bios.c	/^void (*__cleanup)() = 0;$/;"	v
__files	diagnose/bios.c	/^int (*__files)() = __nofiles;$/;"	v
__nofiles	diagnose/bios.c	/^int __nofiles(cmd, fd, buf, len)$/;"	f
__numout	diagnose/cprintf.c	/^__numout(long i, int base)$/;"	f	file:
_bmp	src/bitmap.s	/^_bmp: dd 0$/;"	d
_bmp	src/display4.S	/^_bmp:   dd      0$/;"	d
_cache_entry	src/device.c	/^typedef struct _cache_entry {$/;"	s	file:
_change_rule	src/partition.h	/^typedef struct _change_rule {$/;"	s
_display4	src/bitmap.s	/^_display4:$/;"	l
_display4	src/display4.S	/^_display4:$/;"	l
_display4_ret	src/bitmap.s	/^_display4_ret:$/;"	l
_display4_ret	src/display4.S	/^_display4_ret:$/;"	l
_dm_table	src/geometry.c	/^typedef struct _dm_table {$/;"	s	file:
_dm_target	src/geometry.c	/^typedef struct _dm_target {$/;"	s	file:
_done4	src/bitmap.s	/^_done4:$/;"	l
_done4	src/display4.S	/^_done4:$/;"	l
_dt_entry	src/geometry.h	/^typedef struct _dt_entry {$/;"	s
_himask	src/bitmap.s	/^_himask: dd 0$/;"	d
_himask	src/display4.S	/^_himask: dd	0$/;"	d
_line	src/bitmap.s	/^_line = cmdline+CL_LENGTH ; must be 640 bytes long$/;"	d
_line	src/second.S	/^_line	=	cmdline+CL_LENGTH		; must be 640 bytes long$/;"	d
_main	diagnose/sector.S	/^_main:			jmp	beginning$/;"	l
_main	src/bitmap.s	/^_main: jmp start$/;"	l
_main	src/bootsect.S	/^_main:$/;"	l
_main	src/bootsect.s	/^_main:$/;"	l
_main	src/chain.S	/^_main:	cld			! make sure !!!$/;"	l
_main	src/chain.s	/^_main: cld ! make sure !!!$/;"	l
_main	src/disk.S	/^_main:$/;"	l
_main	src/disk.s	/^_main:$/;"	l
_main	src/dparam.S	/^_main:	mov	bl,0x80			! NUL-terminate the command line$/;"	l
_main	src/dump.S	/^_main:	push	sp	! push all registers$/;"	l
_main	src/first.S	/^_main:	cli			! NT 4 blows up if this is missing$/;"	l
_main	src/first.s	/^_main: cli ! NT 4 blows up if this is missing$/;"	l
_main	src/mbr.S	/^_main:	cli			! NT 4 blows up if this is missing$/;"	l
_main	src/mbr.s	/^_main:	cli			! NT 4 blows up if this is missing$/;"	l
_main	src/mbr2.s	/^_main:	cli			! NT 4 blows up if this is missing$/;"	l
_main	src/pseudo.S	/^_main:$/;"	l
_main	src/second.S	/^_main:	jmp	start$/;"	l
_main	src/second.s	/^_main: jmp start$/;"	l
_main	src/third.s	/^_main: jmp start$/;"	l
_map_entry	src/map.c	/^typedef struct _map_entry {$/;"	s	file:
_mask	src/bitmap.s	/^_mask: dd 0$/;"	d
_mask	src/display4.S	/^_mask:	dd	0$/;"	d
_seg	src/bitmap.s	/^_seg: dw 0$/;"	d
_seg	src/display4.S	/^_seg:	dw	0$/;"	d
_setpalette	src/display4.S	/^_setpalette:$/;"	l
_shift	src/bitmap.s	/^_shift: dw 0$/;"	d
_shift	src/display4.S	/^_shift:	dw	0$/;"	d
_shsFinal	src/bitmap.s	/^_shsFinal:$/;"	l
_shsFinal	src/second.s	/^_shsFinal:$/;"	l
_shsFinal	src/shs3.S	/^_shsFinal:$/;"	l
_shsFinal	src/third.s	/^_shsFinal:$/;"	l
_shsInfo	src/bitmap.s	/^_shsInfo = *$/;"	d
_shsInfo	src/second.s	/^_shsInfo = *$/;"	d
_shsInfo	src/shs3.S	/^_shsInfo	=	*$/;"	d
_shsInfo	src/shs3.S	/^_shsInfo:$/;"	l
_shsInfo	src/third.s	/^_shsInfo = *$/;"	d
_shsInit	src/bitmap.s	/^_shsInit:$/;"	l
_shsInit	src/second.s	/^_shsInit:$/;"	l
_shsInit	src/shs3.S	/^_shsInit:$/;"	l
_shsInit	src/third.s	/^_shsInit:$/;"	l
_shsUpdate	src/bitmap.s	/^_shsUpdate:$/;"	l
_shsUpdate	src/second.s	/^_shsUpdate:$/;"	l
_shsUpdate	src/shs3.S	/^_shsUpdate:$/;"	l
_shsUpdate	src/third.s	/^_shsUpdate:$/;"	l
_st_buf	src/device.c	/^typedef struct _st_buf {$/;"	s	file:
_st_buf	src/geometry.c	/^typedef struct _st_buf {$/;"	s	file:
_state	src/bitmap.s	/^_state: dw -1$/;"	d
_state	src/display4.S	/^_state: dw    -1$/;"	d
_temp	src/temp.c	/^typedef struct _temp {$/;"	s	file:
_text	src/bitmap.s	/^_text:$/;"	l
_text	src/display4.S	/^_text:$/;"	l
_tp	src/bitmap.s	/^_tp: dd 0$/;"	d
_tp	src/display4.S	/^_tp:    dd      0$/;"	d
_ypitch	src/bitmap.s	/^_ypitch: dw 0$/;"	d
_ypitch	src/display4.S	/^_ypitch: dw     0$/;"	d
a	src/common.h	/^    unsigned short a;		\/* 18: more LOADLIN hacks *\/$/;"	m	struct:__anon23
a20	diagnose/test4.c	/^int a20(void)	\/* Return 1 if a20 is enabled, 0 if disabled *\/$/;"	f	file:
abs_cx	src/bitmap.S	/^abs_cx:	dw	0	; upper left of scrolling area$/;"	d
abs_cx	src/bitmap.s	/^abs_cx: dw 0 ; upper left of scrolling area$/;"	d
abs_cx	src/crt.S	/^abs_cx:	dw	0	; upper left of scrolling area$/;"	d
abs_cx	src/third.s	/^abs_cx: dw 0 ; upper left of scrolling area$/;"	d
ac0	src/disk.S	/^ac0:            .word      0,0,0,0$/;"	l
ac0	src/disk.s	/^ac0:            .word      0,0,0,0$/;"	l
ac1	src/disk.S	/^ac1:            .word      0,0,0,0$/;"	l
ac1	src/disk.s	/^ac1:            .word      0,0,0,0$/;"	l
acnosp	src/bitmap.s	/^acnosp: test byte ptr timeout,#1 ; timed out ?$/;"	l
acnosp	src/second.S	/^acnosp:	test	byte ptr timeout,#1 ; timed out ?$/;"	l
acnosp	src/second.s	/^acnosp: test byte ptr timeout,#1 ; timed out ?$/;"	l
acnosp	src/third.s	/^acnosp: test byte ptr timeout,#1 ; timed out ?$/;"	l
action	src/cfg.h	/^    void *action;$/;"	m	struct:__anon33
active_disks	src/md-int.h	/^	md_u32 active_disks;	\/*  2 Number of currently active disks	      *\/$/;"	m	struct:md_array_info_s
active_disks	src/md-int.h	/^	md_u32 active_disks;	\/*  2 Number of currently active disks	      *\/$/;"	m	struct:md_superblock_s
actlp	src/bitmap.s	/^actlp: mov ah,#2 ; get shift keys$/;"	l
actlp	src/second.S	/^actlp:	mov	ah,#2		; get shift keys$/;"	l
actlp	src/second.s	/^actlp: mov ah,#2 ; get shift keys$/;"	l
actlp	src/third.s	/^actlp: mov ah,#2 ; get shift keys$/;"	l
actual	src/device.c	/^    	int actual;	\/* this is what we finally decide upon *\/$/;"	m	struct:VolumeMgmt::__anon30	file:
adapter	src/bsect.c	/^static int adapter = -1;	\/* video adapter in use *\/$/;"	v	file:
add_rule	src/partition.c	/^static void add_rule(unsigned char bios,unsigned char offset,$/;"	f	file:
add_type	src/partition.c	/^static void add_type(const char *type,int normal,int hidden)$/;"	f	file:
addr	src/map.c	/^    SECTOR_ADDR addr;$/;"	m	struct:_map_entry	file:
addr	src/mbr.S	/^addr:	.word	BOOTSEG*16	! address offset to transfer to$/;"	l
addr	src/mbr.s	/^addr:	.word	BOOTSEG*16	! address offset to transfer to$/;"	l
addr	src/mbr2.s	/^addr:	.word	BOOTSEG*16	! address offset to transfer to$/;"	l
again	src/cfg.c	/^static void again(int ch)$/;"	f	file:
ah	src/probe.h	/^      unsigned char  ah;		\/* AL and AH were swapped *\/$/;"	m	struct:Floppy::__anon47
ah	src/probe.h	/^      unsigned char  ah;		\/* AL and AH were swapped *\/$/;"	m	struct:Floppy::__anon48
ah	src/probe.h	/^      unsigned char  ah;		\/* AL and AH were swapped *\/$/;"	m	struct:Hard::__anon49
ah	src/probe.h	/^      unsigned char  ah;		\/* AL and AH were swapped *\/$/;"	m	struct:Hard::__anon50
ah	src/probe.h	/^      unsigned char  ah;		\/* AL and AH were swapped *\/$/;"	m	struct:Hard::__anon51
ah	src/probe.h	/^      unsigned char  ah;$/;"	m	struct:Video1::__anon34
ah	src/probe.h	/^      unsigned char  ah;$/;"	m	struct:Video2::__anon36
ah	src/probe.h	/^      unsigned char  ah;$/;"	m	struct:Video::__anon41
ah	src/probe.h	/^      unsigned char  ah;$/;"	m	struct:Video::__anon43
ah	src/probe.h	/^   unsigned char  ah;		\/* AL and AH were swapped *\/$/;"	m	struct:Fn48
al	src/probe.h	/^      unsigned char  al;$/;"	m	struct:Video1::__anon34
al	src/probe.h	/^      unsigned char  al;$/;"	m	struct:Video2::__anon36
al	src/probe.h	/^      unsigned char  al;$/;"	m	struct:Video::__anon41
al	src/probe.h	/^      unsigned char  al;$/;"	m	struct:Video::__anon43
alldone	src/chain.S	/^alldone:$/;"	l
alldone	src/chain.s	/^alldone:$/;"	l
alloc	src/common.c	/^void *alloc(int size)$/;"	f
alloc_t	src/common.h	365;"	d
aloop	src/dparam.S	/^aloop:	mov	al,(bx)			! get the next character$/;"	l
anywhere	src/partition.c	/^int anywhere(unsigned char *buf, char *str)$/;"	f	file:
area_cx	src/crt.S	/^area_cx:  dw    0       ; area of interaction$/;"	d
area_cx	src/third.s	/^area_cx: dw 0 ; area of interaction$/;"	d
area_dx	src/crt.S	/^area_dx:  dw    0       ; area of interaction$/;"	d
area_dx	src/third.s	/^area_dx: dw 0 ; area of interaction$/;"	d
aret	src/bitmap.s	/^aret: ret ; done$/;"	l
aret	src/chain.S	/^aret:	pop	bx		! restore$/;"	l
aret	src/chain.s	/^aret: pop bx ! restore$/;"	l
aret	src/dump.S	/^aret:	ret$/;"	l
aret	src/second.S	/^aret:	ret			; done$/;"	l
aret	src/second.s	/^aret: ret ; done$/;"	l
aret	src/third.s	/^aret: ret ; done$/;"	l
arr0	src/bitmap.S	/^arr0:	xor	dx,dx		; set to zero if neg.$/;"	l
arr0	src/bitmap.s	/^arr0: xor dx,dx ; set to zero if neg.$/;"	l
arr0	src/crt.S	/^arr0:	xor	dx,dx		; set to zero if neg.$/;"	l
arr0	src/third.s	/^arr0: xor dx,dx ; set to zero if neg.$/;"	l
arr1	src/bitmap.S	/^arr1:	mov	ax,[nimage]$/;"	l
arr1	src/bitmap.s	/^arr1: mov ax,[nimage]$/;"	l
arr1	src/crt.S	/^arr1:	mov	ax,[nimage]$/;"	l
arr1	src/third.s	/^arr1: mov ax,[nimage]$/;"	l
arr2	src/bitmap.S	/^arr2:			; we know the one to hi-lite is in range$/;"	l
arr2	src/bitmap.s	/^arr2: ; we know the one to hi-lite is in range$/;"	l
arr2	src/crt.S	/^arr2:			; we know the one to hi-lite is in range$/;"	l
arr2	src/third.s	/^arr2: ; we know the one to hi-lite is in range$/;"	l
arr6	src/bitmap.S	/^arr6:$/;"	l
arr6	src/bitmap.s	/^arr6:$/;"	l
arr6	src/crt.S	/^arr6:$/;"	l
arr6	src/third.s	/^arr6:$/;"	l
arr8	src/bitmap.S	/^arr8:$/;"	l
arr8	src/bitmap.s	/^arr8:$/;"	l
arr8	src/crt.S	/^arr8:$/;"	l
arr8	src/third.s	/^arr8:$/;"	l
arr84	src/bitmap.S	/^arr84:$/;"	l
arr84	src/bitmap.s	/^arr84:$/;"	l
arr84	src/crt.S	/^arr84:$/;"	l
arr84	src/third.s	/^arr84:$/;"	l
arr88	src/bitmap.S	/^arr88:$/;"	l
arr88	src/bitmap.s	/^arr88:$/;"	l
arr88	src/crt.S	/^arr88:$/;"	l
arr88	src/third.s	/^arr88:$/;"	l
arr9	src/bitmap.S	/^arr9:$/;"	l
arr9	src/bitmap.s	/^arr9:$/;"	l
arr9	src/crt.S	/^arr9:$/;"	l
arr9	src/third.s	/^arr9:$/;"	l
arr_vector	src/bitmap.S	/^arr_vector:$/;"	l
arr_vector	src/bitmap.s	/^arr_vector:$/;"	l
arr_vector	src/crt.S	/^arr_vector:$/;"	l
arr_vector	src/third.s	/^arr_vector:$/;"	l
arrow	src/bitmap.S	/^arrow:	cbw			; signed delta vector in AL$/;"	l
arrow	src/bitmap.s	/^arrow: cbw ; signed delta vector in AL$/;"	l
arrow	src/crt.S	/^arrow:	cbw			; signed delta vector in AL$/;"	l
arrow	src/third.s	/^arrow: cbw ; signed delta vector in AL$/;"	l
arrow1	src/bitmap.S	/^arrow1:	jmp	arrow$/;"	l
arrow1	src/bitmap.s	/^arrow1: jmp arrow$/;"	l
arrow1	src/crt.S	/^arrow1:	jmp	arrow$/;"	l
arrow1	src/third.s	/^arrow1: jmp arrow$/;"	l
at_border	src/common.h	/^;*\/	unsigned char at_border;	\/* attribute for borders$/;"	m	struct:__anon15
at_highlight	src/common.h	/^;*\/	unsigned char at_highlight;	\/* attribute for highlighted text$/;"	m	struct:__anon15
at_text	src/common.h	/^;*\/	unsigned char at_text;	\/* attribute for normal menu text$/;"	m	struct:__anon15
at_title	src/common.h	/^;*\/	unsigned char at_title;		\/* attribute for title$/;"	m	struct:__anon15
atbol	src/bitmap.s	/^atbol:$/;"	l
atbol	src/second.S	/^atbol:	$/;"	l
atbol	src/second.s	/^atbol:$/;"	l
atbol	src/third.s	/^atbol:$/;"	l
atend	src/chain.S	/^atend:$/;"	l
atend	src/chain.s	/^atend:$/;"	l
autoauto	src/common.c	/^      nowarn = 0, lba32 = 0, autoauto = 0, passw = 0, geometric = 0, eflag = 0;$/;"	v
autocount	src/raid.c	/^static int autocount;$/;"	v	file:
ax	diagnose/bios.c	/^  add	ax,#$10			! bump CS by 0x10 $/;"	v	typeref:struct:add
ax	diagnose/bios.c	/^  mov	ax,#is_dos		! resume address$/;"	v	typeref:struct:mov
ax	diagnose/bios.c	/^  mov	ax,cs$/;"	v	typeref:struct:mov
ax	diagnose/cprintf.c	/^mov  ax,si$/;"	v
ax	diagnose/cprintf.c	/^or   ax,di			! while (val)$/;"	v
ax	diagnose/cprintf.c	/^xchg ax,di$/;"	v
ax	diagnose/cprintf.c	/^xchg ax,si			! val(new) = val \/ base$/;"	v
ax	diagnose/cprintf.c	/^xchg ax,si$/;"	v
ax	src/probe.h	/^      unsigned short ax;$/;"	m	struct:Video25::__anon37
ax	src/probe.h	/^      unsigned short ax;$/;"	m	struct:Video2::__anon35
ax	src/probe.h	/^      unsigned short ax;$/;"	m	struct:Video3::__anon38
ax	src/probe.h	/^      unsigned short ax;$/;"	m	struct:Video3::__anon39
ax	src/probe.h	/^      unsigned short ax;$/;"	m	struct:Video3::__anon40
ax	src/probe.h	/^      unsigned short ax;$/;"	m	struct:Video::__anon42
ax	src/probe.h	/^      unsigned short ax;$/;"	m	struct:Video::__anon44
ax	src/probe.h	/^      unsigned short ax;$/;"	m	struct:Video::__anon45
ax	src/probe.h	/^      unsigned short ax;$/;"	m	struct:Video::__anon46
b	src/common.h	/^    unsigned short b,c;		\/* 32: bzImage hacks *\/$/;"	m	struct:__anon23
b	src/probe.c	/^   unsigned char b[5*SECTOR_SIZE];$/;"	m	union:Buf	file:
back	src/cfg.c	/^static int back = 0; \/* can go back by one char *\/$/;"	v	file:
back	src/dump.S	/^back:	hlt			! stay here$/;"	l
back	src/dump.S	/^back:	mov	ax,#FIRSTSEG$/;"	l
bad_rt	src/bootsect.S	/^bad_rt:	push	ax				! save error code$/;"	l
bad_rt	src/bootsect.s	/^bad_rt:	push	ax				! save error code$/;"	l
badmov	src/bitmap.s	/^badmov: pop bx ; discard GDT$/;"	l
badmov	src/second.S	/^badmov:	pop	bx		; discard GDT$/;"	l
badmov	src/second.s	/^badmov: pop bx ; discard GDT$/;"	l
badmov	src/third.s	/^badmov: pop bx ; discard GDT$/;"	l
banner	diagnose/test4.c	/^void banner(char *version)$/;"	f	file:
banner	diagnose/test5.c	/^void banner(char *version)$/;"	f	file:
base	diagnose/sector.S	/^base    equ     0x7C00$/;"	d
base01	diagnose/test4.c	/^	unsigned short base01;$/;"	m	struct:gdt_entry	file:
base2	diagnose/test4.c	/^	unsigned char  base2;$/;"	m	struct:gdt_entry	file:
base3	diagnose/test4.c	/^	unsigned char  base3;$/;"	m	struct:gdt_entry	file:
base_dev	src/geometry.h	/^    dev_t dev, base_dev; \/* real device if remapping (LVM, etc) *\/$/;"	m	struct:__anon6
bcmd	src/bitmap.s	/^bcmd:$/;"	l
bcmd	src/second.S	/^bcmd:$/;"	l
bcmd	src/second.s	/^bcmd:$/;"	l
bcmd	src/third.s	/^bcmd:$/;"	l
bd1	src/chain.S	/^bd1:	pop	si$/;"	l
bd_test	src/disk.S	/^bd_test:$/;"	l
bd_test	src/disk.s	/^bd_test:$/;"	l
bd_test_skip	src/disk.S	/^bd_test_skip:$/;"	l
bd_test_skip	src/disk.s	/^bd_test_skip:$/;"	l
bdcmag	src/bitmap.s	/^bdcmag: mov byte ptr (bx+2),#0 ; disable the command line$/;"	l
bdcmag	src/second.S	/^bdcmag:	mov	byte ptr (bx+2),#0 ; disable the command line$/;"	l
bdcmag	src/second.s	/^bdcmag: mov byte ptr (bx+2),#0 ; disable the command line$/;"	l
bdcmag	src/third.s	/^bdcmag: mov byte ptr (bx+2),#0 ; disable the command line$/;"	l
begin	src/disk.S	/^begin:$/;"	l
begin	src/disk.s	/^begin:$/;"	l
begin	src/pseudo.S	/^begin:$/;"	l
beginning	diagnose/sector.S	/^beginning:$/;"	l
bfcpl	src/bitmap.s	/^bfcpl: lodsb ; copy one character$/;"	l
bfcpl	src/second.S	/^bfcpl:	lodsb			; copy one character$/;"	l
bfcpl	src/second.s	/^bfcpl: lodsb ; copy one character$/;"	l
bfcpl	src/third.s	/^bfcpl: lodsb ; copy one character$/;"	l
bfirst	src/bitmap.s	/^bfirst: mov byte ptr lkcbuf,#0 ; clear default$/;"	l
bfirst	src/second.S	/^bfirst:	mov	byte ptr lkcbuf,#0  ; clear default$/;"	l
bfirst	src/second.s	/^bfirst: mov byte ptr lkcbuf,#0 ; clear default$/;"	l
bfirst	src/third.s	/^bfirst: mov byte ptr lkcbuf,#0 ; clear default$/;"	l
bg	src/bitmap.h	/^   short int fg, bg, sh;$/;"	m	struct:Scheme
bg	src/bitmap.h	/^;*\/	short fg, bg, sh;		\/* BMP normal text fore, backgr, shadow$/;"	m	struct:BitmapLiloHeader
bg	src/common.h	/^;*\/	short fg, bg, sh;		\/* BMP normal text fore, backgr, shadow$/;"	m	struct:__anon15
bh	src/probe.h	/^      unsigned char  bh;$/;"	m	struct:Video1::__anon34
bh	src/probe.h	/^      unsigned char  bh;$/;"	m	struct:Video2::__anon35
bh	src/probe.h	/^      unsigned char  bh;$/;"	m	struct:Video::__anon41
bh	src/probe.h	/^      unsigned char  bh;$/;"	m	struct:Video::__anon42
big	src/disk.S	/^big:$/;"	l
big	src/disk.s	/^big:$/;"	l
big1c	src/disk.S	/^big1c:          call    say$/;"	l
big1c	src/disk.s	/^big1c:          call    say$/;"	l
big2	src/disk.S	/^big2:$/;"	l
big2	src/disk.s	/^big2:$/;"	l
big2a	src/disk.S	/^big2a:          call    say$/;"	l
big2a	src/disk.s	/^big2a:          call    say$/;"	l
big2b	src/disk.S	/^big2b:          call    say$/;"	l
big2b	src/disk.s	/^big2b:          call    say$/;"	l
bigcyl	src/disk.S	/^bigcyl:         db      0$/;"	d
bigcyl	src/disk.s	/^bigcyl:         db      0$/;"	d
bigflag	src/disk.S	/^bigflag:        .byte      0$/;"	l
bigflag	src/disk.s	/^bigflag:        .byte      0$/;"	l
bios	src/device.c	/^    } bios;		\/* BIOS device codes *\/$/;"	m	struct:VolumeMgmt	typeref:struct:VolumeMgmt::__anon30	file:
bios	src/geometry.h	/^    int bios;$/;"	m	struct:_dt_entry
bios_boot	src/common.c	/^int bios_boot, bios_map;$/;"	v
bios_device	src/probe.c	/^int bios_device(GEOMETRY *geo, int device)$/;"	f
bios_map	src/common.c	/^int bios_boot, bios_map;$/;"	v
bios_max_devs	src/probe.c	/^int bios_max_devs(void)$/;"	f
bios_passes_dl	src/common.c	/^DL_BIOS bios_passes_dl = DL_NOT_SET;$/;"	v
bios_putc	diagnose/test4.c	/^void bios_putc(char c)$/;"	f
bios_putc	diagnose/test5.c	/^void bios_putc(char c)$/;"	f
bios_putc0	diagnose/test4.c	/^bios_putc0(int c)$/;"	f	file:
bios_putc0	diagnose/test5.c	/^bios_putc0(int c)$/;"	f	file:
bios_tt_done	src/bitmap.s	/^bios_tt_done:$/;"	l
bios_tt_done	src/second.s	/^bios_tt_done:$/;"	l
bios_tt_done	src/third.s	/^bios_tt_done:$/;"	l
bios_tt_done	src/volume.S	/^bios_tt_done:$/;"	l
bios_tt_match	src/bitmap.s	/^bios_tt_match:$/;"	l
bios_tt_match	src/second.s	/^bios_tt_match:$/;"	l
bios_tt_match	src/third.s	/^bios_tt_match:$/;"	l
bios_tt_match	src/volume.S	/^bios_tt_match:$/;"	l
bios_tt_next	src/bitmap.s	/^bios_tt_next:$/;"	l
bios_tt_next	src/second.s	/^bios_tt_next:$/;"	l
bios_tt_next	src/third.s	/^bios_tt_next:$/;"	l
bios_tt_next	src/volume.S	/^bios_tt_next:$/;"	l
bitmap_file	src/edit.c	/^static	char *temp_file, *bitmap_file;$/;"	v	file:
bits	src/probe.h	/^      unsigned short bits;$/;"	m	struct:Video3::__anon39
bits	src/probe.h	/^      unsigned short bits;$/;"	m	struct:Video3::__anon40
bits	src/probe.h	/^      unsigned short bits;$/;"	m	struct:Video::__anon45
bits	src/probe.h	/^      unsigned short bits;$/;"	m	struct:Video::__anon46
bl	src/probe.h	/^      unsigned char  bl;$/;"	m	struct:Video1::__anon34
bl	src/probe.h	/^      unsigned char  bl;$/;"	m	struct:Video2::__anon35
bl	src/probe.h	/^      unsigned char  bl;$/;"	m	struct:Video::__anon41
bl	src/probe.h	/^      unsigned char  bl;$/;"	m	struct:Video::__anon42
blue	src/bitmap.h	/^   bm_byte  blue, green, red, null;$/;"	m	struct:Rgb
blue	src/bitmap.h	/^   bm_byte  blue, green, red;$/;"	m	struct:Rgb2
bm_byte	src/bitmap.h	/^typedef unsigned char  bm_byte;$/;"	t
bm_sint16	src/bitmap.h	/^typedef signed short   bm_sint16;$/;"	t
bm_sint32	src/bitmap.h	/^typedef signed int    bm_sint32;$/;"	t
bm_uint16	src/bitmap.h	/^typedef unsigned short bm_uint16;$/;"	t
bm_uint32	src/bitmap.h	/^typedef unsigned int  bm_uint32;$/;"	t
bmh	src/edit.c	/^static BITMAPHEADER bmh;$/;"	v	file:
bmlh	src/edit.c	/^	   BITMAPLILOHEADER bmlh;$/;"	m	union:__anon31	file:
bmp_do_colors	src/bsect.c	/^void bmp_do_colors(char *cp, MENUTABLE *menu)$/;"	f
bmp_do_table	src/bsect.c	/^void bmp_do_table(char *cp, MENUTABLE *menu)$/;"	f
bmp_do_timer	src/bsect.c	/^void bmp_do_timer(char *cp, MENUTABLE *menu)$/;"	f
bmp_file_close	src/edit.c	/^static void bmp_file_close(int update)$/;"	f	file:
bmp_file_open	src/edit.c	/^static void bmp_file_open(char *bmp)$/;"	f	file:
bmp_retain	src/bitmap.s	/^bmp_retain:$/;"	l
bmp_retain	src/second.S	/^bmp_retain:$/;"	l
bmp_terminate	src/bitmap.s	/^bmp_terminate:$/;"	l
bmp_terminate	src/second.S	/^bmp_terminate:$/;"	l
boot	src/bitmap.s	/^boot:$/;"	l
boot	src/common.h	/^    BOOT_VOLID boot;$/;"	m	union:__anon17
boot	src/geometry.h	/^    int boot; \/* non-zero after geo_open_boot *\/$/;"	m	struct:__anon6
boot	src/raid.c	/^static char *boot;$/;"	v	file:
boot	src/second.S	/^boot:$/;"	l
boot	src/second.s	/^boot:$/;"	l
boot	src/third.s	/^boot:$/;"	l
boot3	src/bitmap.s	/^boot3: call crlf$/;"	l
boot3	src/second.S	/^boot3:	call	crlf$/;"	l
boot3	src/second.s	/^boot3: call crlf$/;"	l
boot3	src/third.s	/^boot3: call crlf$/;"	l
boot9	src/bitmap.s	/^boot9:$/;"	l
boot9	src/second.S	/^boot9:$/;"	l
boot9	src/second.s	/^boot9:$/;"	l
boot9	src/third.s	/^boot9:$/;"	l
boot_as	src/chain.S	/^boot_as:$/;"	l
boot_as	src/chain.s	/^boot_as:$/;"	l
boot_dev_nr	src/bsect.c	/^int boot_dev_nr;$/;"	v
boot_dev_nr	src/common.c	/^int boot_dev_nr, raid_index, do_md_install;$/;"	v
boot_device	src/boot.c	/^void boot_device(char *spec,char *range,IMAGE_DESCR *descr)$/;"	f
boot_devnam	src/bsect.c	/^static char *boot_devnam,*map_name;$/;"	v	file:
boot_dx	src/probe.h	/^   unsigned short boot_dx;$/;"	m	struct:Equip
boot_flag	src/bootsect.S	/^boot_flag:$/;"	l
boot_flag	src/bootsect.s	/^boot_flag:$/;"	l
boot_image	src/boot.c	/^void boot_image(char *spec,IMAGE_DESCR *descr)$/;"	f
boot_in_dl	src/first.S	/^boot_in_dl:$/;"	l
boot_in_dl	src/first.s	/^boot_in_dl:$/;"	l
boot_ind	src/common.h	/^    unsigned short boot_ind;	\/* 0xAA55 *\/$/;"	m	struct:__anon16
boot_ind	src/partition.h	/^	unsigned char boot_ind;		\/* 0x80 - active *\/$/;"	m	struct:partition
boot_it	src/mbr.S	/^boot_it:$/;"	l
boot_it	src/mbr.s	/^boot_it:$/;"	l
boot_it	src/mbr2.s	/^boot_it:$/;"	l
boot_mbr	src/boot.c	/^char *boot_mbr(const char *boot, int table)$/;"	f
boot_other	src/boot.c	/^void boot_other(char *loader,char *boot,char *part,IMAGE_DESCR *descr)$/;"	f
boot_real_msg_k	src/second.S	/^boot_real_msg_k:$/;"	l
boot_real_msg_v	src/second.S	/^boot_real_msg_v:$/;"	l
boot_sector	src/chain.S	/^boot_sector:$/;"	l
boot_sector	src/chain.s	/^boot_sector:$/;"	l
boot_si	src/mbr.S	/^boot_si:$/;"	l
boot_si	src/mbr.s	/^boot_si:$/;"	l
boot_si	src/mbr2.s	/^boot_si:$/;"	l
bootcode	src/common.h	/^    unsigned char bootcode[MAX_BOOT_SIZE];$/;"	m	struct:__anon16
bout	src/bitmap.s	/^bout: push ax ; save byte$/;"	l
bout	src/chain.S	/^bout:	push	ax		! save byte$/;"	l
bout	src/disk.S	/^bout:           push    ax$/;"	l
bout	src/disk.s	/^bout:           push    ax$/;"	l
bout	src/dump.S	/^bout:	push	ax		! display one byte$/;"	l
bout	src/first.S	/^bout:	rol     ax,#4		! bring hi-nibble to position$/;"	l
bout	src/first.s	/^bout: rol ax,#4 ! bring hi-nibble to position$/;"	l
bout	src/mbr.S	/^bout:	push	ax		! convert & output hex byte in AL$/;"	l
bout	src/second.S	/^bout:	push	ax		; save byte$/;"	l
bout	src/second.s	/^bout: push ax ; save byte$/;"	l
bout	src/third.s	/^bout: push ax ; save byte$/;"	l
bout1	src/disk.S	/^bout1:          add     al,#'0$/;"	l
bout1	src/disk.s	/^bout1:          add     al,#'0$/;"	l
bout2	src/disk.S	/^bout2:          call    putc$/;"	l
bout2	src/disk.s	/^bout2:          call    putc$/;"	l
bout4	src/disk.S	/^bout4:          pop     cx$/;"	l
bout4	src/disk.s	/^bout4:          pop     cx$/;"	l
bp	src/probe.h	/^      unsigned short bp;$/;"	m	struct:Video25::__anon37
bpb	src/common.h	/^;*\/    BIOS_PARAMETER_BLOCK bpb;	\/* BIOS parameter block$/;"	m	struct:__anon11
bpb_bytes_per_sector	src/common.s	/^						bpb_bytes_per_sector:	.blkb	2$/;"	l
bpb_size	src/common.s	/^						bpb_size:$/;"	l
bpdos_bpb	src/common.s	/^						bpdos_bpb:	.blkb	bpb_size$/;"	l
bpdos_jump	src/common.s	/^						bpdos_jump:	.blkb	3$/;"	l
bpdos_size	src/common.s	/^						bpdos_size:$/;"	l
bpdos_system	src/common.s	/^						bpdos_system:	.blkb	8$/;"	l
break	src/bitmap.s	/^break: .byte 0 ; break received flag$/;"	l
break	src/second.S	/^break:	.byte	0		; break received flag$/;"	l
break	src/second.s	/^break: .byte 0 ; break received flag$/;"	l
break	src/third.s	/^break: .byte 0 ; break received flag$/;"	l
brev	src/common.h	392;"	d
brfrst	src/bitmap.s	/^brfrst:$/;"	l
brfrst	src/second.S	/^brfrst:	$/;"	l
brfrst	src/second.s	/^brfrst:$/;"	l
brfrst	src/third.s	/^brfrst:$/;"	l
brfrst0k	src/bitmap.s	/^brfrst0k:$/;"	l
brfrst0k	src/second.S	/^brfrst0k:$/;"	l
brfrst0k	src/second.s	/^brfrst0k:$/;"	l
brfrst0k	src/third.s	/^brfrst0k:$/;"	l
brfrst0v	src/bitmap.s	/^brfrst0v:$/;"	l
brfrst0v	src/second.S	/^brfrst0v:$/;"	l
brfrst0v	src/second.s	/^brfrst0v:$/;"	l
brfrst0v	src/third.s	/^brfrst0v:$/;"	l
brfrst1	src/bitmap.s	/^brfrst1: test word ptr (bx+id_flags),ax$/;"	l
brfrst1	src/second.S	/^brfrst1: test	word ptr (bx+id_flags),#FLAG_VMDEFAULT$/;"	l
brfrst1	src/second.S	/^brfrst1: test	word ptr (bx+id_flags),ax$/;"	l
brfrst1	src/second.s	/^brfrst1: test word ptr (bx+id_flags),ax$/;"	l
brfrst1	src/third.s	/^brfrst1: test word ptr (bx+id_flags),ax$/;"	l
brfrst1k	src/second.S	/^brfrst1k: test	word ptr (bx+id_flags),#FLAG_NOKBDEFAULT$/;"	l
brfrst3	src/bitmap.s	/^brfrst3:$/;"	l
brfrst3	src/second.S	/^brfrst3:$/;"	l
brfrst3	src/second.s	/^brfrst3:$/;"	l
brfrst3	src/third.s	/^brfrst3:$/;"	l
brfrst3k	src/second.S	/^brfrst3k:$/;"	l
brto	src/bitmap.s	/^brto: call crlf ; display a CRLF$/;"	l
brto	src/second.S	/^brto:	call	crlf		; display a CRLF$/;"	l
brto	src/second.s	/^brto: call crlf ; display a CRLF$/;"	l
brto	src/third.s	/^brto: call crlf ; display a CRLF$/;"	l
bs	src/bitmap.s	/^bs: .byte 8,32,8,0$/;"	l
bs	src/second.S	/^bs:	.byte	8,32,8,0$/;"	l
bs	src/second.s	/^bs: .byte 8,32,8,0$/;"	l
bs	src/third.s	/^bs: .byte 8,32,8,0$/;"	l
bs_helper	src/disk.S	/^bs_helper:      int     0x19			;label here for kludge$/;"	l
bs_helper	src/disk.s	/^bs_helper:      int     0x19			;label here for kludge$/;"	l
bs_helper	src/pseudo.S	/^bs_helper:      int     0x19			;label here for kludge$/;"	l
bsect	src/bsect.c	/^static BOOT_SECTOR bsect,bsect_orig;$/;"	v	file:
bsect_cancel	src/bsect.c	/^void bsect_cancel(void)$/;"	f
bsect_common	src/bsect.c	/^static void bsect_common(IMAGE_DESCR *descr, int image)$/;"	f	file:
bsect_done	src/bsect.c	/^static void bsect_done(char *name,IMAGE_DESCR *descr)$/;"	f	file:
bsect_number	src/bsect.c	/^int bsect_number(void)$/;"	f
bsect_open	src/bsect.c	/^void bsect_open(char *boot_dev,char *map_file,char *install,int delay,$/;"	f
bsect_orig	src/bsect.c	/^static BOOT_SECTOR bsect,bsect_orig;$/;"	v	file:
bsect_raid_update	src/bsect.c	/^void bsect_raid_update(char *boot_dev, unsigned int raid_offset, $/;"	f
bsect_read	src/bsect.c	/^void bsect_read(char *boot_dev,BOOT_SECTOR *buffer)$/;"	f
bsect_uninstall	src/bsect.c	/^void bsect_uninstall(char *boot_dev,char *backup_file,int validate)$/;"	f
bsect_update	src/bsect.c	/^void bsect_update(char *backup_file, int force_backup, int pass)$/;"	f
buf	src/probe.c	/^} buf;$/;"	v	typeref:union:Buf	file:
buf_valid	src/probe.c	/^static int buf_valid = -1;$/;"	v	file:
buffer	diagnose/sector.S	/^buffer  equ     0x0500          ;scratch disk buffer$/;"	d
buffer	diagnose/test5.c	/^} buffer;$/;"	v	typeref:struct:Buffer
buffer	src/edit.c	/^	   unsigned char buffer[256];$/;"	m	union:__anon31	file:
build_table	keytab-lilo.pl	/^sub build_table$/;"	s
build_vol_tab	src/bitmap.s	/^build_vol_tab:$/;"	l
build_vol_tab	src/second.s	/^build_vol_tab:$/;"	l
build_vol_tab	src/third.s	/^build_vol_tab:$/;"	l
build_vol_tab	src/volume.S	/^build_vol_tab:$/;"	l
bvt0	src/bitmap.s	/^bvt0:$/;"	l
bvt0	src/second.s	/^bvt0:$/;"	l
bvt0	src/third.s	/^bvt0:$/;"	l
bvt0	src/volume.S	/^bvt0:	$/;"	l
bvt001	src/bitmap.s	/^bvt001:$/;"	l
bvt001	src/second.s	/^bvt001:$/;"	l
bvt001	src/third.s	/^bvt001:$/;"	l
bvt001	src/volume.S	/^bvt001:$/;"	l
bvt003	src/bitmap.s	/^bvt003:$/;"	l
bvt003	src/second.s	/^bvt003:$/;"	l
bvt003	src/third.s	/^bvt003:$/;"	l
bvt003	src/volume.S	/^bvt003:$/;"	l
bvt1	src/bitmap.s	/^bvt1:$/;"	l
bvt1	src/second.s	/^bvt1:$/;"	l
bvt1	src/third.s	/^bvt1:$/;"	l
bvt1	src/volume.S	/^bvt1:$/;"	l
bvt2	src/bitmap.s	/^bvt2: jcxz bvt7$/;"	l
bvt2	src/second.s	/^bvt2: jcxz bvt7$/;"	l
bvt2	src/third.s	/^bvt2: jcxz bvt7$/;"	l
bvt2	src/volume.S	/^bvt2:	jcxz	bvt7$/;"	l
bvt4	src/bitmap.s	/^bvt4:$/;"	l
bvt4	src/second.s	/^bvt4:$/;"	l
bvt4	src/third.s	/^bvt4:$/;"	l
bvt4	src/volume.S	/^bvt4:$/;"	l
bvt5	src/bitmap.s	/^bvt5:$/;"	l
bvt5	src/second.s	/^bvt5:$/;"	l
bvt5	src/third.s	/^bvt5:$/;"	l
bvt5	src/volume.S	/^bvt5:$/;"	l
bvt7	src/bitmap.s	/^bvt7:$/;"	l
bvt7	src/second.s	/^bvt7:$/;"	l
bvt7	src/third.s	/^bvt7:$/;"	l
bvt7	src/volume.S	/^bvt7:$/;"	l
bvt9	src/bitmap.s	/^bvt9:$/;"	l
bvt9	src/second.s	/^bvt9:$/;"	l
bvt9	src/third.s	/^bvt9:$/;"	l
bvt9	src/volume.S	/^bvt9:$/;"	l
bvt90	src/bitmap.s	/^bvt90:$/;"	l
bvt90	src/second.s	/^bvt90:$/;"	l
bvt90	src/third.s	/^bvt90:$/;"	l
bvt90	src/volume.S	/^bvt90:$/;"	l
bvt91	src/bitmap.s	/^bvt91:$/;"	l
bvt91	src/second.s	/^bvt91:$/;"	l
bvt91	src/third.s	/^bvt91:$/;"	l
bvt91	src/volume.S	/^bvt91:$/;"	l
bvt92	src/bitmap.s	/^bvt92:$/;"	l
bvt92	src/second.s	/^bvt92:$/;"	l
bvt92	src/third.s	/^bvt92:$/;"	l
bvt92	src/volume.S	/^bvt92:$/;"	l
bvtA	src/volume.S	/^bvtA:	mov	bx,cx$/;"	l
bvtA2	src/volume.S	/^bvtA2:	inc	cx$/;"	l
bvtB	src/volume.S	/^bvtB:	lodsw			; get from,to pair$/;"	l
bvtX	src/volume.S	/^bvtX:$/;"	l
bvtX1	src/volume.S	/^bvtX1:$/;"	l
bvt_not_found	src/bitmap.s	/^bvt_not_found:$/;"	l
bvt_not_found	src/second.s	/^bvt_not_found:$/;"	l
bvt_not_found	src/third.s	/^bvt_not_found:$/;"	l
bvt_not_found	src/volume.S	/^bvt_not_found:$/;"	l
bx	diagnose/cprintf.c	/^mov	bx,-6[bp]$/;"	v
bx	src/probe.h	/^      unsigned short bx;$/;"	m	struct:Hard::__anon51
bx	src/probe.h	/^      unsigned short bx;$/;"	m	struct:Video2::__anon36
bx	src/probe.h	/^      unsigned short bx;$/;"	m	struct:Video::__anon43
byte	diagnose/test4.c	/^typedef unsigned char  byte;$/;"	t	file:
byte	diagnose/test5.c	/^typedef unsigned char  byte;$/;"	t	file:
byteReverse	src/bitmap.s	/^byteReverse:$/;"	l
byteReverse	src/second.s	/^byteReverse:$/;"	l
byteReverse	src/shs2.c	/^static void byteReverse(LONG buffer[], int byteCount)$/;"	f	file:
byteReverse	src/shs3.S	/^byteReverse:$/;"	l
byteReverse	src/third.s	/^byteReverse:$/;"	l
bytes_per_sector	diagnose/sector.S	/^bytes_per_sector:	dw	512$/;"	d
bytes_per_sector	src/common.h	/^;*\/    unsigned char  bytes_per_sector[2];	\/*$/;"	m	struct:__anon10
c	src/common.h	/^    unsigned short b,c;		\/* 32: bzImage hacks *\/$/;"	m	struct:__anon23
c1000	src/bitmap.S	/^c1000:	.word	40000		;was 1000, now 40*1000$/;"	l
c1000	src/bitmap.s	/^c1000: .word 40000 ;was 1000, now 40*1000$/;"	l
c1000	src/crt.S	/^c1000:	.word	40000		;was 1000, now 40*1000$/;"	l
c1000	src/third.s	/^c1000: .word 40000 ;was 1000, now 40*1000$/;"	l
c55	src/bitmap.S	/^c55:	.word	2197		;was 55, now 54.925*40$/;"	l
c55	src/bitmap.s	/^c55: .word 2197 ;was 55, now 54.925*40$/;"	l
c55	src/crt.S	/^c55:	.word	2197		;was 55, now 54.925*40$/;"	l
c55	src/third.s	/^c55: .word 2197 ;was 55, now 54.925*40$/;"	l
c60	src/bitmap.S	/^c60:	.word	60$/;"	l
c60	src/bitmap.s	/^c60: .word 60$/;"	l
c60	src/crt.S	/^c60:	.word	60$/;"	l
c60	src/third.s	/^c60: .word 60$/;"	l
cache	src/chain.S	/^cache:	.byte	0			! drive, 0 means not cached$/;"	l
cache	src/chain.s	/^cache: .byte 0 ! drive, 0 means not cached$/;"	l
cache	src/device.c	/^static CACHE_ENTRY *cache = NULL;$/;"	v	file:
cache_add	src/device.c	/^static void cache_add(const char *name,int number)$/;"	f	file:
cache_ide	src/device.c	/^void cache_ide (char *name, int major)$/;"	f
cache_scsi	src/device.c	/^void cache_scsi (char *name, int major)$/;"	f
call	src/bitmap.s	/^ call di ;putrow$/;"	d
call	src/display4.S	/^	call	di		;putrow$/;"	d
cbx	src/chain.S	/^cbx:	.blkw	1$/;"	l
cbx	src/chain.s	/^cbx: .blkw 1$/;"	l
cc	src/common.h	395;"	d
ces	src/chain.S	/^ces:	.blkw	1$/;"	l
ces	src/chain.s	/^ces: .blkw 1$/;"	l
cf_all	src/cfg.c	/^CONFIG cf_all[] = {$/;"	v
cf_bitmap	src/cfg.c	/^CONFIG cf_bitmap[] = {$/;"	v
cf_change	src/cfg.c	/^CONFIG cf_change[] = {$/;"	v
cf_change_dsc	src/cfg.c	/^CONFIG cf_change_dsc[] = {$/;"	v
cf_change_rule	src/cfg.c	/^CONFIG cf_change_rule[] = {$/;"	v
cf_change_rules	src/cfg.c	/^CONFIG cf_change_rules[] = {$/;"	v
cf_disk	src/cfg.c	/^CONFIG cf_disk[] = {$/;"	v
cf_identify	src/cfg.c	/^CONFIG cf_identify[] = {$/;"	v
cf_image	src/cfg.c	/^CONFIG cf_image[] = {$/;"	v
cf_kernel	src/cfg.c	/^CONFIG cf_kernel[] = {$/;"	v
cf_map_drive	src/cfg.c	/^CONFIG cf_map_drive[] = {$/;"	v
cf_options	src/cfg.c	/^CONFIG cf_options[] = {$/;"	v
cf_other	src/cfg.c	/^CONFIG cf_other[] = {$/;"	v
cf_partition	src/cfg.c	/^CONFIG cf_partition[] = {$/;"	v
cf_partitions	src/cfg.c	/^CONFIG cf_partitions[] = {$/;"	v
cf_top	src/cfg.c	/^CONFIG cf_top[] = {$/;"	v
cfg_alpha_check	src/cfg.c	/^void cfg_alpha_check(void)$/;"	f
cfg_bitmap_only	src/cfg.c	/^void cfg_bitmap_only(void)$/;"	f
cfg_do_set	src/cfg.c	/^static int cfg_do_set(CONFIG *table,char *item,char *value,int copy,$/;"	f	file:
cfg_end	src/cfg.c	/^static int cfg_end (char *item)$/;"	f	file:
cfg_error	src/cfg.c	/^void __attribute__ ((format (printf, 1, 2))) cfg_error(char *msg,...)$/;"	f
cfg_get_flag	src/cfg.c	/^int cfg_get_flag(CONFIG *table,char *item)$/;"	f
cfg_get_strg	src/cfg.c	/^char *cfg_get_strg(CONFIG *table,char *item)$/;"	f
cfg_get_token	src/cfg.c	/^static char *cfg_get_token(void)$/;"	f	file:
cfg_init	src/cfg.c	/^void cfg_init(CONFIG *table)$/;"	f
cfg_next	src/cfg.c	/^static int cfg_next(char **item,char **value)$/;"	f	file:
cfg_open	src/cfg.c	/^int cfg_open(char *name)$/;"	f
cfg_parse	src/cfg.c	/^int cfg_parse(CONFIG *table)$/;"	f
cfg_pw_open	src/cfg.c	/^FILE *cfg_pw_open(void)$/;"	f
cfg_return	src/cfg.c	/^static void cfg_return(char *item,char *value)$/;"	f	file:
cfg_return_token	src/cfg.c	/^static void cfg_return_token(char *token)$/;"	f	file:
cfg_set	src/cfg.c	/^void cfg_set(CONFIG *table,char *item,char *value,void *context)$/;"	f
cfg_unset	src/cfg.c	/^void cfg_unset(CONFIG *table,char *item)$/;"	f
cft_end	src/cfg.h	/^typedef enum { cft_strg,cft_flag,cft_link,cft_end } CONFIG_TYPE;$/;"	e	enum:__anon32
cft_flag	src/cfg.h	/^typedef enum { cft_strg,cft_flag,cft_link,cft_end } CONFIG_TYPE;$/;"	e	enum:__anon32
cft_link	src/cfg.h	/^typedef enum { cft_strg,cft_flag,cft_link,cft_end } CONFIG_TYPE;$/;"	e	enum:__anon32
cft_strg	src/cfg.h	/^typedef enum { cft_strg,cft_flag,cft_link,cft_end } CONFIG_TYPE;$/;"	e	enum:__anon32
change_rules	src/partition.c	/^CHANGE_RULE *change_rules = NULL;$/;"	v
chars	src/disk.S	/^chars:          .ascii  " KMGTxyz"$/;"	l
chars	src/disk.s	/^chars:          .ascii  " KMGTxyz"$/;"	l
check_bios	src/probe.c	/^void check_bios(void)$/;"	f
check_fallback	src/bsect.c	/^void check_fallback(void)$/;"	f
check_fs	diagnose/test4.c	/^int check_fs(void)$/;"	f	file:
check_nokbdefault	src/bsect.c	/^void check_nokbdefault(void)$/;"	f
check_options	src/bsect.c	/^static void check_options(char *options)$/;"	f	file:
check_size	src/boot.c	/^static void check_size(char *name,int setup_secs,int sectors)$/;"	f	file:
check_unattended	src/bsect.c	/^void check_unattended(void)$/;"	f
check_version	src/common.c	/^void check_version(BOOT_SECTOR *sect,int stage)$/;"	f
check_vmdefault	src/bsect.c	/^void check_vmdefault(void)$/;"	f
checksum	src/common.h	/^    	unsigned int checksum;$/;"	m	struct:__anon18::__anon20
checksum	src/common.h	/^;*\/	short checksum[2];		\/* checksum longword$/;"	m	struct:__anon15
checksum	src/probe.c	/^      short checksum[2];	\/* prevent alignment on *4 boundary *\/$/;"	m	struct:Buf::__anon53	file:
checksum	src/probe.c	/^      short checksum[2];	\/* prevent alignment on *4 boundary *\/$/;"	m	struct:Buf::__anon54	file:
chkerr	src/bitmap.s	/^chkerr:$/;"	l
chkerr	src/second.S	/^chkerr:$/;"	l
chkerr	src/second.s	/^chkerr:$/;"	l
chkerr	src/third.s	/^chkerr:$/;"	l
chkver	src/bitmap.s	/^chkver:$/;"	l
chkver	src/second.S	/^chkver:$/;"	l
chkver	src/second.s	/^chkver:$/;"	l
chkver	src/third.s	/^chkver:$/;"	l
chkvga	src/bitmap.s	/^chkvga:$/;"	l
chkvga	src/second.S	/^chkvga:$/;"	l
chkvga	src/second.s	/^chkvga:$/;"	l
chkvga	src/third.s	/^chkvga:$/;"	l
chunk_size	src/md-int.h	/^	int			chunk_size;	\/* in bytes *\/$/;"	m	struct:md_param
chunk_size	src/md-int.h	/^	md_u32 chunk_size;	\/*  1 chunk size in bytes		      *\/$/;"	m	struct:md_array_info_s
chunk_size	src/md-int.h	/^	md_u32 chunk_size;	\/*  1 chunk size in bytes		      *\/$/;"	m	struct:md_superblock_s
ck_failed	src/chain.S	/^ck_failed:$/;"	l
ck_failed	src/chain.s	/^ck_failed:$/;"	l
ck_fstype	src/chain.S	/^ck_fstype:$/;"	l
ck_fstype	src/chain.s	/^ck_fstype:$/;"	l
ck_loop	src/chain.S	/^ck_loop:$/;"	l
ck_loop	src/chain.s	/^ck_loop:$/;"	l
ck_next	src/chain.S	/^ck_next:$/;"	l
ck_next	src/chain.s	/^ck_next:$/;"	l
ck_okay	src/chain.S	/^ck_okay:$/;"	l
ck_okay	src/chain.s	/^ck_okay:$/;"	l
ck_say	src/chain.S	/^ck_say:$/;"	l
cl_wait	src/second.S	/^cl_wait:$/;"	l
cledne	src/bitmap.s	/^cledne: mov byte ptr prechr,#32 ; character before command line is a space$/;"	l
cledne	src/second.S	/^cledne:	mov	byte ptr prechr,#32 ; character before command line is a space$/;"	l
cledne	src/second.s	/^cledne: mov byte ptr prechr,#32 ; character before command line is a space$/;"	l
cledne	src/third.s	/^cledne: mov byte ptr prechr,#32 ; character before command line is a space$/;"	l
clend	src/bitmap.s	/^clend: mov al,(bx)$/;"	l
clend	src/second.S	/^clend:	mov	al,(bx)$/;"	l
clend	src/second.s	/^clend: mov al,(bx)$/;"	l
clend	src/third.s	/^clend: mov al,(bx)$/;"	l
cli	src/common.h	/^;*\/    unsigned char cli;     \/* clear interrupt flag instruction$/;"	m	struct:__anon12
close	diagnose/bios.c	/^close(fd)$/;"	f
cmd	src/chain.S	/^cmd:	.word	0,0			! command line to pass on$/;"	l
cmd	src/chain.s	/^cmd: .word 0,0 ! command line to pass on$/;"	l
cmd	src/probe.c	/^	char *cmd;$/;"	m	struct:Probes	file:
cmd_line_ptr	src/common.h	/^    unsigned int cmd_line_ptr; \/* 40: 2.02 address32 of command line *\/$/;"	m	struct:__anon23
cmd_raid_wrt	src/bitmap.s	/^cmd_raid_wrt:$/;"	l
cmd_raid_wrt	src/second.S	/^cmd_raid_wrt:$/;"	l
cmd_raid_wrt	src/second.s	/^cmd_raid_wrt:$/;"	l
cmd_raid_wrt	src/third.s	/^cmd_raid_wrt:$/;"	l
cmd_write	src/bitmap.s	/^cmd_write:$/;"	l
cmd_write	src/second.S	/^cmd_write:	$/;"	l
cmd_write	src/second.s	/^cmd_write:$/;"	l
cmd_write	src/third.s	/^cmd_write:$/;"	l
cmdbeg	src/bitmap.s	/^cmdbeg: .word 0$/;"	l
cmdbeg	src/second.S	/^cmdbeg:	.word	0$/;"	l
cmdbeg	src/second.s	/^cmdbeg: .word 0$/;"	l
cmdbeg	src/third.s	/^cmdbeg: .word 0$/;"	l
cnok	src/bitmap.s	/^cnok:$/;"	l
cnok	src/second.S	/^cnok:$/;"	l
cnok	src/second.s	/^cnok:$/;"	l
cnok	src/third.s	/^cnok:$/;"	l
cnok3	src/bitmap.s	/^cnok3:$/;"	l
cnok3	src/second.S	/^cnok3:$/;"	l
cnok3	src/second.s	/^cnok3:$/;"	l
cnok3	src/third.s	/^cnok3:$/;"	l
cnok5	src/bitmap.s	/^cnok5:$/;"	l
cnok5	src/second.S	/^cnok5:$/;"	l
cnok5	src/second.s	/^cnok5:$/;"	l
cnok5	src/third.s	/^cnok5:$/;"	l
code_length	src/common.h	/^;*\/    unsigned short code_length;  \/* length of the first stage code$/;"	m	struct:__anon12
col	src/bitmap.h	/^;*\/	short row, col, ncol;		\/* BMP row, col, and ncols$/;"	m	struct:BitmapLiloHeader
col	src/common.h	/^;*\/	short row, col, ncol;		\/* BMP row, col, and ncols$/;"	m	struct:__anon15
col	src/probe.c	/^static int mode, col, row, page;$/;"	v	file:
col1	src/crt.S	/^col1:	mov	[ncol],bl$/;"	l
col1	src/third.s	/^col1: mov [ncol],bl$/;"	l
collect	src/disk.S	/^collect:$/;"	l
collect	src/disk.s	/^collect:$/;"	l
color	src/bsect.c	527;"	d	file:
color	src/bsect.c	563;"	d	file:
color	src/edit.c	/^static void color(char *what, short fg, short bg, short sh)$/;"	f	file:
colormax	src/common.c	/^int colormax = 15, warnings = 0;$/;"	v
comcom	src/bitmap.s	/^comcom:$/;"	l
comcom	src/second.S	/^comcom:$/;"	l
comcom	src/second.s	/^comcom:$/;"	l
comcom	src/third.s	/^comcom:$/;"	l
comma	src/common.h	396;"	d
comma	src/common.h	458;"	d
comma	src/common.h	459;"	d
compact	src/common.c	/^int verbose = 0, test = 0, compact = 0, linear = 0, raid_flags = 0, zflag = 0,$/;"	v
compressionScheme	src/bitmap.h	/^   bm_uint32   compressionScheme;$/;"	m	struct:BitMapHeader
compute_arrays	src/edit.c	/^static void compute_arrays(RGB pal[], int n)$/;"	f	file:
config_file	src/lilo.c	/^char *config_file;		\/* actual name of the config file *\/$/;"	v
config_read	src/lilo.c	/^int config_read;		\/* readable by other than root *\/$/;"	v
configuration	src/lilo.c	/^static void configuration(void)$/;"	f	file:
const	src/common.h	41;"	d
contAddr	diagnose/sector.S	/^contAddr:	.blkw	2	; DO NOT MOVE$/;"	l
context	src/cfg.h	/^    void *context;$/;"	m	struct:__anon33
continue	src/bitmap.s	/^continue:$/;"	l
continue	src/second.S	/^continue:$/;"	l
continue	src/second.s	/^continue:$/;"	l
continue	src/third.s	/^continue:$/;"	l
copy	src/chain.S	/^copy:$/;"	l
copy	src/chain.s	/^copy:$/;"	l
countHi	src/shs2.h	/^   LONG countLo, countHi;  \/* 64-bit bitcount *\/$/;"	m	struct:__anon7
countLo	src/shs2.h	/^   LONG countLo, countHi;  \/* 64-bit bitcount *\/$/;"	m	struct:__anon7
cout	src/chain.S	/^cout:$/;"	l
cout	src/mbr.S	/^cout:	push	bx		! write character to the console$/;"	l
cpcodn	src/bitmap.s	/^cpcodn: seg es$/;"	l
cpcodn	src/second.S	/^cpcodn:	seg	es$/;"	l
cpcodn	src/second.s	/^cpcodn: seg es$/;"	l
cpcodn	src/third.s	/^cpcodn: seg es$/;"	l
cpcodsp	src/bitmap.s	/^cpcodsp:$/;"	l
cpcodsp	src/second.S	/^cpcodsp:$/;"	l
cpcodsp	src/second.s	/^cpcodsp:$/;"	l
cpcodsp	src/third.s	/^cpcodsp:$/;"	l
cpcolp	src/bitmap.s	/^cpcolp: or al,al ; NUL ?$/;"	l
cpcolp	src/second.S	/^cpcolp:	or	al,al		; NUL ?$/;"	l
cpcolp	src/second.s	/^cpcolp: or al,al ; NUL ?$/;"	l
cpcolp	src/third.s	/^cpcolp: or al,al ; NUL ?$/;"	l
cpdname	src/bitmap.s	/^cpdname:$/;"	l
cpdname	src/second.S	/^cpdname:$/;"	l
cpdname	src/second.s	/^cpdname:$/;"	l
cpdname	src/third.s	/^cpdname:$/;"	l
cpdname9	src/bitmap.s	/^cpdname9:$/;"	l
cpdname9	src/second.S	/^cpdname9:	$/;"	l
cpdname9	src/second.s	/^cpdname9:$/;"	l
cpdname9	src/third.s	/^cpdname9:$/;"	l
cpdone	src/bitmap.s	/^cpdone:$/;"	l
cpdone	src/second.S	/^cpdone:$/;"	l
cpdone	src/second.s	/^cpdone:$/;"	l
cpdone	src/third.s	/^cpdone:$/;"	l
cpnocl	src/bitmap.s	/^cpnocl:$/;"	l
cpnocl	src/second.S	/^cpnocl:	$/;"	l
cpnocl	src/second.s	/^cpnocl:$/;"	l
cpnocl	src/third.s	/^cpnocl:$/;"	l
cpnodn	src/bitmap.s	/^cpnodn:$/;"	l
cpnodn	src/second.S	/^cpnodn:	$/;"	l
cpnodn	src/second.s	/^cpnodn:$/;"	l
cpnodn	src/third.s	/^cpnodn:$/;"	l
cpnotmem	src/bitmap.s	/^cpnotmem:$/;"	l
cpnotmem	src/second.S	/^cpnotmem:$/;"	l
cpnotmem	src/second.s	/^cpnotmem:$/;"	l
cpnotmem	src/third.s	/^cpnotmem:$/;"	l
cpovfl	src/bitmap.s	/^cpovfl: mov (di),cl ; CX is zero$/;"	l
cpovfl	src/second.S	/^cpovfl:	mov	(di),cl		; CX is zero$/;"	l
cpovfl	src/second.s	/^cpovfl: mov (di),cl ; CX is zero$/;"	l
cpovfl	src/third.s	/^cpovfl: mov (di),cl ; CX is zero$/;"	l
cprintf	diagnose/cprintf.c	/^int cprintf(char * fmt, ...)$/;"	f
cpsav	src/bitmap.s	/^cpsav: lodsb ; copy one byte$/;"	l
cpsav	src/second.S	/^cpsav:	lodsb			; copy one byte$/;"	l
cpsav	src/second.s	/^cpsav: lodsb ; copy one byte$/;"	l
cpsav	src/third.s	/^cpsav: lodsb ; copy one byte$/;"	l
cpvalp	src/bitmap.s	/^cpvalp: lodsb ; copy one byte$/;"	l
cpvalp	src/second.S	/^cpvalp:	lodsb			; copy one byte$/;"	l
cpvalp	src/second.s	/^cpvalp: lodsb ; copy one byte$/;"	l
cpvalp	src/third.s	/^cpvalp: lodsb ; copy one byte$/;"	l
cr	src/bitmap.s	/^cr:$/;"	l
cr	src/second.S	/^cr:$/;"	l
cr	src/second.s	/^cr:$/;"	l
cr	src/third.s	/^cr:$/;"	l
crc	src/bsect.c	/^    int crc[MAX_PW_CRC];$/;"	m	struct:Pass	file:
crc	src/common.h	391;"	d
crc32	src/bitmap.s	/^crc32:$/;"	l
crc32	src/common.c	/^unsigned int crc32 (unsigned char *cp, int nsize, unsigned int polynomial)$/;"	f
crc32	src/second.S	/^crc32:$/;"	l
crc32	src/second.s	/^crc32:$/;"	l
crc32	src/third.s	/^crc32:$/;"	l
crc32a	src/bitmap.s	/^crc32a:$/;"	l
crc32a	src/second.S	/^crc32a:$/;"	l
crc32a	src/second.s	/^crc32a:$/;"	l
crc32a	src/third.s	/^crc32a:$/;"	l
crc32b	src/bitmap.s	/^crc32b: shl bx,#1 ; get hi bit of char in BH$/;"	l
crc32b	src/second.S	/^crc32b:		shl	bx,#1		; get hi bit of char in BH$/;"	l
crc32b	src/second.s	/^crc32b: shl bx,#1 ; get hi bit of char in BH$/;"	l
crc32b	src/third.s	/^crc32b: shl bx,#1 ; get hi bit of char in BH$/;"	l
crc32c	src/bitmap.s	/^crc32c:$/;"	l
crc32c	src/second.S	/^crc32c:$/;"	l
crc32c	src/second.s	/^crc32c:$/;"	l
crc32c	src/third.s	/^crc32c:$/;"	l
crc32d	src/bitmap.s	/^crc32d:$/;"	l
crc32d	src/second.S	/^crc32d:		$/;"	l
crc32d	src/second.s	/^crc32d:$/;"	l
crc32d	src/third.s	/^crc32d:$/;"	l
crc32partial	src/common.c	/^unsigned int crc32partial(unsigned char *cp, int nsize,$/;"	f
cread	src/bitmap.s	/^cread: ; entry point for mapped device r\/w$/;"	l
cread	src/second.S	/^cread:			; entry point for mapped device r\/w$/;"	l
cread	src/second.s	/^cread: ; entry point for mapped device r\/w$/;"	l
cread	src/third.s	/^cread: ; entry point for mapped device r\/w$/;"	l
cread_physical	src/bitmap.s	/^cread_physical: ; same entry, device is not mapped$/;"	l
cread_physical	src/second.S	/^cread_physical:		; same entry, device is not mapped$/;"	l
cread_physical	src/second.s	/^cread_physical: ; same entry, device is not mapped$/;"	l
cread_physical	src/third.s	/^cread_physical: ; same entry, device is not mapped$/;"	l
crlf	src/bitmap.s	/^crlf: mov al,#13 ; CR$/;"	l
crlf	src/chain.S	/^crlf:	.byte	13,10,0$/;"	l
crlf	src/dparam.S	/^crlf:	.byte	13,10$/;"	l
crlf	src/second.S	/^crlf:	mov	al,#13		; CR$/;"	l
crlf	src/second.s	/^crlf: mov al,#13 ; CR$/;"	l
crlf	src/third.s	/^crlf: mov al,#13 ; CR$/;"	l
crnul	src/bitmap.s	/^crnul:$/;"	l
crnul	src/second.S	/^crnul:$/;"	l
crnul	src/second.s	/^crnul:$/;"	l
crnul	src/third.s	/^crnul:$/;"	l
crshbrn	src/bitmap.s	/^crshbrn:$/;"	l
crshbrn	src/second.S	/^crshbrn:$/;"	l
crshbrn	src/second.s	/^crshbrn:$/;"	l
crshbrn	src/third.s	/^crshbrn:$/;"	l
crshbrn2	src/bitmap.s	/^crshbrn2: jne crshbrn$/;"	l
crshbrn2	src/second.S	/^crshbrn2: jne	crshbrn$/;"	l
crshbrn2	src/second.s	/^crshbrn2: jne crshbrn$/;"	l
crshbrn2	src/third.s	/^crshbrn2: jne crshbrn$/;"	l
crw1	src/bitmap.s	/^crw1:$/;"	l
crw1	src/second.S	/^crw1:$/;"	l
crw1	src/second.s	/^crw1:$/;"	l
crw1	src/third.s	/^crw1:$/;"	l
ctime	src/md-int.h	/^	md_u32 ctime;		\/*  6 Creation time			      *\/$/;"	m	struct:md_superblock_s
ctime	src/md-int.h	/^	md_u32 ctime;$/;"	m	struct:md_array_info_s
curr_drv_map	src/common.c	/^int curr_drv_map;$/;"	v
curr_prt_map	src/common.c	/^int curr_prt_map;$/;"	v
cvt_byte	src/partition.c	/^static unsigned char cvt_byte(const char *s)$/;"	f	file:
cwok	src/bitmap.s	/^cwok:$/;"	l
cwok	src/second.S	/^cwok:$/;"	l
cwok	src/second.s	/^cwok:$/;"	l
cwok	src/third.s	/^cwok:$/;"	l
cwr2	src/bitmap.s	/^cwr2: shr si,#1$/;"	l
cwr2	src/second.S	/^cwr2:	shr	si,#1$/;"	l
cwr2	src/second.s	/^cwr2: shr si,#1$/;"	l
cwr2	src/third.s	/^cwr2: shr si,#1$/;"	l
cwr3	src/bitmap.s	/^cwr3: inc dx$/;"	l
cwr3	src/second.S	/^cwr3:	inc	dx$/;"	l
cwr3	src/second.s	/^cwr3: inc dx$/;"	l
cwr3	src/third.s	/^cwr3: inc dx$/;"	l
cwr_cnt	src/bitmap.s	/^cwr_cnt: .byte 0 ; device code count$/;"	l
cwr_cnt	src/second.S	/^cwr_cnt:	.byte	0	; device code count$/;"	l
cwr_cnt	src/second.s	/^cwr_cnt: .byte 0 ; device code count$/;"	l
cwr_cnt	src/third.s	/^cwr_cnt: .byte 0 ; device code count$/;"	l
cwr_flags	src/bitmap.s	/^cwr_flags: .byte 0 ; saved flags$/;"	l
cwr_flags	src/second.S	/^cwr_flags:	.byte	0	; saved flags$/;"	l
cwr_flags	src/second.s	/^cwr_flags: .byte 0 ; saved flags$/;"	l
cwr_flags	src/third.s	/^cwr_flags: .byte 0 ; saved flags$/;"	l
cwrite	src/bitmap.s	/^cwrite:$/;"	l
cwrite	src/second.S	/^cwrite:$/;"	l
cwrite	src/second.s	/^cwrite:$/;"	l
cwrite	src/third.s	/^cwrite:$/;"	l
cwrm	src/bitmap.s	/^cwrm = 0x40|0x20|0x40|0x10|0X80$/;"	d
cwrm	src/second.S	/^cwrm = LINEAR_FLAG|LBA32_FLAG|LBA32_NOCOUNT|RAID_REL_FLAG|0X80$/;"	d
cwrm	src/second.s	/^cwrm = 0x40|0x20|0x40|0x10|0X80$/;"	d
cwrm	src/third.s	/^cwrm = 0x40|0x20|0x40|0x10|0X80$/;"	d
cx	diagnose/cprintf.c	/^test	cx,cx			! base < 0 ?$/;"	v
cx	src/probe.h	/^      unsigned short cx;$/;"	m	struct:Floppy::__anon47
cx	src/probe.h	/^      unsigned short cx;$/;"	m	struct:Floppy::__anon48
cx	src/probe.h	/^      unsigned short cx;$/;"	m	struct:Hard::__anon49
cx	src/probe.h	/^      unsigned short cx;$/;"	m	struct:Hard::__anon50
cx	src/probe.h	/^      unsigned short cx;$/;"	m	struct:Hard::__anon51
cx	src/probe.h	/^      unsigned short cx;$/;"	m	struct:Video25::__anon37
cyl	src/partition.h	/^	unsigned char cyl;		\/* starting cylinder *\/$/;"	m	struct:partition
cyl2	src/disk.S	/^cyl2:           xchg    ax,dx$/;"	l
cyl2	src/disk.s	/^cyl2:           xchg    ax,dx$/;"	l
cylinders	src/geometry.h	/^      unsigned short cylinders;$/;"	m	struct:hd_geometry
cylinders	src/geometry.h	/^    int cylinders,sectors;$/;"	m	struct:__anon6
cylinders	src/geometry.h	/^    int cylinders;$/;"	m	struct:_dt_entry
cylinders	src/probe.h	/^   unsigned int  cylinders;$/;"	m	struct:Edd
d	src/common.h	/^    unsigned char d;		\/* 38: padding *\/$/;"	m	struct:__anon23
d	src/common.h	/^    } d;$/;"	m	union:__anon18	typeref:struct:__anon18::__anon19
d	src/probe.c	/^      hard_t d;$/;"	m	struct:Buf::__anon53	file:
d4_EX175	src/bitmap.s	/^d4_EX175:$/;"	l
d4_EX175	src/display4.S	/^d4_EX175:$/;"	l
d4_EX519	src/bitmap.s	/^d4_EX519:$/;"	l
d4_EX519	src/display4.S	/^d4_EX519:$/;"	l
d4_F187	src/bitmap.s	/^d4_F187:$/;"	l
d4_F187	src/display4.S	/^d4_F187:$/;"	l
d4_F580	src/bitmap.s	/^d4_F580:$/;"	l
d4_F580	src/display4.S	/^d4_F580:$/;"	l
d4_F581	src/bitmap.s	/^d4_F581:$/;"	l
d4_F581	src/display4.S	/^d4_F581:$/;"	l
d4_FB591	src/bitmap.s	/^d4_FB591:$/;"	l
d4_FB591	src/display4.S	/^d4_FB591:$/;"	l
d4_FC185	src/bitmap.s	/^d4_FC185:$/;"	l
d4_FC185	src/display4.S	/^d4_FC185:$/;"	l
d4_FC527	src/bitmap.s	/^d4_FC527:$/;"	l
d4_FC527	src/display4.S	/^d4_FC527:$/;"	l
d4_FC544	src/bitmap.s	/^d4_FC544:$/;"	l
d4_FC544	src/display4.S	/^d4_FC544:$/;"	l
d4_FC563	src/bitmap.s	/^d4_FC563:$/;"	l
d4_FC563	src/display4.S	/^d4_FC563:$/;"	l
d4_FC566	src/bitmap.s	/^d4_FC566:$/;"	l
d4_FC566	src/display4.S	/^d4_FC566:$/;"	l
d4_FC581	src/bitmap.s	/^d4_FC581:$/;"	l
d4_FC581	src/display4.S	/^d4_FC581:$/;"	l
d4_FC582	src/bitmap.s	/^d4_FC582:$/;"	l
d4_FC582	src/display4.S	/^d4_FC582:$/;"	l
d4_FC586	src/bitmap.s	/^d4_FC586:$/;"	l
d4_FC586	src/display4.S	/^d4_FC586:$/;"	l
d4_FC587	src/bitmap.s	/^d4_FC587:$/;"	l
d4_FC587	src/display4.S	/^d4_FC587:$/;"	l
d4_FC590	src/bitmap.s	/^d4_FC590:$/;"	l
d4_FC590	src/display4.S	/^d4_FC590:$/;"	l
d4_FC594	src/bitmap.s	/^d4_FC594:$/;"	l
d4_FC594	src/display4.S	/^d4_FC594:$/;"	l
d4_FC598	src/bitmap.s	/^d4_FC598:$/;"	l
d4_FC598	src/display4.S	/^d4_FC598:$/;"	l
d4_I529	src/bitmap.s	/^d4_I529: ; rotated bits in the stack$/;"	l
d4_I529	src/display4.S	/^d4_I529:	; rotated bits in the stack$/;"	l
d4_I530	src/bitmap.s	/^d4_I530:$/;"	l
d4_I530	src/display4.S	/^d4_I530:$/;"	l
d4_I531	src/bitmap.s	/^d4_I531:$/;"	l
d4_I531	src/display4.S	/^d4_I531:$/;"	l
d4_I573	src/bitmap.s	/^d4_I573:$/;"	l
d4_I573	src/display4.S	/^d4_I573:$/;"	l
d4_I574	src/bitmap.s	/^d4_I574:$/;"	l
d4_I574	src/display4.S	/^d4_I574:$/;"	l
d4_I575	src/bitmap.s	/^d4_I575:$/;"	l
d4_I575	src/display4.S	/^d4_I575:$/;"	l
d4_I575a	src/bitmap.s	/^d4_I575a:$/;"	l
d4_I575a	src/display4.S	/^d4_I575a:$/;"	l
d4_I576	src/bitmap.s	/^d4_I576:$/;"	l
d4_I576	src/display4.S	/^d4_I576:$/;"	l
d4_I576_4	src/bitmap.s	/^d4_I576_4:$/;"	l
d4_I576_4	src/display4.S	/^d4_I576_4:$/;"	l
d4_I577	src/bitmap.s	/^d4_I577:$/;"	l
d4_I577	src/display4.S	/^d4_I577:$/;"	l
d4_I578	src/bitmap.s	/^d4_I578:$/;"	l
d4_I578	src/display4.S	/^d4_I578:$/;"	l
d4_I579	src/bitmap.s	/^d4_I579:$/;"	l
d4_I579	src/display4.S	/^d4_I579:$/;"	l
d4_I580	src/bitmap.s	/^d4_I580:$/;"	l
d4_I580	src/display4.S	/^d4_I580:$/;"	l
d4_I600	src/bitmap.s	/^d4_I600:$/;"	l
d4_I600	src/display4.S	/^d4_I600:$/;"	l
d4_I601	src/bitmap.s	/^d4_I601:$/;"	l
d4_I601	src/display4.S	/^d4_I601:$/;"	l
d4_J575	src/bitmap.s	/^d4_J575:$/;"	l
d4_J575	src/display4.S	/^d4_J575:$/;"	l
d4_K575	src/bitmap.s	/^d4_K575:$/;"	l
d4_K575	src/display4.S	/^d4_K575:$/;"	l
d4_L669	src/bitmap.s	/^d4_L669:$/;"	l
d4_L669	src/display4.S	/^d4_L669:$/;"	l
d4_L670	src/bitmap.s	/^d4_L670:$/;"	l
d4_L670	src/display4.S	/^d4_L670:$/;"	l
d4_L672	src/bitmap.s	/^d4_L672:$/;"	l
d4_L672	src/display4.S	/^d4_L672:$/;"	l
d4_L675	src/bitmap.s	/^d4_L675:$/;"	l
d4_L675	src/display4.S	/^d4_L675:$/;"	l
d4_L676	src/bitmap.s	/^d4_L676:$/;"	l
d4_L676	src/display4.S	/^d4_L676:$/;"	l
d4_L677	src/bitmap.s	/^d4_L677:$/;"	l
d4_L677	src/display4.S	/^d4_L677:$/;"	l
d4_L678	src/bitmap.s	/^d4_L678:$/;"	l
d4_L678	src/display4.S	/^d4_L678:$/;"	l
d4_Line_327	src/bitmap.s	/^d4_Line_327:$/;"	l
d4_Line_327	src/display4.S	/^d4_Line_327:$/;"	l
d4_SB497	src/bitmap.s	/^d4_SB497:$/;"	l
d4_SB497	src/display4.S	/^d4_SB497:$/;"	l
d4_SC502	src/bitmap.s	/^d4_SC502:$/;"	l
d4_SC502	src/display4.S	/^d4_SC502:$/;"	l
d4_SC503	src/bitmap.s	/^d4_SC503:$/;"	l
d4_SC503	src/display4.S	/^d4_SC503:$/;"	l
d4_Vesa_Palette	src/bitmap.s	/^d4_Vesa_Palette:$/;"	l
d4_Vesa_Palette	src/display4.S	/^d4_Vesa_Palette:$/;"	l
d4_Vesa_Setup	src/bitmap.s	/^d4_Vesa_Setup:$/;"	l
d4_Vesa_Setup	src/display4.S	/^d4_Vesa_Setup:$/;"	l
d4_char10	src/bitmap.s	/^d4_char10:$/;"	l
d4_char10	src/display4.S	/^d4_char10:$/;"	l
d4_char256	src/bitmap.s	/^d4_char256:$/;"	l
d4_char256	src/display4.S	/^d4_char256:$/;"	l
d4_char256_10	src/bitmap.s	/^d4_char256_10:$/;"	l
d4_char256_10	src/display4.S	/^d4_char256_10:$/;"	l
d4_char256_20	src/bitmap.s	/^d4_char256_20:$/;"	l
d4_char256_20	src/display4.S	/^d4_char256_20:$/;"	l
d4_char256_22	src/bitmap.s	/^d4_char256_22:$/;"	l
d4_char256_22	src/display4.S	/^d4_char256_22:$/;"	l
d4_char256_31	src/bitmap.s	/^d4_char256_31:$/;"	l
d4_char256_31	src/display4.S	/^d4_char256_31:$/;"	l
d4_char256_33	src/bitmap.s	/^d4_char256_33:$/;"	l
d4_char256_33	src/display4.S	/^d4_char256_33:$/;"	l
d4_char256_35	src/bitmap.s	/^d4_char256_35:$/;"	l
d4_char256_35	src/display4.S	/^d4_char256_35:$/;"	l
d4_char256_39	src/bitmap.s	/^d4_char256_39:$/;"	l
d4_char256_39	src/display4.S	/^d4_char256_39:$/;"	l
d4_char256_exit	src/bitmap.s	/^d4_char256_exit:$/;"	l
d4_char256_exit	src/display4.S	/^d4_char256_exit:$/;"	l
d4_get8_1	src/bitmap.s	/^d4_get8_1:$/;"	l
d4_get8_1	src/display4.S	/^d4_get8_1:$/;"	l
d4_get8_10	src/bitmap.s	/^d4_get8_10:$/;"	l
d4_get8_10	src/display4.S	/^d4_get8_10:$/;"	l
d4_get8_20	src/bitmap.s	/^d4_get8_20:$/;"	l
d4_get8_20	src/display4.S	/^d4_get8_20:$/;"	l
d4_get8_30	src/bitmap.s	/^d4_get8_30:$/;"	l
d4_get8_30	src/display4.S	/^d4_get8_30:$/;"	l
d4_get8_40	src/bitmap.s	/^d4_get8_40:$/;"	l
d4_get8_40	src/display4.S	/^d4_get8_40:$/;"	l
d4_get8_70	src/bitmap.s	/^d4_get8_70:$/;"	l
d4_get8_70	src/display4.S	/^d4_get8_70:$/;"	l
d4_get8_75	src/bitmap.s	/^d4_get8_75:$/;"	l
d4_get8_75	src/display4.S	/^d4_get8_75:$/;"	l
d4_get8_80	src/bitmap.s	/^d4_get8_80:$/;"	l
d4_get8_80	src/display4.S	/^d4_get8_80:$/;"	l
d4_get8_95	src/bitmap.s	/^d4_get8_95:$/;"	l
d4_get8_95	src/display4.S	/^d4_get8_95:$/;"	l
d4_get8_99	src/bitmap.s	/^d4_get8_99:$/;"	l
d4_get8_99	src/display4.S	/^d4_get8_99:$/;"	l
d4_get8_exit	src/bitmap.s	/^d4_get8_exit:$/;"	l
d4_get8_exit	src/display4.S	/^d4_get8_exit:$/;"	l
d4_get8_nloop	src/bitmap.s	/^d4_get8_nloop:$/;"	l
d4_get8_nloop	src/display4.S	/^d4_get8_nloop:$/;"	l
d4_get8_nocompr	src/bitmap.s	/^d4_get8_nocompr:$/;"	l
d4_get8_nocompr	src/display4.S	/^d4_get8_nocompr:$/;"	l
d4_getrow4	src/bitmap.s	/^d4_getrow4:$/;"	l
d4_getrow4	src/display4.S	/^d4_getrow4:$/;"	l
d4_getrow8	src/bitmap.s	/^d4_getrow8:$/;"	l
d4_getrow8	src/display4.S	/^d4_getrow8:$/;"	l
d4_pixadr8	src/bitmap.s	/^d4_pixadr8:$/;"	l
d4_pixadr8	src/display4.S	/^d4_pixadr8:$/;"	l
d4_putrow4	src/bitmap.s	/^d4_putrow4:$/;"	l
d4_putrow4	src/display4.S	/^d4_putrow4:$/;"	l
d4_putrow8	src/bitmap.s	/^d4_putrow8:$/;"	l
d4_putrow8	src/display4.S	/^d4_putrow8:$/;"	l
d4_setstate	src/bitmap.s	/^d4_setstate:$/;"	l
d4_setstate	src/display4.S	/^d4_setstate:$/;"	l
d4_tCont	src/bitmap.s	/^d4_tCont:$/;"	l
d4_tCont	src/display4.S	/^d4_tCont:$/;"	l
d4_tVga	src/bitmap.s	/^d4_tVga:$/;"	l
d4_tVga	src/display4.S	/^d4_tVga:$/;"	l
d4p8_1	src/bitmap.s	/^d4p8_1:$/;"	l
d4p8_1	src/display4.S	/^d4p8_1:$/;"	l
d4p8_2	src/bitmap.s	/^d4p8_2:$/;"	l
d4p8_2	src/display4.S	/^d4p8_2:$/;"	l
d4p8_3	src/bitmap.s	/^d4p8_3:$/;"	l
d4p8_3	src/display4.S	/^d4p8_3:$/;"	l
d_addr	src/first.S	/^d_addr:	.long	0		! disk addr of second stage index sector$/;"	l
d_addr	src/first.s	/^d_addr: .long 0 ! disk addr of second stage index sector$/;"	l
d_dev	src/first.S	/^d_dev:	.byte	0x80		! map file device code$/;"	l
d_dev	src/first.s	/^d_dev: .byte 0x80 ! map file device code$/;"	l
d_flag	src/first.S	/^d_flag:	.byte	0		! disk addressing flags$/;"	l
d_flag	src/first.s	/^d_flag: .byte 0 ! disk addressing flags$/;"	l
daddr	src/mbr.S	/^daddr:	.long	0		! low order disk address$/;"	l
daddr	src/mbr.s	/^daddr:	.long	0		! low order disk address$/;"	l
daddr	src/mbr2.s	/^daddr:	.long	0		! low order disk address$/;"	l
dat_file_creat	src/edit.c	/^static void dat_file_creat(char *bmp)$/;"	f	file:
data	src/cfg.h	/^    void *data;$/;"	m	struct:__anon33
data	src/common.h	/^    unsigned char data[1];$/;"	m	struct:__anon21
dataBase	diagnose/sector.S	/^dataBase:	.blkw	2	; DO NOT MOVE$/;"	l
dclok	src/bitmap.s	/^dclok: mov bx,#Dflcmd ; fallback data present ?$/;"	l
dclok	src/second.S	/^dclok:	mov	bx,#DFLCMD	; fallback data present ?$/;"	l
dclok	src/second.s	/^dclok: mov bx,#Dflcmd ; fallback data present ?$/;"	l
dclok	src/third.s	/^dclok: mov bx,#Dflcmd ; fallback data present ?$/;"	l
dcyl	src/disk.S	/^dcyl:           dd      0$/;"	d
dcyl	src/disk.s	/^dcyl:           dd      0$/;"	d
dec	src/bitmap.S	/^	dec	dx$/;"	d
dec	src/bitmap.s	/^  dec di$/;"	d
dec	src/bitmap.s	/^ dec di ; discard it$/;"	d
dec	src/bitmap.s	/^ dec di$/;"	d
dec	src/bitmap.s	/^ dec dl$/;"	d
dec	src/bitmap.s	/^ dec dx$/;"	d
dec	src/crt.S	/^	dec	di$/;"	d
dec	src/crt.S	/^	dec	dx$/;"	d
dec	src/menu.S	/^	dec	dh$/;"	d
dec	src/menu.S	/^	dec	dl$/;"	d
dec	src/second.S	/^		dec	di$/;"	d
dec	src/second.S	/^	dec	dh		; back up first of two lines$/;"	d
dec	src/second.S	/^	dec	dh$/;"	d
dec	src/second.S	/^	dec	di		; discard it$/;"	d
dec	src/second.S	/^	dec	di$/;"	d
dec	src/second.S	/^	dec	dl$/;"	d
dec	src/second.s	/^  dec di$/;"	d
dec	src/second.s	/^ dec di ; discard it$/;"	d
dec	src/second.s	/^ dec di$/;"	d
dec	src/second.s	/^ dec dl$/;"	d
dec	src/third.s	/^  dec di$/;"	d
dec	src/third.s	/^ dec dh ; back up first of two lines$/;"	d
dec	src/third.s	/^ dec dh$/;"	d
dec	src/third.s	/^ dec di ; discard it$/;"	d
dec	src/third.s	/^ dec di$/;"	d
dec	src/third.s	/^ dec dl$/;"	d
dec	src/third.s	/^ dec dx$/;"	d
dec3	src/disk.S	/^dec3:           push    bx$/;"	l
dec3	src/disk.s	/^dec3:           push    bx$/;"	l
dec32	src/disk.S	/^dec32:          div     bl$/;"	l
dec32	src/disk.s	/^dec32:          div     bl$/;"	l
dec34	src/disk.S	/^dec34:          add     al,#'0$/;"	l
dec34	src/disk.s	/^dec34:          add     al,#'0$/;"	l
dec36	src/disk.S	/^dec36:          mov     al,ah$/;"	l
dec36	src/disk.s	/^dec36:          mov     al,ah$/;"	l
decbuf	src/dparam.S	/^decbuf:	.byte	0,0,0,0,0$/;"	l
decend	src/dparam.S	/^decend:	.ascii	"$"$/;"	l
decimal	diagnose/test4.c	/^void decimal(unsigned long value)$/;"	f	file:
decimal	diagnose/test5.c	/^void decimal(unsigned long value)$/;"	f	file:
declp	src/dparam.S	/^declp:	xor	dx,dx			! divide by 10$/;"	l
decout	src/dparam.S	/^decout:	mov	bx,#decend		! set the pointer to the end$/;"	l
delay	src/bitmap.s	/^delay: .word 0 ; boot delay$/;"	l
delay	src/common.h	/^;*\/    unsigned short delay; \/* delay: wait that many 54 msec units.$/;"	m	struct:__anon13
delay	src/second.S	/^delay:	.word	0		; boot delay$/;"	l
delay	src/second.s	/^delay: .word 0 ; boot delay$/;"	l
delay	src/third.s	/^delay: .word 0 ; boot delay$/;"	l
delay1	src/bitmap.s	/^delay1: test byte ptr timeout,#-1$/;"	l
delay1	src/second.S	/^delay1:	test	byte ptr timeout,#-1$/;"	l
delay1	src/second.s	/^delay1: test byte ptr timeout,#-1$/;"	l
delay1	src/third.s	/^delay1: test byte ptr timeout,#-1$/;"	l
delayed	src/chain.S	/^delayed:$/;"	l
delch	src/bitmap.s	/^delch: cmp bx,#cmdline ; at the beginning ?$/;"	l
delch	src/second.S	/^delch:	cmp	bx,#cmdline	; at the beginning ?$/;"	l
delch	src/second.s	/^delch: cmp bx,#cmdline ; at the beginning ?$/;"	l
delch	src/third.s	/^delch: cmp bx,#cmdline ; at the beginning ?$/;"	l
delch6	src/bitmap.s	/^delch6:$/;"	l
delch6	src/second.S	/^delch6:$/;"	l
delch6	src/third.s	/^delch6:$/;"	l
delch9	src/bitmap.s	/^delch9:$/;"	l
delch9	src/second.S	/^delch9:$/;"	l
delch9	src/third.s	/^delch9:$/;"	l
delline	src/bitmap.s	/^delline:$/;"	l
delline	src/second.S	/^delline:$/;"	l
delline	src/second.s	/^delline:$/;"	l
delline	src/third.s	/^delline:$/;"	l
derror	src/dparam.S	/^derror:	mov	dx,#invdrv		! display the error message$/;"	l
descr	src/common.h	/^	IMAGE_DESCR descr[MAX_IMAGES]; \/* boot file descriptors *\/$/;"	m	struct:__anon18::__anon19
descr_more	src/bitmap.s	/^descr_more:$/;"	l
descr_more	src/second.S	/^descr_more:$/;"	l
descr_more	src/second.s	/^descr_more:$/;"	l
descr_more	src/third.s	/^descr_more:$/;"	l
descriptor	src/md-int.h	/^	md_descriptor_t descriptor;$/;"	m	struct:md_superblock_s
descrs	src/bsect.c	/^static DESCR_SECTORS descrs;$/;"	v	file:
dev	src/bsect.c	/^static DEVICE dev;$/;"	v	file:
dev	src/geometry.c	/^    __u32 dev;$/;"	m	struct:evms_get_bmap_t	file:
dev	src/geometry.h	/^    dev_t dev, base_dev; \/* real device if remapping (LVM, etc) *\/$/;"	m	struct:__anon6
dev	src/probe.c	/^static char dev[] = "<device>";$/;"	v	file:
dev_close	src/device.c	/^void dev_close(DEVICE *dev)$/;"	f
dev_listed	src/device.c	/^static int dev_listed(unsigned short dev)$/;"	f	file:
dev_number	src/bsect.c	/^static int dev_number(char *dev)$/;"	f	file:
dev_open	src/device.c	/^int dev_open(DEVICE *dev,int number,int flags)$/;"	f
device	diagnose/test5.c	/^    int dirty, device;$/;"	m	struct:Buffer	file:
device	src/common.h	/^    unsigned char device, flags;$/;"	m	struct:__anon22
device	src/common.h	/^;*\/    unsigned char device,head; \/* DX$/;"	m	struct:__anon8
device	src/device.c	/^    unsigned int device;	\/* the device number (major, minor) *\/$/;"	m	struct:VolumeMgmt	file:
device	src/geometry.c	/^    int device;$/;"	m	struct:_dm_table	file:
device	src/geometry.c	/^    int device;$/;"	m	struct:_dm_target	file:
device	src/geometry.h	/^    int device,heads;$/;"	m	struct:__anon6
device	src/geometry.h	/^    unsigned int device;$/;"	m	struct:_dt_entry
device	src/raid.c	/^static int device;$/;"	v	file:
device_code	src/device.c	/^static int device_code[MAX_BIOS_DEVICES];$/;"	v	file:
devmap	src/bitmap.s	/^devmap = *$/;"	d
devmap	src/chain.S	/^devmap:	.word	0,0			! device map filled in by second.S$/;"	l
devmap	src/chain.s	/^devmap: .word 0,0 ! device map filled in by second.S$/;"	l
devmap	src/second.s	/^devmap = *$/;"	d
devmap	src/third.s	/^devmap = *$/;"	d
devmap	src/volume.S	/^devmap	=	*$/;"	d
devmap	src/volume.S	/^devmap:	.blkw	MAX_BIOS_DEVICES+2	; device code map$/;"	l
dflags	src/disk.S	/^dflags:         .word      0$/;"	l
dflags	src/disk.s	/^dflags:         .word      0$/;"	l
dflcmd	src/common.h	/^;*\/	SECTOR_ADDR dflcmd; \/* default command line$/;"	m	struct:__anon15
dflt	src/identify.c	/^static char *first, *dflt;$/;"	v	file:
dh	src/probe.c	/^static unsigned char dl,dh;$/;"	v	file:
dhead	src/disk.S	/^dhead:          dd      0$/;"	d
dhead	src/disk.s	/^dhead:          dd      0$/;"	d
di	src/probe.h	/^      unsigned short di;$/;"	m	struct:Floppy::__anon48
die	src/bootsect.S	/^die:	jne die			! es must be at 64kB boundary$/;"	l
die	src/bootsect.s	/^die:	jne die			! es must be at 64kB boundary$/;"	l
die	src/common.c	/^\/*volatile*\/ void __attribute__ ((format (printf, 1, 2))) die(const char *fmt,...)$/;"	f
digest	src/shs2.h	/^   LONG digest[5];         \/* message digest *\/$/;"	m	struct:__anon7
dimage	src/bitmap.S	/^dimage:	dw	0	; default image$/;"	d
dimage	src/bitmap.s	/^dimage: dw 0 ; default image$/;"	d
dimage	src/crt.S	/^dimage:	dw	0	; default image$/;"	d
dimage	src/third.s	/^dimage: dw 0 ; default image$/;"	d
dirBase	diagnose/sector.S	/^dirBase:	.blkw	2$/;"	l
dir_Reserved	diagnose/sector.S	/^dir_Reserved:		.blkb	10$/;"	l
dir_attribute	diagnose/sector.S	/^dir_attribute:		.blkb	1$/;"	l
dir_cluster	diagnose/sector.S	/^dir_cluster:		.blkw	1$/;"	l
dir_date_updated	diagnose/sector.S	/^dir_date_updated:	.blkw	1$/;"	l
dir_entry_size	diagnose/sector.S	/^dir_entry_size:$/;"	l
dir_file_size	diagnose/sector.S	/^dir_file_size:		.blkw	2$/;"	l
dir_filename	diagnose/sector.S	/^dir_filename:		.blkb	8$/;"	l
dir_filename_ext	diagnose/sector.S	/^dir_filename_ext:	.blkb	3$/;"	l
dir_time_updated	diagnose/sector.S	/^dir_time_updated:	.blkw	1$/;"	l
directory_entries	diagnose/sector.S	/^directory_entries:	dw	224       ; 112 & 224 are typical$/;"	d
dirscan	diagnose/sector.S	/^dirscan:$/;"	l
dirscan1	diagnose/sector.S	/^dirscan1:$/;"	l
dirty	diagnose/test5.c	/^    int dirty, device;$/;"	m	struct:Buffer	file:
dirty	src/chain.S	/^dirty:	.byte	0$/;"	l
dirty	src/chain.s	/^dirty: .byte 0$/;"	l
dirty	src/probe.c	/^static int dirty = -1;	\/* buffer is unread *\/$/;"	v	file:
disk	src/probe.c	/^      unsigned char disk;	\/* device code of last good disk *\/$/;"	m	struct:Buf::__anon53	file:
disk	src/probe.c	/^      unsigned char disk;	\/* device code of last good disk *\/$/;"	m	struct:Buf::__anon54	file:
disk	src/raid.c	/^static DT_ENTRY *disk;$/;"	v	file:
diskNumber	diagnose/sector.S	/^diskNumber:	.blkb	1	; DO NOT MOVE$/;"	l
disk_convert	src/first.S	/^disk_convert:$/;"	l
disk_convert	src/first.s	/^disk_convert:$/;"	l
disk_convert	src/mbr.S	/^disk_convert:$/;"	l
disk_convert	src/mbr.s	/^disk_convert:$/;"	l
disk_convert	src/mbr2.s	/^disk_convert:$/;"	l
disk_data	diagnose/test5.c	/^void disk_data(int bios)$/;"	f
disk_edd	src/first.S	/^disk_edd:$/;"	l
disk_edd	src/first.s	/^disk_edd:$/;"	l
disk_error	src/mbr.S	/^disk_error:$/;"	l
disk_error	src/mbr.s	/^disk_error:$/;"	l
disk_error	src/mbr2.s	/^disk_error:$/;"	l
disk_error0	src/mbr.S	/^disk_error0:$/;"	l
disk_error0	src/mbr.s	/^disk_error0:$/;"	l
disk_error0	src/mbr2.s	/^disk_error0:$/;"	l
disk_error1	src/mbr.S	/^disk_error1:$/;"	l
disk_error1	src/mbr.s	/^disk_error1:$/;"	l
disk_error1	src/mbr2.s	/^disk_error1:$/;"	l
disk_error12	src/mbr.S	/^disk_error12:$/;"	l
disk_error12	src/mbr.s	/^disk_error12:$/;"	l
disk_error12	src/mbr2.s	/^disk_error12:$/;"	l
disk_error2	src/first.S	/^disk_error2:$/;"	l
disk_error2	src/first.s	/^disk_error2:$/;"	l
disk_error2	src/mbr.S	/^disk_error2:$/;"	l
disk_error2	src/mbr.s	/^disk_error2:$/;"	l
disk_error2	src/mbr2.s	/^disk_error2:$/;"	l
disk_error3	src/first.S	/^disk_error3:			! transfer through on CF=1$/;"	l
disk_error3	src/first.s	/^disk_error3: ! transfer through on CF=1$/;"	l
disk_geom	src/probe.h	/^struct disk_geom {$/;"	s
disk_geometric	src/first.S	/^disk_geometric:		! CHS방식으로 1섹터를 읽어온다.$/;"	l
disk_geometric	src/first.s	/^disk_geometric: ! CHS방식으로 1섹터를 읽어온다.$/;"	l
disk_int13	src/first.S	/^disk_int13:		! int 13h를 두번 시도해본다$/;"	l
disk_int13	src/first.s	/^disk_int13: ! int 13h를 두번 시도해본다$/;"	l
disk_int13	src/mbr.S	/^disk_int13:$/;"	l
disk_int13	src/mbr.s	/^disk_int13:$/;"	l
disk_int13	src/mbr2.s	/^disk_int13:$/;"	l
disk_okay	src/first.S	/^disk_okay:	! 디스크 읽기가 성공적이면 스택을 복원$/;"	l
disk_okay	src/first.s	/^disk_okay: ! 디스크 읽기가 성공적이면 스택을 복원$/;"	l
disk_read	src/first.S	/^disk_read:$/;"	l
disk_read	src/first.s	/^disk_read:$/;"	l
disk_read	src/mbr.S	/^disk_read:$/;"	l
disk_read	src/mbr.s	/^disk_read:$/;"	l
disk_read	src/mbr2.s	/^disk_read:$/;"	l
disk_read2	src/first.S	/^disk_read2:$/;"	l
disk_read2	src/first.s	/^disk_read2:$/;"	l
disk_ret	src/mbr.S	/^disk_ret:$/;"	l
disk_ret	src/mbr.s	/^disk_ret:$/;"	l
disk_ret	src/mbr2.s	/^disk_ret:$/;"	l
disk_retry	src/first.S	/^disk_retry:$/;"	l
disk_retry	src/first.s	/^disk_retry:$/;"	l
disk_retry	src/mbr.S	/^disk_retry:$/;"	l
disk_retry	src/mbr.s	/^disk_retry:$/;"	l
disk_retry	src/mbr2.s	/^disk_retry:$/;"	l
disk_rw0	diagnose/test5.c	/^int disk_rw0(int bios, int rw, void *buffer)$/;"	f	file:
disks	src/md-int.h	/^	md_descriptor_t disks[MD_SB_DISKS];$/;"	m	struct:md_superblock_s
disksizes	src/bootsect.S	/^disksizes:$/;"	l
disksizes	src/bootsect.s	/^disksizes:$/;"	l
disktab	src/geometry.c	/^DT_ENTRY *disktab = NULL;$/;"	v
dispit	src/dparam.S	/^dispit:	mov	ah,#9$/;"	l
display	src/bitmap.s	/^display:$/;"	l
display	src/first.S	/^display:$/;"	l
display	src/first.s	/^display:$/;"	l
display	src/second.S	/^display:$/;"	l
display	src/second.s	/^display:$/;"	l
display	src/third.s	/^display:$/;"	l
display0	src/first.S	/^display0:$/;"	l
display0	src/first.s	/^display0:$/;"	l
dispret	src/bitmap.s	/^dispret:$/;"	l
dispret	src/second.S	/^dispret:$/;"	l
dispret	src/second.s	/^dispret:$/;"	l
dispret	src/third.s	/^dispret:$/;"	l
div	src/bitmap.S	/^	div	dl			$/;"	d
div	src/bitmap.s	/^ div dl$/;"	d
div	src/crt.S	/^	div	dl			$/;"	d
div	src/disk.S	/^                div     di$/;"	d
div	src/disk.s	/^                div     di$/;"	d
div	src/third.s	/^ div dl$/;"	d
divisor	src/bitmap.s	/^divisor:$/;"	l
divisor	src/second.S	/^divisor:$/;"	l
divisor	src/second.s	/^divisor:$/;"	l
divisor	src/third.s	/^divisor:$/;"	l
dl	src/probe.c	/^static unsigned char dl,dh;$/;"	v	file:
dlth	src/disk.S	/^dlth            =     dlthe-dparam$/;"	d
dlth	src/disk.s	/^dlth            =     dlthe-dparam$/;"	d
dlthe	src/disk.S	/^dlthe:$/;"	l
dlthe	src/disk.s	/^dlthe:$/;"	l
dm_major_list	src/geometry.c	/^int dm_major_list[16];$/;"	v
dm_major_nr	src/geometry.c	/^int dm_major_nr;$/;"	v
dm_version_nr	src/geometry.c	/^int dm_version_nr = 0;$/;"	v
dmtab	src/geometry.c	/^DM_TABLE *dmtab = NULL;$/;"	v
do_activate	src/partition.c	/^void do_activate(char *part, char *which)$/;"	f
do_bios	src/probe.c	/^void do_bios(void)$/;"	f
do_bitmap	src/probe.c	/^static void do_bitmap(char *file)$/;"	f	file:
do_bitmap_edit	src/edit.c	/^void do_bitmap_edit(char *filename)$/;"	f
do_change	src/partition.c	/^void do_change(void)$/;"	f
do_cr	src/partition.c	/^void do_cr(void)$/;"	f
do_cr_auto	src/partition.c	/^void do_cr_auto(void)$/;"	f
do_cr_part	src/partition.c	/^void do_cr_part(void)$/;"	f
do_cr_pr	src/probe.c	/^static void do_cr_pr(void)$/;"	f	file:
do_cr_reset	src/partition.c	/^void do_cr_reset(void)$/;"	f
do_cr_type	src/partition.c	/^void do_cr_type(void)$/;"	f
do_disk	diagnose/test4.c	/^int do_disk(int dev)$/;"	f	file:
do_disk	src/geometry.c	/^void do_disk(void)$/;"	f
do_ebda	src/probe.c	/^static void do_ebda(void)$/;"	f	file:
do_edd	diagnose/test4.c	/^void do_edd(int dev)$/;"	f	file:
do_geom	src/probe.c	/^static void do_geom(char *bios)$/;"	f	file:
do_geom_all	src/probe.c	/^static void do_geom_all(void)$/;"	f	file:
do_get_pt	diagnose/test4.c	/^void do_get_pt(int dev)$/;"	f	file:
do_help	src/probe.c	/^static void do_help(void)$/;"	f	file:
do_identify	src/identify.c	/^static void do_identify(char *var,char type)$/;"	f	file:
do_image	src/bsect.c	/^void do_image(void)$/;"	f
do_install_mbr	src/partition.c	/^void do_install_mbr(char *part, char *what)$/;"	f
do_map_drive	src/boot.c	/^void do_map_drive(void)$/;"	f
do_md_install	src/common.c	/^int boot_dev_nr, raid_index, do_md_install;$/;"	v
do_md_install	src/raid.c	/^int do_md_install, ndisk, md_bios;$/;"	v
do_md_install	src/raid.h	/^int do_md_install, ndisk, md_bios;$/;"	v
do_other	src/bsect.c	/^void do_other(void)$/;"	f
do_partition	src/geometry.c	/^void do_partition(void)$/;"	f
do_rw	diagnose/test4.c	/^int do_rw(int tries)$/;"	f	file:
do_table	src/probe.c	/^static void do_table(char *part)$/;"	f	file:
do_vesa	diagnose/test4.c	/^void do_vesa(void)$/;"	f	file:
do_video	src/probe.c	/^void do_video(void)$/;"	f
do_volid	src/probe.c	/^static void do_volid(void)$/;"	f	file:
doboot	src/bitmap.s	/^doboot: mov byte ptr prechr,#61 ; switch to equal sign$/;"	l
doboot	src/second.S	/^doboot:	mov	byte ptr prechr,#61 ; switch to equal sign$/;"	l
doboot	src/second.s	/^doboot: mov byte ptr prechr,#61 ; switch to equal sign$/;"	l
doboot	src/third.s	/^doboot: mov byte ptr prechr,#61 ; switch to equal sign$/;"	l
dokay	src/bitmap.s	/^dokay: mov bx,#ospc ; display 'O '$/;"	l
dokay	src/second.S	/^dokay:	mov	bx,#ospc	; display 'O '$/;"	l
dokay	src/second.s	/^dokay: mov bx,#ospc ; display 'O '$/;"	l
dokay	src/third.s	/^dokay: mov bx,#ospc ; display 'O '$/;"	l
doload	src/bitmap.s	/^doload: pop bx ; restore ES:BX$/;"	l
doload	src/second.S	/^doload:	pop	bx		; restore ES:BX$/;"	l
doload	src/second.s	/^doload: pop bx ; restore ES:BX$/;"	l
doload	src/third.s	/^doload: pop bx ; restore ES:BX$/;"	l
dolock	src/bitmap.s	/^dolock: .byte 0$/;"	l
dolock	src/second.S	/^dolock:	.byte	0$/;"	l
dolock	src/second.s	/^dolock: .byte 0$/;"	l
dolock	src/third.s	/^dolock: .byte 0$/;"	l
domerge	src/chain.S	/^domerge:$/;"	l
domerge	src/chain.s	/^domerge:$/;"	l
done	diagnose/sector.S	/^done:$/;"	l
done	src/first.S	/^done:$/;"	l
done	src/first.s	/^done:$/;"	l
done13	src/chain.s	/^done13: mov ax,4(bp) ! restore AX$/;"	l
done13	src/mapper.S	/^done13:	mov	ax,4(bp)	! restore AX$/;"	l
done_search	src/first.S	/^done_search:	$/;"	l
done_search	src/first.s	/^done_search:$/;"	l
dopw	src/bitmap.s	/^dopw:$/;"	l
dopw	src/second.S	/^dopw:$/;"	l
dopw	src/second.s	/^dopw:$/;"	l
dopw	src/third.s	/^dopw:$/;"	l
dos4	src/chain.S	/^dos4:$/;"	l
dos4	src/chain.s	/^dos4:$/;"	l
dout	src/first.S	/^dout:	pushad$/;"	l
dout	src/mbr.S	/^dout:	push	ax		! save low half$/;"	l
dout	src/second.S	/^dout:	push	bp$/;"	l
dowrap	src/bitmap.s	/^dowrap: mov ax,es ; move ES$/;"	l
dowrap	src/second.S	/^dowrap:	mov	ax,es		; move ES$/;"	l
dowrap	src/second.s	/^dowrap: mov ax,es ; move ES$/;"	l
dowrap	src/third.s	/^dowrap: mov ax,es ; move ES$/;"	l
dparam	src/disk.S	/^dparam:         .word      dlth$/;"	l
dparam	src/disk.s	/^dparam:         .word      dlth$/;"	l
dpr1	src/disk.S	/^dpr1:           inc     bx$/;"	l
dpr1	src/disk.s	/^dpr1:           inc     bx$/;"	l
dpr2	src/disk.S	/^dpr2:           mov     al,#',$/;"	l
dpr2	src/disk.s	/^dpr2:           mov     al,#',$/;"	l
dpr3	src/disk.S	/^dpr3:           pop     ax$/;"	l
dpr3	src/disk.s	/^dpr3:           pop     ax$/;"	l
dpr5	src/disk.S	/^dpr5:           mov     ax,#2$/;"	l
dpr5	src/disk.s	/^dpr5:           mov     ax,#2$/;"	l
dpr6	src/disk.S	/^dpr6:           mov     ax,#1000$/;"	l
dpr6	src/disk.s	/^dpr6:           mov     ax,#1000$/;"	l
dpr7	src/disk.S	/^dpr7:           lea     bx,(bx+1)$/;"	l
dpr7	src/disk.s	/^dpr7:           lea     bx,(bx+1)$/;"	l
dpr8	src/disk.S	/^dpr8:           mov     al,(si)$/;"	l
dpr8	src/disk.s	/^dpr8:           mov     al,(si)$/;"	l
dprint	src/disk.S	/^dprint:         push    ax$/;"	l
dprint	src/disk.s	/^dprint:         push    ax$/;"	l
dptp	src/disk.S	/^dptp:           dd      0$/;"	d
dptp	src/disk.s	/^dptp:           dd      0$/;"	d
drain	src/bitmap.s	/^drain: in al,dx$/;"	l
drain	src/second.S	/^drain:	in	al,dx$/;"	l
drain	src/second.s	/^drain: in al,dx$/;"	l
drain	src/third.s	/^drain: in al,dx$/;"	l
drd_use_eax	src/second.S	/^drd_use_eax:$/;"	l
drive	src/chain.S	/^drive:	.byte	0			! drive, 0x80, 0x81$/;"	l
drive	src/chain.s	/^drive: .byte 0 ! drive, 0x80, 0x81$/;"	l
drive	src/common.h	/^;*\/    unsigned char drive; \/* BIOS drive code$/;"	m	struct:__anon14
drive	src/disk.S	/^drive:          push    bp$/;"	l
drive	src/disk.s	/^drive:          push    bp$/;"	l
drive_map_merge	src/chain.S	/^drive_map_merge:$/;"	l
drive_map_merge	src/chain.s	/^drive_map_merge:$/;"	l
drkbd	src/bitmap.s	/^drkbd: mov ah,#1 ; is a key pressed ?$/;"	l
drkbd	src/second.S	/^drkbd:	mov	ah,#1		; is a key pressed ?$/;"	l
drkbd	src/second.s	/^drkbd: mov ah,#1 ; is a key pressed ?$/;"	l
drkbd	src/third.s	/^drkbd: mov ah,#1 ; is a key pressed ?$/;"	l
drv_map	src/common.c	/^unsigned short drv_map[DRVMAP_SIZE+1]; \/* fixup maps ... *\/$/;"	v
drvmap	src/bitmap.s	/^drvmap:$/;"	l
drvmap	src/chain.s	/^drvmap: .blkw 24 +1$/;"	l
drvmap	src/common.h	/^;*\/    unsigned short drvmap; \/* offset of drive map$/;"	m	struct:__anon14
drvmap	src/mapper.S	/^drvmap:	.blkw	DRVMAP_SIZE+1$/;"	l
drvmap	src/mapper.S	/^drvmap:$/;"	l
drvmap	src/second.s	/^drvmap:$/;"	l
drvmap	src/third.s	/^drvmap:$/;"	l
dsec	src/disk.S	/^dsec:           dd      0$/;"	d
dsec	src/disk.s	/^dsec:           dd      0$/;"	d
dsecs	src/disk.S	/^dsecs:          dd      0,0$/;"	d
dsecs	src/disk.s	/^dsecs:          dd      0,0$/;"	d
dsector	diagnose/test5.c	/^	dword dsector[SECTOR_SIZE\/4];$/;"	m	union:Buffer::__anon57	file:
dsk_do_int13	src/bitmap.s	/^dsk_do_int13:$/;"	l
dsk_do_int13	src/disk.s	/^dsk_do_int13:$/;"	l
dsk_do_int13	src/read.S	/^dsk_do_int13:$/;"	l
dsk_do_int13	src/second.s	/^dsk_do_int13:$/;"	l
dsk_do_int13	src/third.s	/^dsk_do_int13:$/;"	l
dsk_do_int13a	src/bitmap.s	/^dsk_do_int13a: pusha$/;"	l
dsk_do_int13a	src/disk.s	/^dsk_do_int13a:  pusha$/;"	l
dsk_do_int13a	src/read.S	/^dsk_do_int13a:  pusha$/;"	l
dsk_do_int13a	src/second.s	/^dsk_do_int13a: pusha$/;"	l
dsk_do_int13a	src/third.s	/^dsk_do_int13a: pusha$/;"	l
dsk_do_rw	src/bitmap.s	/^dsk_do_rw: or ah,#0 ; 0=read, 1=write, 2=read-only test$/;"	l
dsk_do_rw	src/disk.s	/^dsk_do_rw:	or	ah,#0		; 0=read, 1=write, 2=read-only test$/;"	l
dsk_do_rw	src/read.S	/^dsk_do_rw:	or	ah,#0		; 0=read, 1=write, 2=read-only test$/;"	l
dsk_do_rw	src/read.S	/^dsk_do_rw:$/;"	l
dsk_do_rw	src/second.s	/^dsk_do_rw: or ah,#0 ; 0=read, 1=write, 2=read-only test$/;"	l
dsk_do_rw	src/third.s	/^dsk_do_rw: or ah,#0 ; 0=read, 1=write, 2=read-only test$/;"	l
dsk_io_exit	src/bitmap.s	/^dsk_io_exit: mov bp,sp ;do not touch any flags$/;"	l
dsk_io_exit	src/disk.s	/^dsk_io_exit:    mov     bp,sp           ;do not touch any flags$/;"	l
dsk_io_exit	src/read.S	/^dsk_io_exit:    mov     bp,sp           ;do not touch any flags$/;"	l
dsk_io_exit	src/second.s	/^dsk_io_exit: mov bp,sp ;do not touch any flags$/;"	l
dsk_io_exit	src/third.s	/^dsk_io_exit: mov bp,sp ;do not touch any flags$/;"	l
dsk_wrflag	src/bitmap.s	/^dsk_wrflag equ *-1 ; byte data area is the immediate$/;"	d
dsk_wrflag	src/disk.s	/^dsk_wrflag	equ	*-1		; byte data area is the immediate$/;"	d
dsk_wrflag	src/read.S	/^dsk_wrflag	equ	*-1		; byte data area is the immediate$/;"	d
dsk_wrflag	src/read.S	/^dsk_wrflag:     .byte   0               ; 0=read, 1=write, 2=read-only test$/;"	l
dsk_wrflag	src/second.s	/^dsk_wrflag equ *-1 ; byte data area is the immediate$/;"	d
dsk_wrflag	src/third.s	/^dsk_wrflag equ *-1 ; byte data area is the immediate$/;"	d
dskok	src/bitmap.s	/^dskok:$/;"	l
dskok	src/second.S	/^dskok:$/;"	l
dskok	src/second.s	/^dskok:$/;"	l
dskok	src/third.s	/^dskok:$/;"	l
dskprm	src/bitmap.s	/^dskprm: .word 0,0,0,0,0,0$/;"	l
dskprm	src/second.S	/^dskprm:	.word	0,0,0,0,0,0$/;"	l
dskprm	src/second.s	/^dskprm: .word 0,0,0,0,0,0$/;"	l
dskprm	src/third.s	/^dskprm: .word 0,0,0,0,0,0$/;"	l
dt	src/device.c	/^    DT_ENTRY *dt;	\/* pointer to any disktab entry *\/$/;"	m	struct:VolumeMgmt	file:
dtype	diagnose/test4.c	/^	unsigned char  dtype;	\/* 0x93 for data *\/$/;"	m	struct:gdt_entry	file:
dump_drvmap	src/chain.S	/^dump_drvmap:$/;"	l
dump_pt	src/probe.c	/^static void dump_pt(unsigned char *pt)$/;"	f	file:
dump_serial_nos	src/device.c	/^void dump_serial_nos(void)$/;"	f
dword	diagnose/test4.c	/^typedef unsigned long dword;$/;"	t	file:
dword	diagnose/test5.c	/^typedef unsigned long dword;$/;"	t	file:
dx	diagnose/cprintf.c	/^mov  bx,dx			! dx = val % base$/;"	v
dx	diagnose/cprintf.c	/^xor  dx,dx$/;"	v
dx	src/probe.h	/^      unsigned short dx;$/;"	m	struct:Floppy::__anon47
dx	src/probe.h	/^      unsigned short dx;$/;"	m	struct:Floppy::__anon48
dx	src/probe.h	/^      unsigned short dx;$/;"	m	struct:Hard::__anon49
dx	src/probe.h	/^      unsigned short dx;$/;"	m	struct:Hard::__anon50
dx	src/probe.h	/^      unsigned short dx;$/;"	m	struct:Video25::__anon37
dx_save	src/disk.S	/^dx_save:	.word	0$/;"	l
dx_save	src/disk.s	/^dx_save:	.word	0$/;"	l
e801cx	src/bitmap.s	/^e801cx: or dx,dx$/;"	l
e801cx	src/second.S	/^e801cx:	or	dx,dx$/;"	l
e801cx	src/second.s	/^e801cx: or dx,dx$/;"	l
e801cx	src/third.s	/^e801cx: or dx,dx$/;"	l
e801dx	src/bitmap.s	/^e801dx:$/;"	l
e801dx	src/second.S	/^e801dx:	$/;"	l
e801dx	src/second.s	/^e801dx:$/;"	l
e801dx	src/third.s	/^e801dx:$/;"	l
e801eax	src/bitmap.s	/^e801eax:$/;"	l
e801eax	src/second.S	/^e801eax:$/;"	l
e801eax	src/second.s	/^e801eax:$/;"	l
e801eax	src/third.s	/^e801eax:$/;"	l
e820	diagnose/test4.c	/^long e820(long b)$/;"	f	file:
e8go	src/bitmap.s	/^e8go: push edx ; save best prospect$/;"	l
e8go	src/second.S	/^e8go:	push	edx			; save best prospect$/;"	l
e8go	src/second.s	/^e8go: push edx ; save best prospect$/;"	l
e8go	src/third.s	/^e8go: push edx ; save best prospect$/;"	l
e8go2	src/bitmap.s	/^e8go2: or ebx,ebx ; test for end$/;"	l
e8go2	src/second.S	/^e8go2:	or	ebx,ebx			; test for end$/;"	l
e8go2	src/second.s	/^e8go2: or ebx,ebx ; test for end$/;"	l
e8go2	src/third.s	/^e8go2: or ebx,ebx ; test for end$/;"	l
e8go5	src/bitmap.s	/^e8go5: or edx,edx ; find anything?$/;"	l
e8go5	src/second.S	/^e8go5:	or	edx,edx		; find anything?$/;"	l
e8go5	src/second.s	/^e8go5: or edx,edx ; find anything?$/;"	l
e8go5	src/third.s	/^e8go5: or edx,edx ; find anything?$/;"	l
e8no1	src/second.S	/^e8no1:	shrd	eax,ecx,#10	; convert to 1k blocks$/;"	l
ebda1	src/disk.S	/^ebda1:		push	ax$/;"	l
ebda1	src/disk.s	/^ebda1:		push	ax$/;"	l
ebda2	src/disk.S	/^ebda2:$/;"	l
ebda2	src/disk.s	/^ebda2:$/;"	l
edd7	src/disk.S	/^edd7:           xor     cx,cx           ;carry is clear$/;"	l
edd7	src/disk.s	/^edd7:           xor     cx,cx           ;carry is clear$/;"	l
edd8	src/disk.S	/^edd8:           pop     si$/;"	l
edd8	src/disk.s	/^edd8:           pop     si$/;"	l
edd9	src/disk.S	/^edd9:           pop     dx$/;"	l
edd9	src/disk.s	/^edd9:           pop     dx$/;"	l
edd_addr	src/first.S	/^edd_addr	=  4$/;"	d
edd_addr	src/first.s	/^edd_addr = 4$/;"	d
edd_d_addr	src/first.S	/^edd_d_addr	=  8$/;"	d
edd_d_addr	src/first.s	/^edd_d_addr = 8$/;"	d
edd_packet	src/first.S	/^edd_packet	=  0$/;"	d
edd_packet	src/first.s	/^edd_packet = 0$/;"	d
edd_t	src/probe.h	/^} edd_t;				\/* struct is 26; but may be 30 in mem *\/$/;"	t	typeref:struct:Edd
edit_bitmap	src/edit.c	/^static void edit_bitmap(char *bitmap_file)$/;"	f	file:
edit_colors	src/edit.c	/^static void edit_colors(void)$/;"	f	file:
edit_layout	src/edit.c	/^static void edit_layout(void)$/;"	f	file:
edit_timer	src/edit.c	/^static void edit_timer(void)$/;"	f	file:
eflag	src/common.c	/^      nowarn = 0, lba32 = 0, autoauto = 0, passw = 0, geometric = 0, eflag = 0;$/;"	v
egamem	src/probe.c	/^static int egamem;$/;"	v	file:
emptyl	src/bitmap.s	/^emptyl: je bfirst ; yes -> boot first image$/;"	l
emptyl	src/second.S	/^emptyl:	je	bfirst		; yes -> boot first image$/;"	l
emptyl	src/second.s	/^emptyl: je bfirst ; yes -> boot first image$/;"	l
emptyl	src/third.s	/^emptyl: je bfirst ; yes -> boot first image$/;"	l
enable_readahead	src/volume.S	/^enable_readahead:$/;"	l
enable_refresh	diagnose/test4.c	/^int enable_refresh(void)$/;"	f	file:
endOfDirectory	diagnose/sector.S	/^endOfDirectory:$/;"	l
end_cyl	src/partition.h	/^	unsigned char end_cyl;		\/* end cylinder *\/$/;"	m	struct:partition
end_head	src/partition.h	/^	unsigned char end_head;		\/* end head *\/$/;"	m	struct:partition
end_sector	src/partition.h	/^	unsigned char end_sector;	\/* end sector *\/$/;"	m	struct:partition
end_tt	src/bitmap.s	/^end_tt:$/;"	l
end_tt	src/second.S	/^end_tt:$/;"	l
end_tt	src/second.s	/^end_tt:$/;"	l
end_tt	src/third.s	/^end_tt:$/;"	l
endif	src/bitmap.s	/^endif$/;"	l
endif	src/second.S	/^endif$/;"	l
endif	src/second.s	/^endif$/;"	l
endif	src/third.s	/^endif$/;"	l
endup	diagnose/sector.S	/^endup:$/;"	l
enough_mem	src/bitmap.s	/^enough_mem:$/;"	l
enough_mem	src/second.S	/^enough_mem:$/;"	l
enough_mem	src/second.s	/^enough_mem:$/;"	l
enough_mem	src/third.s	/^enough_mem:$/;"	l
enrd8_d	src/volume.S	/^  enrd8_d:$/;"	l
enrd9	src/volume.S	/^enrd9:$/;"	l
environ	diagnose/bios.c	/^char ** environ = { 0 };$/;"	v
eq	src/probe.c	/^static equip_t *eq;$/;"	v	file:
equip_t	src/probe.h	/^} equip_t;$/;"	t	typeref:struct:Equip
equipment	src/probe.c	/^      short equipment;		\/* byte offset to the equipment information *\/$/;"	m	struct:Buf::__anon54	file:
equipment	src/probe.h	/^   unsigned short equipment;$/;"	m	struct:Equip
equipment	src/probe.h	/^   unsigned short equipment;$/;"	m	struct:Video
errmsg	src/dparam.S	/^errmsg:	.ascii	"usage: dparam 0x80"$/;"	l
errno	diagnose/bios.c	/^int errno;$/;"	v
errno	diagnose/test4.c	/^int errno;$/;"	v
errno	diagnose/test5.c	/^int errno;$/;"	v
error	diagnose/sector.S	/^error:$/;"	l
error	src/dparam.S	/^error:	mov	dx,#errmsg		! display the error message$/;"	l
error	src/first.S	/^error:	! 에러가 뜨면 스택을 줄이고 다시 시도 (lagain)$/;"	l
error	src/first.s	/^error: ! 에러가 뜨면 스택을 줄이고 다시 시도 (lagain)$/;"	l
error2	diagnose/sector.S	/^error2:$/;"	l
error3	diagnose/sector.S	/^error3:$/;"	l
errstd	src/edit.c	/^FILE* errstd;$/;"	v
errstd	src/lilo.c	/^FILE *errstd;$/;"	v
es	src/probe.h	/^      unsigned short es;$/;"	m	struct:Floppy::__anon48
evms_bmap	src/geometry.c	/^void evms_bmap(struct evms_get_bmap_t *ebm)$/;"	f
evms_get_bmap_t	src/geometry.c	/^struct evms_get_bmap_t {$/;"	s	file:
evms_version_t	src/geometry.c	/^struct evms_version_t {$/;"	s	file:
exists	src/geometry.c	/^static int exists(const char *name)$/;"	f	file:
exit	src/disk.S	/^exit:           mov     ax,cs$/;"	l
exit	src/disk.s	/^exit:           mov     ax,cs$/;"	l
exit_dos	src/disk.S	/^exit_dos:       mov     ax,#0x4c00$/;"	l
exit_dos	src/disk.s	/^exit_dos:       mov     ax,#0x4c00$/;"	l
expand	src/shs2.c	56;"	d	file:
ext_bx	src/first.S	/^ext_bx:	.word	0		! do not disturb the ordering$/;"	l
ext_dh	src/first.S	/^ext_dh:	.byte	0		! not referenced, but must align stack$/;"	l
ext_dl	src/first.S	/^ext_dl:	.byte	0		! second.S will check this magic number$/;"	l
ext_es	src/first.S	/^ext_es:	.word	0		! these locations are referenced in second.S$/;"	l
ext_search	src/mbr.S	/^ext_search:$/;"	l
ext_search	src/mbr2.s	/^ext_search:$/;"	l
ext_si	src/first.S	/^ext_si:	.word	0		! external interface$/;"	l
ext_stack	src/first.S	/^ext_stack:$/;"	l
extended_pt	src/common.c	/^      ireloc = 0, force_fs = 0, force_raid = 0, extended_pt = 0, query = 0,$/;"	v
extp	src/bitmap.s	/^extp:$/;"	l
extp	src/second.S	/^extp:	BEG_FS$/;"	l
extp	src/second.s	/^extp:$/;"	l
extp	src/third.s	/^extp:$/;"	l
extra	src/common.c	/^LILO_EXTRA extra;$/;"	v
f	diagnose/Makefile	/^	dd if=$(FD) bs=2 skip=1 count=30 >>floppy.b$/;"	m
f	diagnose/Makefile	/^	dd if=$< of=$@ bs=32 skip=1$/;"	m
f	diagnose/Makefile	/^	dd if=bootdiagnostic.b bs=2 skip=1 count=30 >>floppy.b$/;"	m
f	diagnose/Makefile	/^	dd if=floppy.b of=$(LOOP) bs=512$/;"	m
f	diagnose/Makefile	/^	dd if=sector.b bs=2 count=1 of=floppy.b$/;"	m
f	diagnose/Makefile	/^	dd if=sector.b bs=2 skip=31 count=225 >>floppy.b$/;"	m
f	diagnose/Makefile	/^	gzip -d <bootdiagnostic.b.gz | dd of=\/dev\/fd0 bs=1024$/;"	m
f	src/Makefile	/^		dd if=$*.img of=$*.b bs=32 skip=49$/;"	m
f	src/Makefile	/^		dd if=dparam.img of=dparam.com bs=288 skip=1$/;"	m
f	src/Makefile	/^	cat bootsect.b disk.com | dd of=\/dev\/fd0 bs=512$/;"	m
f	src/Makefile	/^	dd if=$*.img of=$*.b bs=32 skip=49$/;"	m
f	src/probe.c	/^      floppy_t f[4];$/;"	m	struct:Buf::__anon53	file:
f1	src/shs2.c	27;"	d	file:
f2	src/shs2.c	28;"	d	file:
f3	src/shs2.c	29;"	d	file:
f4	src/shs2.c	30;"	d	file:
failed_disks	src/md-int.h	/^	md_u32 failed_disks;	\/*  4 Number of failed disks		      *\/$/;"	m	struct:md_array_info_s
failed_disks	src/md-int.h	/^	md_u32 failed_disks;	\/*  4 Number of failed disks		      *\/$/;"	m	struct:md_superblock_s
fallback	src/bsect.c	/^static char *fallback[MAX_IMAGES];$/;"	v	file:
fallbacks	src/bsect.c	/^static int fallbacks = 0;$/;"	v	file:
fat12	diagnose/sector.S	/^fat12   equ     *-2$/;"	d
fatal	src/chain.S	/^fatal:	hlt$/;"	l
fatal	src/chain.s	/^fatal: hlt$/;"	l
faulty	src/raid.c	/^static int nlist, faulty;$/;"	v	file:
fd	src/bsect.c	/^static int fd;$/;"	v	file:
fd	src/device.h	/^    int fd;$/;"	m	struct:__anon5
fd	src/geometry.h	/^    int fd,file;$/;"	m	struct:__anon6
fdisplay	src/disk.S	/^fdisplay:$/;"	l
fdisplay	src/disk.s	/^fdisplay:$/;"	l
fdnok	src/bitmap.s	/^fdnok:$/;"	l
fdnok	src/second.S	/^fdnok:	$/;"	l
fdnok	src/second.s	/^fdnok:$/;"	l
fdnok	src/third.s	/^fdnok:$/;"	l
fetch	src/probe.c	/^int fetch(void)$/;"	f
fg	src/bitmap.h	/^   short int fg, bg, sh;$/;"	m	struct:Scheme
fg	src/bitmap.h	/^;*\/	short fg, bg, sh;		\/* BMP normal text fore, backgr, shadow$/;"	m	struct:BitmapLiloHeader
fg	src/common.h	/^;*\/	short fg, bg, sh;		\/* BMP normal text fore, backgr, shadow$/;"	m	struct:__anon15
fh	src/edit.c	/^static BITMAPFILEHEADER fh;$/;"	v	file:
fi_cmp	src/bitmap.s	/^fi_cmp:$/;"	l
fi_cmp	src/second.S	/^fi_cmp:$/;"	l
fi_cmp	src/second.s	/^fi_cmp:$/;"	l
fi_cmp	src/third.s	/^fi_cmp:$/;"	l
fi_dscend	src/bitmap.S	/^fi_dscend:	$/;"	l
fi_dscend	src/crt.S	/^fi_dscend:	$/;"	l
fi_exit	src/bitmap.S	/^fi_exit:$/;"	l
fi_exit	src/bitmap.s	/^fi_exit:$/;"	l
fi_exit	src/crt.S	/^fi_exit:$/;"	l
fi_exit	src/second.S	/^fi_exit:$/;"	l
fi_exit	src/second.s	/^fi_exit:$/;"	l
fi_exit	src/third.s	/^fi_exit:$/;"	l
fi_found	src/bitmap.S	/^fi_found:$/;"	l
fi_found	src/bitmap.s	/^fi_found:$/;"	l
fi_found	src/crt.S	/^fi_found:$/;"	l
fi_found	src/second.S	/^fi_found:$/;"	l
fi_found	src/second.s	/^fi_found:$/;"	l
fi_found	src/third.s	/^fi_found:$/;"	l
fi_fuzzy	src/bitmap.s	/^fi_fuzzy:$/;"	l
fi_fuzzy	src/second.S	/^fi_fuzzy:$/;"	l
fi_fuzzy	src/second.s	/^fi_fuzzy:$/;"	l
fi_fuzzy	src/third.s	/^fi_fuzzy:$/;"	l
fi_nextc	src/bitmap.S	/^fi_nextc:$/;"	l
fi_nextc	src/bitmap.s	/^fi_nextc:$/;"	l
fi_nextc	src/crt.S	/^fi_nextc:$/;"	l
fi_nextc	src/second.S	/^fi_nextc:$/;"	l
fi_nextc	src/second.s	/^fi_nextc:$/;"	l
fi_nextc	src/third.s	/^fi_nextc:$/;"	l
fi_nextn	src/bitmap.S	/^fi_nextn:$/;"	l
fi_nextn	src/bitmap.s	/^fi_nextn:$/;"	l
fi_nextn	src/crt.S	/^fi_nextn:$/;"	l
fi_nextn	src/second.S	/^fi_nextn:$/;"	l
fi_nextn	src/second.s	/^fi_nextn:$/;"	l
fi_nextn	src/third.s	/^fi_nextn:$/;"	l
fi_nochange	src/bitmap.S	/^fi_nochange:$/;"	l
fi_nochange	src/bitmap.s	/^fi_nochange:$/;"	l
fi_nochange	src/crt.S	/^fi_nochange:$/;"	l
fi_nochange	src/second.S	/^fi_nochange:$/;"	l
fi_nochange	src/third.s	/^fi_nochange:$/;"	l
fi_nochange2	src/bitmap.s	/^fi_nochange2:$/;"	l
fi_nochange2	src/second.S	/^fi_nochange2:$/;"	l
fi_nochange2	src/third.s	/^fi_nochange2:$/;"	l
fi_nomore	src/bitmap.s	/^fi_nomore:$/;"	l
fi_nomore	src/second.S	/^fi_nomore:$/;"	l
fi_nomore	src/second.s	/^fi_nomore:$/;"	l
fi_nomore	src/third.s	/^fi_nomore:$/;"	l
fi_pmat	src/bitmap.s	/^fi_pmat:$/;"	l
fi_pmat	src/second.S	/^fi_pmat:$/;"	l
fi_pmat	src/second.s	/^fi_pmat:$/;"	l
fi_pmat	src/third.s	/^fi_pmat:$/;"	l
fi_skipn	src/bitmap.S	/^fi_skipn:$/;"	l
fi_skipn	src/bitmap.s	/^fi_skipn:$/;"	l
fi_skipn	src/crt.S	/^fi_skipn:$/;"	l
fi_skipn	src/second.S	/^fi_skipn:$/;"	l
fi_skipn	src/second.s	/^fi_skipn:$/;"	l
fi_skipn	src/third.s	/^fi_skipn:$/;"	l
file	src/cfg.c	/^static FILE *file;$/;"	v	file:
file	src/geometry.h	/^    int fd,file;$/;"	m	struct:__anon6
file_name	src/cfg.c	/^static char *file_name = NULL;$/;"	v	file:
filepos	src/edit.c	/^static int filepos, npal;$/;"	v	file:
filesystem_id	diagnose/sector.S	/^filesystem_id:		.ascii	"FAT12   "	;  8 chars$/;"	l
fill	src/bitmap.s	/^fill: push bx ; fill with spaces$/;"	l
fill	src/second.S	/^fill:	push	bx		; fill with spaces$/;"	l
fill	src/second.s	/^fill: push bx ; fill with spaces$/;"	l
fill	src/third.s	/^fill: push bx ; fill with spaces$/;"	l
find_active	src/mbr.S	/^find_active:$/;"	l
find_active	src/mbr.s	/^find_active:$/;"	l
find_active	src/mbr2.s	/^find_active:$/;"	l
find_image	src/bitmap.S	/^find_image:$/;"	l
find_image	src/bitmap.s	/^find_image:$/;"	l
find_image	src/crt.S	/^find_image:$/;"	l
find_image	src/second.S	/^find_image:$/;"	l
find_image	src/second.s	/^find_image:$/;"	l
find_image	src/third.s	/^find_image:$/;"	l
find_more	src/mbr.S	/^find_more:				! check for more that one partition$/;"	l
find_more	src/mbr.s	/^find_more:				! check for more that one partition$/;"	l
findl0	src/crt.S	/^findl0:$/;"	l
findl0	src/third.s	/^findl0:$/;"	l
findl1	src/bitmap.S	/^findl1:	call	strlen		; get length in ax$/;"	l
findl1	src/bitmap.s	/^findl1: call strlen ; get length in ax$/;"	l
findl1	src/crt.S	/^findl1:	call	strlen		; get length in ax$/;"	l
findl1	src/third.s	/^findl1: call strlen ; get length in ax$/;"	l
findl1c	src/bitmap.S	/^findl1c:$/;"	l
findl1c	src/bitmap.s	/^findl1c:$/;"	l
findl1c	src/crt.S	/^findl1c:$/;"	l
findl1c	src/third.s	/^findl1c:$/;"	l
findl1d	src/bitmap.S	/^findl1d:$/;"	l
findl1d	src/bitmap.s	/^findl1d:$/;"	l
findl1d	src/crt.S	/^findl1d:$/;"	l
findl1d	src/third.s	/^findl1d:$/;"	l
findl2	src/bitmap.S	/^findl2:	add	bx,#id_size$/;"	l
findl2	src/bitmap.s	/^findl2: add bx,#id_size$/;"	l
findl2	src/crt.S	/^findl2:	add	bx,#id_size$/;"	l
findl2	src/third.s	/^findl2: add bx,#id_size$/;"	l
findl3	src/bitmap.S	/^findl3:	mov	[nimage],si$/;"	l
findl3	src/bitmap.s	/^findl3: mov [nimage],si$/;"	l
findl3	src/crt.S	/^findl3:	mov	[nimage],si$/;"	l
findl3	src/third.s	/^findl3: mov [nimage],si$/;"	l
findl4	src/bitmap.S	/^findl4:	call	lowlite$/;"	l
findl4	src/bitmap.s	/^findl4: call lowlite$/;"	l
first	src/identify.c	/^static char *first, *dflt;$/;"	v	file:
firstseg	src/second.S	/^firstseg:	dw	0$/;"	d
fl	diagnose/test4.c	893;"	d	file:
fl	diagnose/test4.c	912;"	d	file:
flag	src/device.c	/^    int flag;		\/* various flag bits *\/$/;"	m	struct:VolumeMgmt	file:
flag2	src/bitmap.s	/^flag2: .byte 0 ; second stage specific flags$/;"	l
flag2	src/common.h	/^;*\/    unsigned char flag2;	\/*	flags specific to the second stage loader$/;"	m	struct:__anon13
flag2	src/second.S	/^flag2:	.byte	0		; second stage specific flags$/;"	l
flag2	src/second.s	/^flag2: .byte 0 ; second stage specific flags$/;"	l
flag2	src/third.s	/^flag2: .byte 0 ; second stage specific flags$/;"	l
flag_set	src/cfg.c	/^static char flag_set;$/;"	v	file:
flags	src/common.h	/^    unsigned char device, flags;$/;"	m	struct:__anon22
flags	src/common.h	/^    unsigned char flags;	\/* 17: loader flags *\/$/;"	m	struct:__anon23
flags	src/common.h	/^;*\/    unsigned short flags,vga_mode; \/* image flags & video mode$/;"	m	struct:__anon9
flags	src/probe.h	/^      unsigned char  flags;$/;"	m	struct:Floppy::__anon47
flags	src/probe.h	/^      unsigned char  flags;$/;"	m	struct:Floppy::__anon48
flags	src/probe.h	/^      unsigned char  flags;$/;"	m	struct:Hard::__anon49
flags	src/probe.h	/^      unsigned char  flags;$/;"	m	struct:Hard::__anon50
flags	src/probe.h	/^      unsigned char  flags;$/;"	m	struct:Hard::__anon51
flags	src/probe.h	/^   unsigned char  flags;$/;"	m	struct:Fn48
flg	diagnose/cprintf.c	/^mov	byte ptr -8[bp],*$0	! flg = 0$/;"	v
flg	diagnose/cprintf.c	/^mov	byte ptr -8[bp],*1	! flg = 1$/;"	v
flop1	src/disk.S	/^flop1:          call    say$/;"	l
flop1	src/disk.s	/^flop1:          call    say$/;"	l
flop2	src/disk.S	/^flop2:          inc     ah$/;"	l
flop2	src/disk.s	/^flop2:          inc     ah$/;"	l
flop3	src/disk.S	/^flop3:          inc     ah$/;"	l
flop3	src/disk.s	/^flop3:          inc     ah$/;"	l
floppy	src/disk.S	/^floppy:         call    drive$/;"	l
floppy	src/disk.s	/^floppy:         call    drive$/;"	l
floppy	src/probe.c	/^      short floppy;		\/* byte offset to floppy data    *\/$/;"	m	struct:Buf::__anon53	file:
floppy	src/probe.c	/^      short floppy;		\/* byte offset to floppy data    *\/$/;"	m	struct:Buf::__anon54	file:
floppy1	src/disk.S	/^floppy1:$/;"	l
floppy1	src/disk.s	/^floppy1:$/;"	l
floppy_struct	src/geometry.h	/^struct floppy_struct {$/;"	s
floppy_t	src/probe.h	/^} floppy_t;$/;"	t	typeref:struct:Floppy
flush	src/chain.S	/^flush:	test	byte ptr dirty,#1	! dirty ?$/;"	l
flush	src/chain.s	/^flush: test byte ptr dirty,#1 ! dirty ?$/;"	l
fmt_gap	src/geometry.h	/^			fmt_gap;	\/* gap2 size *\/$/;"	m	struct:floppy_struct
fn08	src/probe.h	/^   } fn08;$/;"	m	struct:Floppy	typeref:struct:Floppy::__anon48
fn08	src/probe.h	/^   } fn08;$/;"	m	struct:Hard	typeref:struct:Hard::__anon50
fn15	src/probe.h	/^   } fn15;$/;"	m	struct:Floppy	typeref:struct:Floppy::__anon47
fn15	src/probe.h	/^   } fn15;$/;"	m	struct:Hard	typeref:struct:Hard::__anon49
fn41	src/probe.h	/^   } fn41;$/;"	m	struct:Hard	typeref:struct:Hard::__anon51
fn48_t	src/probe.h	/^} fn48_t;$/;"	t	typeref:struct:Fn48
force_fs	src/common.c	/^      ireloc = 0, force_fs = 0, force_raid = 0, extended_pt = 0, query = 0,$/;"	v
force_raid	src/common.c	/^      ireloc = 0, force_fs = 0, force_raid = 0, extended_pt = 0, query = 0,$/;"	v
fprobe	src/disk.S	/^fprobe:         mov     ah,#8$/;"	l
fprobe	src/disk.s	/^fprobe:         mov     ah,#8$/;"	l
frd0	src/second.S	/^frd0:	pop	bx$/;"	l
fs_check	src/second.S	/^fs_check:$/;"	l
fs_check_okay	src/second.S	/^fs_check_okay:$/;"	l
fs_check_ret	src/second.S	/^fs_check_ret:$/;"	l
fs_id	diagnose/sector.S	/^fs_id:		.blkb	8	; filesystem_id$/;"	l
fs_mod	diagnose/test4.c	/^int fs_mod = 0;$/;"	v
fstop	src/disk.S	/^fstop:$/;"	l
fstop	src/disk.s	/^fstop:$/;"	l
gap	src/geometry.h	/^	unsigned char	gap,		\/* gap1 size *\/$/;"	m	struct:floppy_struct
gdt	diagnose/test4.c	/^struct gdt_entry gdt[6];$/;"	v	typeref:struct:gdt_entry
gdt	src/bitmap.s	/^gdt: ; space for BIOS$/;"	l
gdt	src/second.S	/^gdt:	; space for BIOS$/;"	l
gdt	src/second.s	/^gdt: ; space for BIOS$/;"	l
gdt	src/third.s	/^gdt: ; space for BIOS$/;"	l
gdt_entry	diagnose/test4.c	/^struct gdt_entry {$/;"	s	file:
geo	src/boot.c	/^static GEOMETRY geo;$/;"	v	file:
geo_close	src/geometry.c	/^void geo_close(GEOMETRY *geo)$/;"	f
geo_comp_addr	src/geometry.c	/^int geo_comp_addr(GEOMETRY *geo,int offset,SECTOR_ADDR *addr)$/;"	f
geo_find	src/geometry.c	/^int geo_find(GEOMETRY *geo,SECTOR_ADDR addr)$/;"	f
geo_get	src/geometry.c	/^void geo_get(GEOMETRY *geo,int device,int user_device,int all)$/;"	f
geo_init	src/geometry.c	/^void geo_init(char *name)$/;"	f
geo_open	src/geometry.c	/^int geo_open(GEOMETRY *geo,const char *name,int flags)$/;"	f
geo_open_boot	src/geometry.c	/^int geo_open_boot(GEOMETRY *geo,char *name)$/;"	f
geo_query_dev	src/geometry.c	/^void geo_query_dev(GEOMETRY *geo,int device,int all)$/;"	f
geometric	src/common.c	/^      nowarn = 0, lba32 = 0, autoauto = 0, passw = 0, geometric = 0, eflag = 0;$/;"	v
get	src/bitmap.s	/^get common.s$/;"	l
get	src/chain.S	/^get common.s		\/* as86 "include" will bypass the CPP *\/$/;"	l
get	src/chain.s	/^get common.s$/;"	l
get	src/first.S	/^get common.s		\/* as86 "include" will bypass the CPP *\/$/;"	l
get	src/first.s	/^get common.s$/;"	l
get	src/second.S	/^get common.s		\/* as86 "include" will bypass the CPP *\/$/;"	l
get	src/second.s	/^get common.s$/;"	l
get	src/third.s	/^get common.s$/;"	l
get3colors	src/edit.c	/^static void get3colors(char *what, short *color)$/;"	f	file:
getLine	src/edit.c	/^static char *getLine(void)$/;"	f	file:
getLine	src/edit.c	66;"	d	file:
getXY	src/edit.c	/^static void getXY(char *what, short *locp, int scale, int abs)$/;"	f	file:
get_K	src/bitmap.s	/^get_K:$/;"	l
get_K	src/second.S	/^get_K:$/;"	l
get_K	src/second.s	/^get_K:$/;"	l
get_K	src/third.s	/^get_K:$/;"	l
get_bios	src/probe.c	/^static int get_bios(void)$/;"	f	file:
get_cfg_info	diagnose/test4.c	/^int get_cfg_info(void)$/;"	f	file:
get_cmdline	diagnose/test5.c	/^static void get_cmdline(char *cp)$/;"	f	file:
get_comb_code	diagnose/test4.c	/^int get_comb_code(void)$/;"	f	file:
get_conv_mem	diagnose/test4.c	/^void get_conv_mem(void)$/;"	f	file:
get_conv_mem	src/probe.c	/^static int get_conv_mem(void)$/;"	f	file:
get_equip_cfg	diagnose/test4.c	/^void get_equip_cfg(void)$/;"	f	file:
get_ext_mem	diagnose/test4.c	/^void get_ext_mem(void)$/;"	f	file:
get_fs	diagnose/test4.c	/^int get_fs(void)$/;"	f	file:
get_geom	src/probe.c	/^static int get_geom(unsigned int drive, struct disk_geom *geom)$/;"	f	file:
get_image	src/bsect.c	/^static int get_image(char *name,char *label,IMAGE_DESCR *descr)$/;"	f	file:
get_std_headers	src/edit.c	/^int get_std_headers(int fd,$/;"	f
get_video	src/probe.c	/^int get_video(void)	\/* return -1 on error, or adapter type [0..7] *\/$/;"	f
get_video_mode	diagnose/test4.c	/^int get_video_mode(void)$/;"	f	file:
getbyte	src/bitmap.s	/^getbyte:$/;"	l
getbyte	src/display4.S	/^getbyte:$/;"	l
getch	diagnose/test4.c	17;"	d	file:
getch	diagnose/test4.c	23;"	d	file:
getch	diagnose/test5.c	18;"	d	file:
getch	diagnose/test5.c	24;"	d	file:
getkey	src/bitmap.s	/^getkey: ;;$/;"	l
getkey	src/second.S	/^getkey: ;; BEG_FS$/;"	l
getkey	src/second.s	/^getkey: ;;$/;"	l
getkey	src/third.s	/^getkey: ;;$/;"	l
getmem	src/bitmap.s	/^getmem:$/;"	l
getmem	src/second.S	/^getmem:$/;"	l
getmem	src/second.s	/^getmem:$/;"	l
getmem	src/third.s	/^getmem:$/;"	l
getval	src/bsect.c	/^static int getval(char **cp, int low, int high, int default_value, int factor)$/;"	f	file:
getval_user	src/bsect.c	/^static char *getval_user;$/;"	v	file:
gm22	src/bitmap.s	/^gm22:$/;"	l
gm22	src/second.S	/^gm22:$/;"	l
gm22	src/second.s	/^gm22:$/;"	l
gm22	src/third.s	/^gm22:$/;"	l
gmcopy	src/bitmap.s	/^gmcopy: pop si$/;"	l
gmcopy	src/second.S	/^gmcopy:	pop	si$/;"	l
gmcopy	src/second.s	/^gmcopy: pop si$/;"	l
gmcopy	src/third.s	/^gmcopy: pop si$/;"	l
gmdebug1	src/second.S	/^gmdebug1:$/;"	l
gmdivl	src/bitmap.s	/^gmdivl:$/;"	l
gmdivl	src/second.S	/^gmdivl:$/;"	l
gmdivl	src/second.s	/^gmdivl:$/;"	l
gmdivl	src/third.s	/^gmdivl:$/;"	l
gmmul	src/bitmap.s	/^gmmul:$/;"	l
gmmul	src/second.S	/^gmmul:$/;"	l
gmmul	src/second.s	/^gmmul:$/;"	l
gmmul	src/third.s	/^gmmul:$/;"	l
gmmull	src/bitmap.s	/^gmmull:$/;"	l
gmmull	src/second.S	/^gmmull:$/;"	l
gmmull	src/second.s	/^gmmull:$/;"	l
gmmull	src/third.s	/^gmmull:$/;"	l
gmnocopy	src/bitmap.s	/^gmnocopy: pop bx$/;"	l
gmnocopy	src/second.S	/^gmnocopy:  pop	bx$/;"	l
gmnocopy	src/second.s	/^gmnocopy: pop bx$/;"	l
gmnocopy	src/third.s	/^gmnocopy: pop bx$/;"	l
gmret	src/bitmap.s	/^gmret: ret$/;"	l
gmret	src/second.S	/^gmret:	ret$/;"	l
gmret	src/second.s	/^gmret: ret$/;"	l
gmret	src/third.s	/^gmret: ret$/;"	l
gmthis	src/bitmap.s	/^gmthis:$/;"	l
gmthis	src/second.S	/^gmthis:$/;"	l
gmthis	src/second.s	/^gmthis:$/;"	l
gmthis	src/third.s	/^gmthis:$/;"	l
gmthis2	src/bitmap.s	/^gmthis2:$/;"	l
gmthis2	src/second.S	/^gmthis2:$/;"	l
gmthis2	src/second.s	/^gmthis2:$/;"	l
gmthis2	src/third.s	/^gmthis2:$/;"	l
gmvbig	src/bitmap.s	/^gmvbig:$/;"	l
gmvbig	src/second.S	/^gmvbig:$/;"	l
gmvbig	src/second.s	/^gmvbig:$/;"	l
gmvbig	src/third.s	/^gmvbig:$/;"	l
gnokey	src/bitmap.s	/^gnokey:$/;"	l
gnokey	src/second.S	/^gnokey:	$/;"	l
gnokey	src/second.s	/^gnokey:$/;"	l
gnokey	src/third.s	/^gnokey:$/;"	l
go	src/bootsect.S	/^go:$/;"	l
go	src/bootsect.s	/^go:$/;"	l
go	src/mbr.S	/^go:$/;"	l
go	src/mbr.s	/^go:$/;"	l
go	src/mbr2.s	/^go:$/;"	l
goOn	src/disk.S	/^goOn:           call    say$/;"	l
goOn	src/disk.s	/^goOn:           call    say$/;"	l
good_bitmap	src/bitmap.S	/^good_bitmap:$/;"	l
good_bitmap	src/bitmap.s	/^good_bitmap:$/;"	l
goshowit	src/second.S	/^goshowit:$/;"	l
goshowit	src/third.s	/^goshowit:$/;"	l
gotFATsector	diagnose/sector.S	/^gotFATsector:$/;"	l
got_sectors	src/bootsect.S	/^got_sectors:$/;"	l
got_sectors	src/bootsect.s	/^got_sectors:$/;"	l
gotch	src/bitmap.s	/^gotch:$/;"	l
gotch	src/second.S	/^gotch:$/;"	l
gotch	src/second.s	/^gotch:$/;"	l
gotch	src/third.s	/^gotch:$/;"	l
gotinp	src/bitmap.s	/^gotinp: cmp al,#9 ; TAB ?$/;"	l
gotinp	src/second.S	/^gotinp:	cmp	al,#9		; TAB ?$/;"	l
gotinp	src/second.s	/^gotinp: cmp al,#9 ; TAB ?$/;"	l
gotinp	src/third.s	/^gotinp: cmp al,#9 ; TAB ?$/;"	l
gotkey	src/bitmap.s	/^gotkey: xor ah,ah ; read a key$/;"	l
gotkey	src/second.S	/^gotkey:	xor	ah,ah		; read a key$/;"	l
gotkey	src/second.s	/^gotkey: xor ah,ah ; read a key$/;"	l
gotkey	src/third.s	/^gotkey: xor ah,ah ; read a key$/;"	l
gotoit	src/chain.S	/^gotoit:$/;"	l
gotoit	src/chain.s	/^gotoit:$/;"	l
gotoit	src/pseudo.S	/^gotoit:$/;"	l
green	src/bitmap.h	/^   bm_byte  blue, green, red, null;$/;"	m	struct:Rgb
green	src/bitmap.h	/^   bm_byte  blue, green, red;$/;"	m	struct:Rgb2
gsort	src/edit.c	/^void gsort(float array[])$/;"	f
gstate_creserved	src/md-int.h	/^	md_u32 gstate_creserved[MD_SB_GENERIC_CONSTANT_WORDS - 12];$/;"	m	struct:md_superblock_s
gstate_sreserved	src/md-int.h	/^	md_u32 gstate_sreserved[MD_SB_GENERIC_STATE_WORDS - 6];$/;"	m	struct:md_superblock_s
gvalid_words	src/md-int.h	/^	md_u32 gvalid_words;	\/*  4 Number of used words in this section    *\/$/;"	m	struct:md_superblock_s
gwtkey	src/bitmap.s	/^gwtkey: mov ah,#1 ; is a key pressed ?$/;"	l
gwtkey	src/second.S	/^gwtkey:	mov	ah,#1		; is a key pressed ?$/;"	l
gwtkey	src/second.s	/^gwtkey: mov ah,#1 ; is a key pressed ?$/;"	l
gwtkey	src/third.s	/^gwtkey: mov ah,#1 ; is a key pressed ?$/;"	l
h0init	src/shs2.c	41;"	d	file:
h1init	src/shs2.c	42;"	d	file:
h2init	src/shs2.c	43;"	d	file:
h3init	src/shs2.c	44;"	d	file:
h4init	src/shs2.c	45;"	d	file:
h_bg	src/bitmap.h	/^;*\/	short h_fg, h_bg, h_sh;		\/* highlight fg, bg, & shadow$/;"	m	struct:BitmapLiloHeader
h_bg	src/common.h	/^;*\/	short h_fg, h_bg, h_sh;		\/* highlight fg, bg, & shadow$/;"	m	struct:__anon15
h_fg	src/bitmap.h	/^;*\/	short h_fg, h_bg, h_sh;		\/* highlight fg, bg, & shadow$/;"	m	struct:BitmapLiloHeader
h_fg	src/common.h	/^;*\/	short h_fg, h_bg, h_sh;		\/* highlight fg, bg, & shadow$/;"	m	struct:__anon15
h_sh	src/bitmap.h	/^;*\/	short h_fg, h_bg, h_sh;		\/* highlight fg, bg, & shadow$/;"	m	struct:BitmapLiloHeader
h_sh	src/common.h	/^;*\/	short h_fg, h_bg, h_sh;		\/* highlight fg, bg, & shadow$/;"	m	struct:__anon15
hard	src/disk.S	/^hard:           call    drive$/;"	l
hard	src/disk.s	/^hard:           call    drive$/;"	l
hard	src/probe.c	/^      short hard;		\/* byte offset to hard disk data *\/$/;"	m	struct:Buf::__anon53	file:
hard	src/probe.c	/^      short hard;		\/* byte offset to hard disk data *\/$/;"	m	struct:Buf::__anon54	file:
hard1	src/disk.S	/^hard1:          call    say$/;"	l
hard1	src/disk.s	/^hard1:          call    say$/;"	l
hard2	src/disk.S	/^hard2:          inc     ah$/;"	l
hard2	src/disk.s	/^hard2:          inc     ah$/;"	l
hard3	src/disk.S	/^hard3:          inc     ah$/;"	l
hard3	src/disk.s	/^hard3:          inc     ah$/;"	l
hard_t	src/probe.h	/^} hard_t;$/;"	t	typeref:struct:Hard
has_partition	src/partition.c	/^static int has_partition;$/;"	v	file:
has_partitions	src/geometry.c	/^int has_partitions(dev_t dev)$/;"	f
has_partitions_beta	src/geometry.c	/^int has_partitions_beta(dev_t dev)$/;"	f
hash_password	src/bsect.c	/^static void hash_password(char *password, int crcval[])$/;"	f	file:
hd_geometry	src/geometry.h	/^struct hd_geometry {$/;"	s
hdd1	src/disk.S	/^hdd1:$/;"	l
hdd1	src/disk.s	/^hdd1:$/;"	l
hdd2	src/disk.S	/^hdd2:           test    byte ptr bigcyl,#0xFF$/;"	l
hdd2	src/disk.s	/^hdd2:           test    byte ptr bigcyl,#0xFF$/;"	l
hdd3	src/disk.S	/^hdd3:                $/;"	l
hdd3	src/disk.s	/^hdd3:                $/;"	l
hdisplay	src/disk.S	/^hdisplay:$/;"	l
hdisplay	src/disk.s	/^hdisplay:$/;"	l
hdp	src/probe.c	/^static hard_t *hdp[16+1] =		\/* pointers to all the hard disks *\/$/;"	v	file:
hdr1	src/second.S	/^hdr1:	.ascii	"\\nHeader 0x"$/;"	l
hdr2	src/second.S	/^hdr2:	.ascii	" cmdline at "$/;"	l
hdr3	src/second.S	/^hdr3:	.ascii	"\\nRamdisk_max "$/;"	l
hdr4	src/second.S	/^hdr4:	.ascii	"   length = 0x"$/;"	l
head	src/bootsect.S	/^head:	.word 0			! current head$/;"	l
head	src/bootsect.s	/^head:	.word 0			! current head$/;"	l
head	src/common.h	/^;*\/    unsigned char device,head; \/* DX$/;"	m	struct:__anon8
head	src/common.h	/^;*\/    unsigned char head; \/* head; always 0$/;"	m	struct:__anon14
head	src/geometry.h	/^			head,		\/* nr of heads *\/$/;"	m	struct:floppy_struct
head	src/partition.h	/^	unsigned char head;		\/* starting head *\/$/;"	m	struct:partition
heads	src/geometry.h	/^      unsigned char heads;$/;"	m	struct:hd_geometry
heads	src/geometry.h	/^    int device,heads;$/;"	m	struct:__anon6
heads	src/geometry.h	/^    int heads; \/* 0 if inaccessible *\/$/;"	m	struct:_dt_entry
heads	src/probe.h	/^   unsigned int  heads;$/;"	m	struct:Edd
heads_per_cylinder	diagnose/sector.S	/^heads_per_cylinder:	dw	2$/;"	d
heads_per_cylinder	src/common.h	/^;*\/    unsigned char  heads_per_cylinder[2];	\/* DOS v.3$/;"	m	struct:__anon10
heap_end_ptr	src/common.h	/^    unsigned short heap_end_ptr;\/* 36: 2.01 end of free area after setup code *\/$/;"	m	struct:__anon23
height	src/bitmap.h	/^   bm_sint16   height;$/;"	m	struct:BitMapHeader2
height	src/bitmap.h	/^   bm_sint32   height;$/;"	m	struct:BitMapHeader
help	src/probe.c	/^	char *help;$/;"	m	struct:Probes	file:
here2	src/bsect.c	/^static off_t here2;		\/* sector address of second stage loader *\/$/;"	v	file:
hicopy	diagnose/test4.c	/^int hicopy (unsigned long to, unsigned long from, int wcount)$/;"	f	file:
hidSec	diagnose/sector.S	/^hidSec:		.blkw	2	; hidden_sectors$/;"	l
hidden	src/partition.h	/^    unsigned char hidden;$/;"	m	struct:_change_rule
hidden_sectors	diagnose/sector.S	/^hidden_sectors:		dd	0       ; always zero for floppies$/;"	d
hidden_sectors	src/common.h	/^;*\/    unsigned char  hidden_sectors[4];	\/*$/;"	m	struct:__anon10
hide	src/probe.c	/^	unsigned char hide;$/;"	m	struct:partitions	file:
hilite	src/bitmap.S	/^hilite:$/;"	l
hilite	src/bitmap.s	/^hilite:$/;"	l
hilite	src/crt.S	/^hilite:	push	bx$/;"	l
hilite	src/third.s	/^hilite: push bx$/;"	l
hinib	src/bitmap.s	/^hinib: .byte 0 ; hi-nibble of address$/;"	l
hinib	src/second.S	/^hinib:  .byte   0               ; hi-nibble of address$/;"	l
hinib	src/second.s	/^hinib: .byte 0 ; hi-nibble of address$/;"	l
hinib	src/third.s	/^hinib: .byte 0 ; hi-nibble of address$/;"	l
hint	src/chain.S	/^hint:	.word	drvmap			! pointer to drive map$/;"	l
hint	src/chain.s	/^hint: .word drvmap ! pointer to drive map$/;"	l
hipboot	diagnose/sector.S	/^hipboot:$/;"	l
hipeekw	diagnose/test4.c	/^word hipeekw(long address)$/;"	f
hipokew	diagnose/test4.c	/^int hipokew(long address, word value)$/;"	f
hlti	src/disk.S	/^hlti:           hlt$/;"	l
hlti	src/disk.s	/^hlti:           hlt$/;"	l
hma	diagnose/test4.c	/^dword hma;	\/* highest memory address *\/$/;"	v
hma	src/bitmap.s	/^hma: .word 0,0 ; Highest Memory Address$/;"	l
hma	src/second.S	/^hma:	.word	0,0		; Highest Memory Address$/;"	l
hma	src/second.s	/^hma: .word 0,0 ; Highest Memory Address$/;"	l
hma	src/third.s	/^hma: .word 0,0 ; Highest Memory Address$/;"	l
hprobe	src/disk.S	/^hprobe:         mov     ah,#8$/;"	l
hprobe	src/disk.s	/^hprobe:         mov     ah,#8$/;"	l
hstop	src/disk.S	/^hstop:$/;"	l
hstop	src/disk.s	/^hstop:$/;"	l
hue	src/edit.c	/^static float hue[NPALETTE], y_yiq[NPALETTE], s_hsv[NPALETTE], $/;"	v	file:
id2	src/disk.S	/^id2:            lodsw$/;"	l
id2	src/disk.s	/^id2:            lodsw$/;"	l
id_flags	src/common.s	/^						id_flags:	.blkb	2		;  **$/;"	l
id_image	src/identify.c	/^void id_image(void)$/;"	f
id_initrd	src/common.s	/^						id_initrd:	.blkb	sa_size		;  **$/;"	l
id_name	src/common.s	/^						id_name:	.blkb	MAX_IMAGE_NAME_asm+1$/;"	l
id_other	src/identify.c	/^void id_other(void)$/;"	f
id_rd_size	src/common.s	/^						id_rd_size:	.blkb	4		;don't change the order !!!$/;"	l
id_size	src/common.s	/^						id_size:$/;"	l
id_start	src/common.s	/^						id_start:	.blkb	sa_size		;  **$/;"	l
id_string	src/disk.S	/^id_string:	.ascii	"Disk.Com"$/;"	l
id_string	src/disk.s	/^id_string:	.ascii	"Disk.Com"$/;"	l
id_string	src/pseudo.S	/^id_string:	.ascii	"pseudo.b"$/;"	l
id_vga_mode	src/common.s	/^						id_vga_mode:	.blkb	2		;  **$/;"	l
idefault	src/identify.c	/^static int idefault;$/;"	v	file:
ident	src/vesainfo.h	/^         } ident;$/;"	m	union:__anon1	typeref:struct:__anon1::__anon2
identify	src/common.c	/^char *identify = NULL;$/;"	v
identify	src/identify.c	/^char *identify;$/;"	v
identify_image	src/identify.c	/^void identify_image(char *label,char *options)$/;"	f
idevices	src/device.c	/^static unsigned int idevices[NDEVICE];$/;"	v	file:
idx	src/edit.c	/^static int idx[16];$/;"	v	file:
if	src/bitmap.s	/^if ~*&1 ; align to an odd memory location$/;"	l
if	src/second.S	/^if ~*&1					; align to an odd memory location$/;"	l
if	src/second.s	/^if ~*&1 ; align to an odd memory location$/;"	l
if	src/third.s	/^if ~*&1 ; align to an odd memory location$/;"	l
ifd	src/edit.c	/^static	int ifd, ofd;$/;"	v	file:
iloop	src/bitmap.s	/^iloop:$/;"	l
iloop	src/second.S	/^iloop:$/;"	l
iloop	src/second.s	/^iloop:$/;"	l
iloop	src/third.s	/^iloop:$/;"	l
im111	src/chain.S	/^im111:	pop	si$/;"	l
im4	src/disk.S	/^im4:            mov     bx,dx$/;"	l
im4	src/disk.s	/^im4:            mov     bx,dx$/;"	l
im_name	src/bitmap.S	/^im_name:  .blkb	MAX_IMAGE_NAME+3$/;"	l
im_name	src/bitmap.s	/^im_name: .blkb 15 +3$/;"	l
image	src/bsect.c	/^static int image_base = 0,image = 0;$/;"	v	file:
image_base	src/bsect.c	/^static int image_base = 0,image = 0;$/;"	v	file:
image_menu_space	src/bsect.c	/^static int image_menu_space = MAX_IMAGES;$/;"	v	file:
imgdne	src/bitmap.s	/^imgdne: add si,#id_size-15 -4$/;"	l
imgdne	src/second.S	/^imgdne:	add	si,#id_size-MAX_IMAGE_NAME-4$/;"	l
imgdne	src/second.s	/^imgdne: add si,#id_size-15 -4$/;"	l
imgdne	src/third.s	/^imgdne: add si,#id_size-15 -4$/;"	l
inb	diagnose/test4.c	/^int inb(int port)$/;"	f	file:
inb	diagnose/test5.c	/^int inb(int port)$/;"	f	file:
inc	diagnose/sector.S	/^        inc     di$/;"	d
inc	diagnose/sector.S	/^        inc     dx              ;DX=sector#, CX:AX=quotient$/;"	d
inc	diagnose/sector.S	/^        inc     dx$/;"	d
inc	src/biosdata.S	/^	inc	dl$/;"	d
inc	src/biosdata.S	/^	inc	dx$/;"	d
inc	src/bitmap.S	/^	inc	di$/;"	d
inc	src/bitmap.S	/^	inc	dx			; similar to  dec al$/;"	d
inc	src/bitmap.s	/^  inc di$/;"	d
inc	src/bitmap.s	/^ inc dh ; 2001\/06\/23$/;"	d
inc	src/bitmap.s	/^ inc di ;vp$/;"	d
inc	src/bitmap.s	/^ inc di$/;"	d
inc	src/bitmap.s	/^ inc dl ; count the image$/;"	d
inc	src/bitmap.s	/^ inc dl$/;"	d
inc	src/bitmap.s	/^ inc dx ; disable divisor latch access$/;"	d
inc	src/bitmap.s	/^ inc dx ; similar to dec al$/;"	d
inc	src/bitmap.s	/^ inc dx$/;"	d
inc	src/chain.S	/^	inc	di$/;"	d
inc	src/chain.s	/^ inc di$/;"	d
inc	src/crt.S	/^	inc	dh$/;"	d
inc	src/crt.S	/^	inc	di$/;"	d
inc	src/crt.S	/^	inc	dl$/;"	d
inc	src/crt.S	/^	inc	dx			; similar to  dec al$/;"	d
inc	src/disk.S	/^                inc     dl$/;"	d
inc	src/disk.s	/^	inc	dl$/;"	d
inc	src/disk.s	/^	inc	dx$/;"	d
inc	src/disk.s	/^                inc     dl$/;"	d
inc	src/display4.S	/^	inc	dh	; 2001\/06\/23$/;"	d
inc	src/display4.S	/^	inc	di	;vp$/;"	d
inc	src/display4.S	/^	inc	di$/;"	d
inc	src/first.S	/^	inc	dx$/;"	d
inc	src/first.s	/^ inc dx$/;"	d
inc	src/mbr.S	/^	inc	dx		! try next device$/;"	d
inc	src/mbr.S	/^	inc	dx		! try the next device code$/;"	d
inc	src/mbr.s	/^	inc	dx		! try next device$/;"	d
inc	src/mbr2.s	/^	inc	dx		! try next device$/;"	d
inc	src/menu.S	/^	inc	dh$/;"	d
inc	src/menu.S	/^	inc	dl$/;"	d
inc	src/second.S	/^		inc	di$/;"	d
inc	src/second.S	/^	inc	di$/;"	d
inc	src/second.S	/^	inc	dl		; count the image$/;"	d
inc	src/second.S	/^	inc	dx		; disable divisor latch access$/;"	d
inc	src/second.S	/^	inc	dx$/;"	d
inc	src/second.s	/^  inc di$/;"	d
inc	src/second.s	/^ inc di$/;"	d
inc	src/second.s	/^ inc dl ; count the image$/;"	d
inc	src/second.s	/^ inc dl$/;"	d
inc	src/second.s	/^ inc dx ; disable divisor latch access$/;"	d
inc	src/second.s	/^ inc dx$/;"	d
inc	src/shs3.S	/^	inc     di$/;"	d
inc	src/third.s	/^  inc di$/;"	d
inc	src/third.s	/^ inc dh$/;"	d
inc	src/third.s	/^ inc di$/;"	d
inc	src/third.s	/^ inc dl ; count the image$/;"	d
inc	src/third.s	/^ inc dl$/;"	d
inc	src/third.s	/^ inc dx ; disable divisor latch access$/;"	d
inc	src/third.s	/^ inc dx ; similar to dec al$/;"	d
inc	src/third.s	/^ inc dx$/;"	d
inc	src/volume.S	/^	inc	di$/;"	d
info	src/probe.h	/^   unsigned short info;$/;"	m	struct:Edd
info	src/vesainfo.h	/^         } info;$/;"	m	union:__anon1	typeref:struct:__anon1::__anon3
init_dx	src/bitmap.s	/^init_dx: .word 0$/;"	l
init_dx	src/second.S	/^init_dx:	.word	0$/;"	l
init_dx	src/second.s	/^init_dx: .word 0$/;"	l
init_dx	src/third.s	/^init_dx: .word 0$/;"	l
inited	src/device.c	/^static int inited = 0;$/;"	v	file:
initrd	src/common.h	/^;*\/    SECTOR_ADDR initrd,start;  \/* start of initrd & kernel$/;"	m	struct:__anon9
initrd_present	src/bsect.c	/^static int initrd_present(void)$/;"	f	file:
initseg	src/bitmap.s	/^initseg: .word INITSEG$/;"	l
initseg	src/second.S	/^initseg:	.word	INITSEG$/;"	l
initseg	src/second.s	/^initseg: .word INITSEG$/;"	l
initseg	src/third.s	/^initseg: .word INITSEG$/;"	l
input	src/bitmap.s	/^input: seg es ; interactive mode ?$/;"	l
input	src/second.S	/^input:	seg	es		; interactive mode ?$/;"	l
input	src/second.s	/^input: seg es ; interactive mode ?$/;"	l
input	src/third.s	/^input: seg es ; interactive mode ?$/;"	l
inqedd	src/disk.S	/^inqedd:         push    ax$/;"	l
inqedd	src/disk.s	/^inqedd:         push    ax$/;"	l
install_done1	src/chain.S	/^install_done1:			; the map is at SS:SP$/;"	l
install_done1	src/chain.s	/^install_done1: ; the map is at SS:SP$/;"	l
install_map	src/chain.S	/^install_map:$/;"	l
install_map	src/chain.s	/^install_map:$/;"	l
install_move1	src/chain.S	/^install_move1:$/;"	l
install_move1	src/chain.s	/^install_move1:$/;"	l
install_ret	src/chain.S	/^install_ret:$/;"	l
install_ret	src/chain.s	/^install_ret:$/;"	l
install_skip	src/chain.S	/^install_skip:$/;"	l
install_skip	src/chain.s	/^install_skip:$/;"	l
instto	src/bitmap.s	/^instto: push ds ; install the timeout handler$/;"	l
instto	src/second.S	/^instto:	push	ds		; install the timeout handler$/;"	l
instto	src/second.s	/^instto: push ds ; install the timeout handler$/;"	l
instto	src/third.s	/^instto: push ds ; install the timeout handler$/;"	l
intdiv	src/disk.S	/^intdiv:         push    bx$/;"	l
intdiv	src/disk.s	/^intdiv:         push    bx$/;"	l
intmul	src/disk.S	/^intmul:$/;"	l
intmul	src/disk.s	/^intmul:$/;"	l
invdrv	src/dparam.S	/^invdrv:	.ascii	"Invalid drive"$/;"	l
io_biosdata	src/biosdata.S	/^io_biosdata:$/;"	l
io_biosdata	src/bitmap.s	/^io_biosdata:$/;"	l
io_biosdata	src/disk.s	/^io_biosdata:$/;"	l
io_biosdata	src/second.s	/^io_biosdata:$/;"	l
io_biosdata	src/third.s	/^io_biosdata:$/;"	l
io_check_edd	src/biosdata.S	/^io_check_edd:$/;"	l
io_check_edd	src/bitmap.s	/^io_check_edd:$/;"	l
io_check_edd	src/disk.s	/^io_check_edd:$/;"	l
io_check_edd	src/second.s	/^io_check_edd:$/;"	l
io_check_edd	src/third.s	/^io_check_edd:$/;"	l
io_checksum_it	src/biosdata.S	/^io_checksum_it:$/;"	l
io_checksum_it	src/bitmap.s	/^io_checksum_it:$/;"	l
io_checksum_it	src/disk.s	/^io_checksum_it:$/;"	l
io_checksum_it	src/second.s	/^io_checksum_it:$/;"	l
io_checksum_it	src/third.s	/^io_checksum_it:$/;"	l
io_do_edd_check	src/biosdata.S	/^io_do_edd_check:$/;"	l
io_do_edd_check	src/bitmap.s	/^io_do_edd_check:$/;"	l
io_do_edd_check	src/disk.s	/^io_do_edd_check:$/;"	l
io_do_edd_check	src/second.s	/^io_do_edd_check:$/;"	l
io_do_edd_check	src/third.s	/^io_do_edd_check:$/;"	l
io_do_edd_check_ret	src/biosdata.S	/^io_do_edd_check_ret:$/;"	l
io_do_edd_check_ret	src/bitmap.s	/^io_do_edd_check_ret:$/;"	l
io_do_edd_check_ret	src/disk.s	/^io_do_edd_check_ret:$/;"	l
io_do_edd_check_ret	src/second.s	/^io_do_edd_check_ret:$/;"	l
io_do_edd_check_ret	src/third.s	/^io_do_edd_check_ret:$/;"	l
io_eqp	src/biosdata.S	/^io_eqp:	.word	0$/;"	l
io_eqp	src/bitmap.s	/^io_eqp: .word 0$/;"	l
io_eqp	src/disk.s	/^io_eqp:	.word	0$/;"	l
io_eqp	src/second.s	/^io_eqp: .word 0$/;"	l
io_eqp	src/third.s	/^io_eqp: .word 0$/;"	l
io_fh_check	src/biosdata.S	/^io_fh_check:$/;"	l
io_fh_check	src/bitmap.s	/^io_fh_check:$/;"	l
io_fh_check	src/disk.s	/^io_fh_check:$/;"	l
io_fh_check	src/second.s	/^io_fh_check:$/;"	l
io_fh_check	src/third.s	/^io_fh_check:$/;"	l
io_floppies	src/biosdata.S	/^io_floppies:$/;"	l
io_floppies	src/bitmap.s	/^io_floppies:$/;"	l
io_floppies	src/disk.s	/^io_floppies:$/;"	l
io_floppies	src/second.s	/^io_floppies:$/;"	l
io_floppies	src/third.s	/^io_floppies:$/;"	l
io_floppies1	src/biosdata.S	/^io_floppies1	equ	*-3$/;"	d
io_floppies1	src/biosdata.S	/^io_floppies1:$/;"	l
io_floppies1	src/bitmap.s	/^io_floppies1:$/;"	l
io_floppies1	src/disk.s	/^io_floppies1	equ	*-3$/;"	d
io_floppies1	src/second.s	/^io_floppies1:$/;"	l
io_floppies1	src/third.s	/^io_floppies1:$/;"	l
io_flp	src/biosdata.S	/^io_flp:	.word	0$/;"	l
io_flp	src/bitmap.s	/^io_flp: .word 0$/;"	l
io_flp	src/disk.s	/^io_flp:	.word	0$/;"	l
io_flp	src/second.s	/^io_flp: .word 0$/;"	l
io_flp	src/third.s	/^io_flp: .word 0$/;"	l
io_get	src/biosdata.S	/^io_get: $/;"	l
io_get	src/bitmap.s	/^io_get:$/;"	l
io_get	src/disk.s	/^io_get: $/;"	l
io_get	src/second.s	/^io_get:$/;"	l
io_get	src/third.s	/^io_get:$/;"	l
io_get_param	src/biosdata.S	/^io_get_param:$/;"	l
io_get_param	src/bitmap.s	/^io_get_param:$/;"	l
io_get_param	src/disk.s	/^io_get_param:$/;"	l
io_get_param	src/second.s	/^io_get_param:$/;"	l
io_get_param	src/third.s	/^io_get_param:$/;"	l
io_get_pt	src/biosdata.S	/^io_get_pt:$/;"	l
io_get_pt	src/bitmap.s	/^io_get_pt:$/;"	l
io_get_pt	src/disk.s	/^io_get_pt:$/;"	l
io_get_pt	src/second.s	/^io_get_pt:$/;"	l
io_get_pt	src/third.s	/^io_get_pt:$/;"	l
io_get_pt_err	src/biosdata.S	/^io_get_pt_err:$/;"	l
io_get_pt_err	src/bitmap.s	/^io_get_pt_err:$/;"	l
io_get_pt_err	src/disk.s	/^io_get_pt_err:$/;"	l
io_get_pt_err	src/second.s	/^io_get_pt_err:$/;"	l
io_get_pt_err	src/third.s	/^io_get_pt_err:$/;"	l
io_get_pt_ret	src/biosdata.S	/^io_get_pt_ret:$/;"	l
io_get_pt_ret	src/bitmap.s	/^io_get_pt_ret:$/;"	l
io_get_pt_ret	src/disk.s	/^io_get_pt_ret:$/;"	l
io_get_pt_ret	src/second.s	/^io_get_pt_ret:$/;"	l
io_get_pt_ret	src/third.s	/^io_get_pt_ret:$/;"	l
io_good_disk	src/biosdata.S	/^io_good_disk:$/;"	l
io_good_disk	src/bitmap.s	/^io_good_disk:$/;"	l
io_good_disk	src/disk.s	/^io_good_disk:$/;"	l
io_good_disk	src/second.s	/^io_good_disk:$/;"	l
io_good_disk	src/third.s	/^io_good_disk:$/;"	l
io_got	src/biosdata.S	/^io_got:$/;"	l
io_got	src/bitmap.s	/^io_got:$/;"	l
io_got	src/disk.s	/^io_got:$/;"	l
io_got	src/second.s	/^io_got:$/;"	l
io_got	src/third.s	/^io_got:$/;"	l
io_hrd	src/biosdata.S	/^io_hrd:	.word	0$/;"	l
io_hrd	src/bitmap.s	/^io_hrd: .word 0$/;"	l
io_hrd	src/disk.s	/^io_hrd:	.word	0$/;"	l
io_hrd	src/second.s	/^io_hrd: .word 0$/;"	l
io_hrd	src/third.s	/^io_hrd: .word 0$/;"	l
io_l_sig	src/biosdata.S	/^io_l_sig	= *-io_sig$/;"	d
io_l_sig	src/bitmap.s	/^io_l_sig = *-io_sig$/;"	d
io_l_sig	src/disk.s	/^io_l_sig	= *-io_sig$/;"	d
io_l_sig	src/second.s	/^io_l_sig = *-io_sig$/;"	d
io_l_sig	src/third.s	/^io_l_sig = *-io_sig$/;"	d
io_loop_end	src/biosdata.S	/^io_loop_end:$/;"	l
io_loop_end	src/bitmap.s	/^io_loop_end:$/;"	l
io_loop_end	src/disk.s	/^io_loop_end:$/;"	l
io_loop_end	src/second.s	/^io_loop_end:$/;"	l
io_loop_end	src/third.s	/^io_loop_end:$/;"	l
io_lth	src/biosdata.S	/^io_lth:	.word	0		; byte count overall$/;"	l
io_lth	src/bitmap.s	/^io_lth: .word 0 ; byte count overall$/;"	l
io_lth	src/disk.s	/^io_lth:	.word	0		; byte count overall$/;"	l
io_lth	src/second.s	/^io_lth: .word 0 ; byte count overall$/;"	l
io_lth	src/third.s	/^io_lth: .word 0 ; byte count overall$/;"	l
io_next_drive	src/biosdata.S	/^io_next_drive:$/;"	l
io_next_drive	src/bitmap.s	/^io_next_drive:$/;"	l
io_next_drive	src/disk.s	/^io_next_drive:$/;"	l
io_next_drive	src/second.s	/^io_next_drive:$/;"	l
io_next_drive	src/third.s	/^io_next_drive:$/;"	l
io_no_disk	src/biosdata.S	/^io_no_disk:$/;"	l
io_no_disk	src/bitmap.s	/^io_no_disk:$/;"	l
io_no_disk	src/disk.s	/^io_no_disk:$/;"	l
io_no_disk	src/second.s	/^io_no_disk:$/;"	l
io_no_disk	src/third.s	/^io_no_disk:$/;"	l
io_no_pause	src/biosdata.S	/^io_no_pause:$/;"	l
io_no_pause	src/disk.s	/^io_no_pause:$/;"	l
io_pt	src/biosdata.S	/^io_pt:	.word	0$/;"	l
io_pt	src/bitmap.s	/^io_pt: .word 0$/;"	l
io_pt	src/disk.s	/^io_pt:	.word	0$/;"	l
io_pt	src/second.s	/^io_pt: .word 0$/;"	l
io_pt	src/third.s	/^io_pt: .word 0$/;"	l
io_sig	src/biosdata.S	/^io_sig:	.long	0		; space for CRC$/;"	l
io_sig	src/bitmap.s	/^io_sig: .long 0 ; space for CRC$/;"	l
io_sig	src/disk.s	/^io_sig:	.long	0		; space for CRC$/;"	l
io_sig	src/second.s	/^io_sig: .long 0 ; space for CRC$/;"	l
io_sig	src/third.s	/^io_sig: .long 0 ; space for CRC$/;"	l
io_skip_edd	src/biosdata.S	/^io_skip_edd:$/;"	l
io_skip_edd	src/bitmap.s	/^io_skip_edd:$/;"	l
io_skip_edd	src/disk.s	/^io_skip_edd:$/;"	l
io_skip_edd	src/second.s	/^io_skip_edd:$/;"	l
io_skip_edd	src/third.s	/^io_skip_edd:$/;"	l
io_vid	src/biosdata.S	/^io_vid:	.word	0$/;"	l
io_vid	src/bitmap.s	/^io_vid: .word 0$/;"	l
io_vid	src/disk.s	/^io_vid:	.word	0$/;"	l
io_vid	src/second.s	/^io_vid: .word 0$/;"	l
io_vid	src/third.s	/^io_vid: .word 0$/;"	l
ireloc	src/common.c	/^      ireloc = 0, force_fs = 0, force_raid = 0, extended_pt = 0, query = 0,$/;"	v
isFAT12	diagnose/sector.S	/^isFAT12:$/;"	l
is_accessible	src/raid.c	/^static int is_accessible(int device)$/;"	f	file:
is_devfs	src/device.c	/^static int is_devfs(void)$/;"	f	file:
is_dm_major	src/geometry.c	/^int is_dm_major(int major)$/;"	f
is_ext	src/mbr.S	/^is_ext:$/;"	l
is_ext	src/mbr2.s	/^is_ext:$/;"	l
is_extd	src/mbr.S	/^is_extd:$/;"	l
is_extd	src/mbr2.s	/^is_extd:$/;"	l
is_extd_part	src/partition.h	65;"	d
is_extr	src/mbr.S	/^is_extr:$/;"	l
is_extr	src/mbr2.s	/^is_extr:$/;"	l
is_first	src/geometry.c	/^int is_first(int device)$/;"	f
is_mdp	src/device.c	/^static int is_mdp(struct VolumeMgmt *vm, struct VolumeMgmt *mdp)$/;"	f	file:
is_msdos	diagnose/test4.c	/^int is_msdos(void)$/;"	f	file:
is_msdos	diagnose/test5.c	/^int is_msdos(void)$/;"	f	file:
is_p_no_mapper	src/bitmap.s	/^is_p_no_mapper:$/;"	l
is_p_no_mapper	src/chain.s	/^is_p_no_mapper:$/;"	l
is_p_no_mapper	src/mapper.S	/^is_p_no_mapper:$/;"	l
is_p_no_mapper	src/second.s	/^is_p_no_mapper:$/;"	l
is_p_no_mapper	src/third.s	/^is_p_no_mapper:$/;"	l
is_p_try_old	src/bitmap.s	/^is_p_try_old:$/;"	l
is_p_try_old	src/chain.s	/^is_p_try_old:$/;"	l
is_p_try_old	src/mapper.S	/^is_p_try_old:$/;"	l
is_p_try_old	src/second.s	/^is_p_try_old:$/;"	l
is_p_try_old	src/third.s	/^is_p_try_old:$/;"	l
is_prev_mapper	src/bitmap.s	/^is_prev_mapper:$/;"	l
is_prev_mapper	src/chain.s	/^is_prev_mapper:$/;"	l
is_prev_mapper	src/mapper.S	/^is_prev_mapper:$/;"	l
is_prev_mapper	src/second.s	/^is_prev_mapper:$/;"	l
is_prev_mapper	src/third.s	/^is_prev_mapper:$/;"	l
is_prev_ret	src/bitmap.s	/^is_prev_ret:$/;"	l
is_prev_ret	src/chain.s	/^is_prev_ret:$/;"	l
is_prev_ret	src/mapper.S	/^is_prev_ret:$/;"	l
is_prev_ret	src/second.s	/^is_prev_ret:$/;"	l
is_prev_ret	src/third.s	/^is_prev_ret:$/;"	l
is_primary	src/raid.c	/^static int is_primary(int device)$/;"	f	file:
isatty	diagnose/bios.c	/^isatty(fd)$/;"	f
jmp0	src/common.h	/^;*\/    unsigned char jmp0, jmp1;	\/* short jump$/;"	m	struct:__anon12
jmp1	src/common.h	/^;*\/    unsigned char jmp0, jmp1;	\/* short jump$/;"	m	struct:__anon12
jump	src/common.h	/^    unsigned short jump;	\/*  0: jump to startup code *\/$/;"	m	struct:__anon23
jump	src/common.h	/^;*\/    char jump[6]; \/* jump over the data$/;"	m	struct:__anon13
jump	src/common.h	/^;*\/    char jump[6]; \/* jump over the data$/;"	m	struct:__anon14
jump	src/common.h	/^;*\/    unsigned char jump[3];	\/* jump to boot code$/;"	m	struct:__anon11
kbd_done	src/bitmap.s	/^kbd_done:$/;"	l
kbd_done	src/second.S	/^kbd_done:$/;"	l
kbd_done	src/second.s	/^kbd_done:$/;"	l
kbd_done	src/third.s	/^kbd_done:$/;"	l
kbd_loop	src/bitmap.s	/^kbd_loop:$/;"	l
kbd_loop	src/second.S	/^kbd_loop:$/;"	l
kbd_loop	src/second.s	/^kbd_loop:$/;"	l
kbd_loop	src/third.s	/^kbd_loop:$/;"	l
kbd_loop1	src/bitmap.s	/^kbd_loop1:$/;"	l
kbd_loop1	src/second.S	/^kbd_loop1:$/;"	l
kbd_loop1	src/second.s	/^kbd_loop1:$/;"	l
kbd_loop1	src/third.s	/^kbd_loop1:$/;"	l
kbd_present	src/bitmap.s	/^kbd_present:$/;"	l
kbd_present	src/second.S	/^kbd_present:$/;"	l
kbd_present	src/second.s	/^kbd_present:$/;"	l
kbd_present	src/third.s	/^kbd_present:$/;"	l
kbd_skip	src/bitmap.s	/^kbd_skip:$/;"	l
kbd_skip	src/second.S	/^kbd_skip:$/;"	l
kbd_skip	src/second.s	/^kbd_skip:$/;"	l
kbd_skip	src/third.s	/^kbd_skip:$/;"	l
kbinp	src/bitmap.s	/^kbinp:$/;"	l
kbinp	src/second.S	/^kbinp:	$/;"	l
kbinp	src/second.s	/^kbinp:$/;"	l
kbinp	src/third.s	/^kbinp:$/;"	l
kbtest	src/bitmap.s	/^kbtest:$/;"	l
kbtest	src/second.S	/^kbtest:$/;"	l
kbtest	src/second.s	/^kbtest:$/;"	l
kbtest	src/third.s	/^kbtest:$/;"	l
kbtest8	src/bitmap.s	/^kbtest8:$/;"	l
kbtest8	src/second.S	/^kbtest8:$/;"	l
kbtest8	src/second.s	/^kbtest8:$/;"	l
kbtest8	src/third.s	/^kbtest8:$/;"	l
kbtest9	src/bitmap.s	/^kbtest9:$/;"	l
kbtest9	src/second.S	/^kbtest9:$/;"	l
kbtest9	src/second.s	/^kbtest9:$/;"	l
kbtest9	src/third.s	/^kbtest9:$/;"	l
kernel	src/device.c	/^	int kernel;	\/* volume ID as read using kernel I\/O *\/$/;"	m	struct:VolumeMgmt::__anon29	file:
keyerr	src/bitmap.s	/^keyerr:$/;"	l
keyerr	src/second.S	/^keyerr:$/;"	l
keyerr	src/second.s	/^keyerr:$/;"	l
keyerr	src/third.s	/^keyerr:$/;"	l
keytab	src/common.h	/^;*\/    SECTOR_ADDR keytab; \/* keyboard translation table$/;"	m	struct:__anon13
keywords	src/cfg.c	/^static CONFIG *keywords[] = {cf_top, cf_identify, cf_options, cf_all,$/;"	v	file:
kill_motor	src/bootsect.S	/^kill_motor:$/;"	l
kill_motor	src/bootsect.s	/^kill_motor:$/;"	l
kt_al	src/bitmap.s	/^kt_al: .byte 0$/;"	l
kt_al	src/second.S	/^kt_al:	.byte	0$/;"	l
kt_al	src/second.s	/^kt_al: .byte 0$/;"	l
kt_al	src/third.s	/^kt_al: .byte 0$/;"	l
kt_cx	src/bitmap.s	/^kt_cx: .word 0 ; keyboard translation table$/;"	l
kt_cx	src/second.S	/^kt_cx:	.word	0		; keyboard translation table$/;"	l
kt_cx	src/second.s	/^kt_cx: .word 0 ; keyboard translation table$/;"	l
kt_cx	src/third.s	/^kt_cx: .word 0 ; keyboard translation table$/;"	l
kt_dx	src/bitmap.s	/^kt_dx: .word 0$/;"	l
kt_dx	src/second.S	/^kt_dx:	.word	0$/;"	l
kt_dx	src/second.s	/^kt_dx: .word 0$/;"	l
kt_dx	src/third.s	/^kt_dx: .word 0$/;"	l
kt_nowrite	src/bitmap.s	/^kt_nowrite:$/;"	l
kt_nowrite	src/second.S	/^kt_nowrite:$/;"	l
kt_nowrite	src/second.s	/^kt_nowrite:$/;"	l
kt_nowrite	src/third.s	/^kt_nowrite:$/;"	l
kt_read	src/bitmap.s	/^kt_read: ; Keytable read$/;"	l
kt_read	src/second.S	/^kt_read:		; KEYTABLE read$/;"	l
kt_read	src/second.s	/^kt_read: ; Keytable read$/;"	l
kt_read	src/third.s	/^kt_read: ; Keytable read$/;"	l
kt_set	src/bitmap.s	/^kt_set:$/;"	l
kt_set	src/second.S	/^kt_set:$/;"	l
kt_set	src/second.s	/^kt_set:$/;"	l
kt_set	src/third.s	/^kt_set:$/;"	l
kt_write	src/bitmap.s	/^kt_write:$/;"	l
kt_write	src/second.S	/^kt_write:$/;"	l
kt_write	src/second.s	/^kt_write:$/;"	l
kt_write	src/third.s	/^kt_write:$/;"	l
l	src/common.h	/^    } l;$/;"	m	union:__anon18	typeref:struct:__anon18::__anon20
l	src/dump.S	/^l:	call	say		! output message$/;"	l
l_hls	src/edit.c	/^			s_hls[NPALETTE], v_hsv[NPALETTE], l_hls[NPALETTE];$/;"	v	file:
label	src/bsect.c	/^    char *label;$/;"	m	struct:Pass	file:
lagain	src/first.S	/^lagain:$/;"	l
lagain	src/first.s	/^lagain:$/;"	l
large_okay	src/bitmap.s	/^large_okay:$/;"	l
large_okay	src/second.S	/^large_okay:$/;"	l
large_okay	src/second.s	/^large_okay:$/;"	l
large_okay	src/third.s	/^large_okay:$/;"	l
last	src/map.c	/^static MAP_ENTRY *map,*last;$/;"	v	file:
last_dev	src/geometry.c	/^static int last_dev(int major,int increment)$/;"	f	file:
last_good_disk	diagnose/test4.c	/^int last_good_disk;$/;"	v
last_item	src/cfg.c	/^static char *last_token = NULL,*last_item = NULL,*last_value = NULL;$/;"	v	file:
last_token	src/cfg.c	/^static char *last_token = NULL,*last_item = NULL,*last_value = NULL;$/;"	v	file:
last_value	src/cfg.c	/^static char *last_token = NULL,*last_item = NULL,*last_value = NULL;$/;"	v	file:
launch	src/bitmap.s	/^launch:$/;"	l
launch	src/second.S	/^launch:$/;"	l
launch	src/second.s	/^launch:$/;"	l
launch	src/third.s	/^launch:$/;"	l
launch2	src/bitmap.s	/^launch2:$/;"	l
launch2	src/second.S	/^launch2:$/;"	l
launch2	src/second.s	/^launch2:$/;"	l
launch2	src/third.s	/^launch2:$/;"	l
layout	src/md-int.h	/^	md_u32 layout;		\/*  0 the array's physical layout	      *\/$/;"	m	struct:md_array_info_s
layout	src/md-int.h	/^	md_u32 layout;		\/*  0 the array's physical layout	      *\/$/;"	m	struct:md_superblock_s
lba32	src/common.c	/^      nowarn = 0, lba32 = 0, autoauto = 0, passw = 0, geometric = 0, eflag = 0;$/;"	v
lba_avail	src/bitmap.s	/^lba_avail:$/;"	l
lba_avail	src/disk.s	/^lba_avail:$/;"	l
lba_avail	src/read.S	/^lba_avail:$/;"	l
lba_avail	src/second.s	/^lba_avail:$/;"	l
lba_avail	src/third.s	/^lba_avail:$/;"	l
lba_cntltmax	src/bitmap.s	/^lba_cntltmax: push ax$/;"	l
lba_cntltmax	src/disk.s	/^lba_cntltmax:   push    ax$/;"	l
lba_cntltmax	src/read.S	/^lba_cntltmax:   push    ax$/;"	l
lba_cntltmax	src/second.s	/^lba_cntltmax: push ax$/;"	l
lba_cntltmax	src/third.s	/^lba_cntltmax: push ax$/;"	l
lba_g3	src/bitmap.s	/^lba_g3: pop dx$/;"	l
lba_g3	src/disk.s	/^lba_g3:         pop     dx$/;"	l
lba_g3	src/read.S	/^lba_g3:         pop     dx$/;"	l
lba_g3	src/second.s	/^lba_g3: pop dx$/;"	l
lba_g3	src/third.s	/^lba_g3: pop dx$/;"	l
lba_geom_error	src/bitmap.s	/^lba_geom_error:$/;"	l
lba_geom_error	src/disk.s	/^lba_geom_error:$/;"	l
lba_geom_error	src/read.S	/^lba_geom_error:$/;"	l
lba_geom_error	src/second.s	/^lba_geom_error:$/;"	l
lba_geom_error	src/third.s	/^lba_geom_error:$/;"	l
lba_geom_error2	src/bitmap.s	/^lba_geom_error2:$/;"	l
lba_geom_error2	src/disk.s	/^lba_geom_error2:$/;"	l
lba_geom_error2	src/read.S	/^lba_geom_error2:$/;"	l
lba_geom_error2	src/second.s	/^lba_geom_error2:$/;"	l
lba_geom_error2	src/third.s	/^lba_geom_error2:$/;"	l
lba_more_small	src/bitmap.s	/^lba_more_small:$/;"	l
lba_more_small	src/disk.s	/^lba_more_small:$/;"	l
lba_more_small	src/read.S	/^lba_more_small:$/;"	l
lba_more_small	src/second.s	/^lba_more_small:$/;"	l
lba_more_small	src/third.s	/^lba_more_small:$/;"	l
lba_read	src/bitmap.s	/^lba_read: push si ;save some registers$/;"	l
lba_read	src/disk.s	/^lba_read:       push    si              ;save some registers$/;"	l
lba_read	src/read.S	/^lba_read:       push    si              ;save some registers$/;"	l
lba_read	src/second.s	/^lba_read: push si ;save some registers$/;"	l
lba_read	src/third.s	/^lba_read: push si ;save some registers$/;"	l
lba_read_exit	src/bitmap.s	/^lba_read_exit:$/;"	l
lba_read_exit	src/disk.s	/^lba_read_exit:$/;"	l
lba_read_exit	src/read.S	/^lba_read_exit:$/;"	l
lba_read_exit	src/second.s	/^lba_read_exit:$/;"	l
lba_read_exit	src/third.s	/^lba_read_exit:$/;"	l
lba_read_exit1	src/bitmap.s	/^lba_read_exit1: jmp lba_read_exit$/;"	l
lba_read_exit1	src/disk.s	/^lba_read_exit1:	jmp	lba_read_exit$/;"	l
lba_read_exit1	src/read.S	/^lba_read_exit1:	jmp	lba_read_exit$/;"	l
lba_read_exit1	src/second.s	/^lba_read_exit1: jmp lba_read_exit$/;"	l
lba_read_exit1	src/third.s	/^lba_read_exit1: jmp lba_read_exit$/;"	l
lba_read_exit_e	src/bitmap.s	/^lba_read_exit_e:$/;"	l
lba_read_exit_e	src/disk.s	/^lba_read_exit_e:$/;"	l
lba_read_exit_e	src/read.S	/^lba_read_exit_e:$/;"	l
lba_read_exit_e	src/second.s	/^lba_read_exit_e:$/;"	l
lba_read_exit_e	src/third.s	/^lba_read_exit_e:$/;"	l
lba_small	src/bitmap.s	/^lba_small: ;must get the disk geometry$/;"	l
lba_small	src/disk.s	/^lba_small:                      ;must get the disk geometry$/;"	l
lba_small	src/read.S	/^lba_small:                      ;must get the disk geometry$/;"	l
lba_small	src/second.s	/^lba_small: ;must get the disk geometry$/;"	l
lba_small	src/third.s	/^lba_small: ;must get the disk geometry$/;"	l
ldone	src/bitmap.s	/^ldone: test dl,#3 ; already at BOL ?$/;"	l
ldone	src/second.S	/^ldone:	test	dl,#3		; already at BOL ?$/;"	l
ldone	src/second.s	/^ldone: test dl,#3 ; already at BOL ?$/;"	l
ldone	src/third.s	/^ldone: test dl,#3 ; already at BOL ?$/;"	l
ldsc	src/bitmap.s	/^ldsc:$/;"	l
ldsc	src/second.S	/^ldsc:$/;"	l
ldsc	src/second.s	/^ldsc:$/;"	l
ldsc	src/third.s	/^ldsc:$/;"	l
len_title	src/common.h	/^;*\/	unsigned char len_title;	\/* length of the title string$/;"	m	struct:__anon15
length	diagnose/test4.c	/^	length, length_hi,$/;"	m	struct:__anon58	file:
length	src/first.S	/^length	=  *-sig		! for the stage 1 vs stage 2 comparison$/;"	d
length	src/first.s	/^length = *-sig ! for the stage 1 vs stage 2 comparison$/;"	d
length	src/geometry.c	/^    uint64_t start,length,offset;$/;"	m	struct:_dm_target	file:
length	src/probe.c	/^      short length;$/;"	m	struct:Buf::__anon53	file:
length	src/probe.c	/^      short length;$/;"	m	struct:Buf::__anon54	file:
length_hi	diagnose/test4.c	/^	length, length_hi,$/;"	m	struct:__anon58	file:
level	src/md-int.h	/^	md_u32 level;		\/*  7 Raid personality			      *\/$/;"	m	struct:md_superblock_s
level	src/md-int.h	/^	md_u32 level;$/;"	m	struct:md_array_info_s
lfetch	src/bitmap.s	/^lfetch: mov si,moff ; get map offset$/;"	l
lfetch	src/second.S	/^lfetch:	mov	si,moff		; get map offset$/;"	l
lfetch	src/second.s	/^lfetch: mov si,moff ; get map offset$/;"	l
lfetch	src/third.s	/^lfetch: mov si,moff ; get map offset$/;"	l
lfile	src/bitmap.s	/^lfile: call load$/;"	l
lfile	src/second.S	/^lfile:	call	load$/;"	l
lfile	src/second.s	/^lfile: call load$/;"	l
lfile	src/third.s	/^lfile: call load$/;"	l
lh	src/edit.c	/^static	BITMAPLILOHEADER *lh = (void*)(tm.buffer +$/;"	v	file:
lh	src/edit.c	/^static BITMAPLILOHEADER lh;$/;"	v	file:
lh0	src/edit.c	/^static BITMAPLILOHEADER lh0 = {$/;"	v	file:
limage	src/bitmap.S	/^limage:	dw	0	; longest length of image name$/;"	d
limage	src/bitmap.s	/^limage: dw 0 ; longest length of image name$/;"	d
limage	src/crt.S	/^limage:	dw	0	; longest length of image name$/;"	d
limage	src/third.s	/^limage: dw 0 ; longest length of image name$/;"	d
limit	diagnose/test4.c	/^	unsigned short limit;$/;"	m	struct:gdt_entry	file:
limit2	diagnose/test4.c	/^	unsigned char  limit2;	\/* limit in low nibble, granularity & 32-bit in high nibble *\/$/;"	m	struct:gdt_entry	file:
line_num	src/cfg.c	/^static int line_num;$/;"	v	file:
linear	diagnose/test4.c	/^unsigned long linear(void *ptr)$/;"	f
linear	diagnose/test5.c	/^unsigned long linear(void *ptr)$/;"	f
linear	src/common.c	/^int verbose = 0, test = 0, compact = 0, linear = 0, raid_flags = 0, zflag = 0,$/;"	v
list	src/bitmap.s	/^list: mov byte ptr (bx),#0 ; set EOL marker$/;"	l
list	src/probe.c	/^	list[] = {$/;"	v	typeref:struct:Probes	file:
list	src/second.S	/^list:	mov	byte ptr (bx),#0 ; set EOL marker$/;"	l
list	src/second.s	/^list: mov byte ptr (bx),#0 ; set EOL marker$/;"	l
list	src/temp.c	/^static TEMP *list = NULL;$/;"	v	file:
list	src/third.s	/^list: mov byte ptr (bx),#0 ; set EOL marker$/;"	l
list_index	src/raid.c	/^static int list_index[MAX_RAID];$/;"	v	file:
lkcbuf	src/bitmap.s	/^lkcbuf = lkwbuf+2$/;"	d
lkcbuf	src/second.S	/^lkcbuf	=	lkwbuf+2$/;"	d
lkcbuf	src/second.s	/^lkcbuf = lkwbuf+2$/;"	d
lkcbuf	src/third.s	/^lkcbuf = lkwbuf+2$/;"	d
lkwbuf	src/bitmap.s	/^lkwbuf = cmdline+CL_LENGTH+2 ; this is a word$/;"	d
lkwbuf	src/second.S	/^lkwbuf	=	cmdline+CL_LENGTH+2	; this is a word$/;"	d
lkwbuf	src/second.s	/^lkwbuf = cmdline+CL_LENGTH+2 ; this is a word$/;"	d
lkwbuf	src/third.s	/^lkwbuf = cmdline+CL_LENGTH+2 ; this is a word$/;"	d
ll1	src/crt.S	/^ll1:	cmp	ax,bx$/;"	l
ll1	src/third.s	/^ll1: cmp ax,bx$/;"	l
ll2	src/crt.S	/^ll2:	add	dh,al$/;"	l
ll2	src/third.s	/^ll2: add dh,al$/;"	l
ll3	src/crt.S	/^ll3:	call	mn_rdcha	; read char and attribute$/;"	l
ll3	src/third.s	/^ll3: call mn_rdcha ; read char and attribute$/;"	l
lloff_t	src/partition.h	/^typedef long long lloff_t;$/;"	t
lloop	src/bitmap.s	/^lloop: testb (si),#0xff ; done ?$/;"	l
lloop	src/second.S	/^lloop:	testb	(si),#0xff	; done ?$/;"	l
lloop	src/second.s	/^lloop: testb (si),#0xff ; done ?$/;"	l
lloop	src/third.s	/^lloop: testb (si),#0xff ; done ?$/;"	l
ln_do_read	src/bitmap.s	/^ln_do_read:$/;"	l
ln_do_read	src/second.S	/^ln_do_read:$/;"	l
ln_do_read	src/second.s	/^ln_do_read:$/;"	l
ln_do_read	src/third.s	/^ln_do_read:$/;"	l
lnread	src/bitmap.s	/^lnread:$/;"	l
lnread	src/second.S	/^lnread:$/;"	l
lnread	src/second.s	/^lnread:$/;"	l
lnread	src/third.s	/^lnread:$/;"	l
load	src/bitmap.s	/^load: push es ; save ES:BX$/;"	l
load	src/second.S	/^load:	push	es		; save ES:BX$/;"	l
load	src/second.s	/^load: push es ; save ES:BX$/;"	l
load	src/third.s	/^load: push es ; save ES:BX$/;"	l
load1	src/bitmap.s	/^load1: call loadit ; load the sector$/;"	l
load1	src/second.S	/^load1:	call	loadit		; load the sector$/;"	l
load1	src/second.s	/^load1: call loadit ; load the sector$/;"	l
load1	src/third.s	/^load1: call loadit ; load the sector$/;"	l
load_initrd	src/bitmap.s	/^load_initrd:$/;"	l
load_initrd	src/second.S	/^load_initrd:$/;"	l
load_initrd	src/second.s	/^load_initrd:$/;"	l
load_initrd	src/third.s	/^load_initrd:$/;"	l
load_map	keytab-lilo.pl	/^sub load_map$/;"	s
load_setup	src/bootsect.S	/^load_setup:$/;"	l
load_setup	src/bootsect.s	/^load_setup:$/;"	l
loader	src/common.h	/^    unsigned char loader;	\/* 16: loader type *\/$/;"	m	struct:__anon23
loadfile	src/bitmap.s	/^loadfile:$/;"	l
loadfile	src/second.S	/^loadfile:$/;"	l
loadfile	src/second.s	/^loadfile:$/;"	l
loadfile	src/third.s	/^loadfile:$/;"	l
loadit	src/bitmap.s	/^loadit: call load ; load it$/;"	l
loadit	src/chain.S	/^loadit:	mov	es,ax			! set up pointers and remember them$/;"	l
loadit	src/chain.s	/^loadit: mov es,ax ! set up pointers and remember them$/;"	l
loadit	src/second.S	/^loadit:	call	load		; load it$/;"	l
loadit	src/second.s	/^loadit: call load ; load it$/;"	l
loadit	src/third.s	/^loadit: call load ; load it$/;"	l
loadlow	src/bitmap.s	/^loadlow:$/;"	l
loadlow	src/second.S	/^loadlow:$/;"	l
loadlow	src/second.s	/^loadlow:$/;"	l
loadlow	src/third.s	/^loadlow:$/;"	l
location	src/edit.c	/^static void location(char *what, short x, short y)$/;"	f	file:
lockit	src/bitmap.s	/^lockit:$/;"	l
lockit	src/second.S	/^lockit:$/;"	l
lockit	src/second.s	/^lockit:$/;"	l
lockit	src/third.s	/^lockit:$/;"	l
locopt	src/bitmap.s	/^locopt: lodsb$/;"	l
locopt	src/second.S	/^locopt:	lodsb$/;"	l
locopt	src/second.s	/^locopt: lodsb$/;"	l
locopt	src/third.s	/^locopt: lodsb$/;"	l
lookup_dev	src/device.c	/^static int lookup_dev(char *name,DEVICE *dev,int number)$/;"	f	file:
lowest	src/raid.c	/^static int lowest;$/;"	v	file:
lowlite	src/bitmap.S	/^lowlite:$/;"	l
lowlite	src/bitmap.s	/^lowlite:$/;"	l
lowlite	src/crt.S	/^lowlite:  push	bx$/;"	l
lowlite	src/third.s	/^lowlite: push bx$/;"	l
lowlite1	src/bitmap.S	/^lowlite1:$/;"	l
lowlite1	src/bitmap.s	/^lowlite1:$/;"	l
lowlite1	src/crt.S	/^lowlite1:$/;"	l
lowlite1	src/third.s	/^lowlite1:$/;"	l
lowlite2	src/bitmap.S	/^lowlite2:$/;"	l
lowlite2	src/bitmap.s	/^lowlite2:$/;"	l
lowlite3	src/bitmap.S	/^lowlite3:$/;"	l
lowlite3	src/bitmap.s	/^lowlite3:$/;"	l
lowlite4	src/bitmap.S	/^lowlite4:$/;"	l
lowlite4	src/bitmap.s	/^lowlite4:$/;"	l
lowlite5	src/bitmap.S	/^lowlite5:$/;"	l
lowlite5	src/bitmap.s	/^lowlite5:$/;"	l
lowlite9	src/bitmap.S	/^lowlite9:$/;"	l
lowlite9	src/bitmap.s	/^lowlite9:$/;"	l
lseek	diagnose/bios.c	/^lseek(fd, offt, whence)$/;"	f
lseek64	src/partition.c	/^       lloff_t lseek64(unsigned int fd, lloff_t offs, unsigned int whence)$/;"	f
lseek64	src/partition.c	54;"	d	file:
lsetup	src/bitmap.s	/^lsetup:$/;"	l
lsetup	src/second.S	/^lsetup:	$/;"	l
lsetup	src/second.s	/^lsetup:$/;"	l
lsetup	src/third.s	/^lsetup:$/;"	l
lsloop	src/bitmap.s	/^lsloop: push cx$/;"	l
lsloop	src/second.S	/^lsloop:	push	cx$/;"	l
lsloop	src/second.s	/^lsloop: push cx$/;"	l
lsloop	src/third.s	/^lsloop: push cx$/;"	l
lv_block	src/geometry.c	/^    __u32 lv_block;$/;"	m	struct:lv_bmap	file:
lv_bmap	src/geometry.c	/^struct lv_bmap {$/;"	s	file:
lv_dev	src/geometry.c	/^    dev_t lv_dev;			\/* was __u16, which is wrong *\/$/;"	m	struct:lv_bmap	file:
lvm_bmap	src/geometry.c	/^void lvm_bmap(struct lv_bmap *lbm)$/;"	f
magic	src/bitmap.h	/^   bm_uint16   magic;      \/* must be "BM" *\/$/;"	m	struct:BitMapFileHeader
magic	src/bitmap.h	/^   char	magic[4];	\/* "LILO" *\/$/;"	m	struct:BitmapLiloHeader
magic	src/disk.S	/^magic:          .word      0xAA55$/;"	l
magic	src/disk.s	/^magic:          .word      0xAA55$/;"	l
main	diagnose/test4.c	/^void main(void)$/;"	f
main	diagnose/test5.c	/^void main(void)$/;"	f
main	src/common.c	/^int main(int argc, char *argv[])$/;"	f
main	src/edit.c	/^int main(int argc, char *argv[])$/;"	f
main	src/lilo.c	/^int main(int argc,char **argv)$/;"	f
main	src/temp.c	/^int main(void)$/;"	f
major	src/geometry.c	/^    __u32 major;$/;"	m	struct:evms_version_t	file:
major	src/md-int.h	/^	md_u32 major;		\/* 1 Device major number		      *\/$/;"	m	struct:md_device_descriptor_s
major	src/md-int.h	/^	md_u32 major;$/;"	m	struct:md_disk_info_s
major	src/md-int.h	/^	md_u32 major;$/;"	m	struct:md_version
major_version	src/md-int.h	/^	md_u32 major_version;	\/*  1 major version to which the set conforms *\/$/;"	m	struct:md_superblock_s
major_version	src/md-int.h	/^	md_u32 major_version;$/;"	m	struct:md_array_info_s
make_backup	src/device.c	/^int make_backup(char *backup_file, int force_backup, BOOT_SECTOR *bsect,$/;"	f
map	src/bitmap.s	/^map: .word Map ; map to use$/;"	l
map	src/map.c	/^static MAP_ENTRY *map,*last;$/;"	v	file:
map	src/second.S	/^map:	.word	MAP		; map to use$/;"	l
map	src/second.s	/^map: .word Map ; map to use$/;"	l
map	src/third.s	/^map: .word Map ; map to use$/;"	l
map2	src/first.S	/^map2	equ	*		! addressed as ES:[map2]$/;"	d
map2	src/first.s	/^map2 equ * ! addressed as ES:[map2]$/;"	d
map_add	src/map.c	/^void map_add(GEOMETRY *geo,int from,int num_sect)$/;"	f
map_add_sector	src/map.c	/^void map_add_sector(void *sector)$/;"	f
map_add_zero	src/map.c	/^void map_add_zero(void)$/;"	f
map_alloc_page	src/map.c	/^static void map_alloc_page(int offset,SECTOR_ADDR *addr)$/;"	f	file:
map_begin_section	src/map.c	/^void map_begin_section(void)$/;"	f
map_close	src/map.c	/^void map_close(BOOT_PARAMS_2 *param2, off_t here)$/;"	f
map_compact	src/map.c	/^static void map_compact(int dont_compact)$/;"	f	file:
map_create	src/map.c	/^void map_create(char *name)$/;"	f
map_descrs	src/map.c	/^void map_descrs(DESCR_SECTORS *descr, SECTOR_ADDR* addr, SECTOR_ADDR* dflcmd)$/;"	f
map_device	src/bitmap.s	/^map_device:$/;"	l
map_device	src/second.s	/^map_device:$/;"	l
map_device	src/third.s	/^map_device:$/;"	l
map_device	src/volume.S	/^map_device:$/;"	l
map_end_section	src/map.c	/^int map_end_section(SECTOR_ADDR *addr,int dont_compact)$/;"	f
map_file	src/map.c	/^static int map_file;$/;"	v	file:
map_geo	src/map.c	/^static GEOMETRY map_geo;$/;"	v	file:
map_insert_data	src/map.c	/^off_t map_insert_data(unsigned char *data, int size)$/;"	f
map_insert_file	src/map.c	/^off_t map_insert_file(GEOMETRY *geo, int skip, int sectors)$/;"	f
map_name	src/bsect.c	/^static char *boot_devnam,*map_name;$/;"	v	file:
map_patch_first	src/map.c	/^void map_patch_first(char *name,char *str)$/;"	f
map_register	src/map.c	/^void map_register(SECTOR_ADDR *addr)$/;"	f
map_serial_no	src/common.h	/^;*\/    unsigned int map_serial_no; \/* volume serial no. \/ id containing the map file$/;"	m	struct:__anon12
map_serial_no	src/first.S	/^map_serial_no:	.long	0	! volume S\/N containing map file$/;"	l
map_serial_no	src/first.s	/^map_serial_no: .long 0 ! volume S\/N containing map file$/;"	l
map_stamp	src/common.h	/^;*\/    unsigned int map_stamp;		\/* time of creation of the map file$/;"	m	struct:__anon13
map_stamp	src/common.h	/^;*\/    unsigned int map_stamp; \/* timestamp for this installation (map creation)$/;"	m	struct:__anon12
map_write	src/map.c	/^int map_write(SECTOR_ADDR *list,int max_len,int terminate,int sa6)$/;"	f
mapfl	src/chain.s	/^mapfl: seg cs ! get next entry$/;"	l
mapfl	src/mapper.S	/^mapfl:	seg	cs		! get next entry$/;"	l
mapstamp	src/bitmap.s	/^mapstamp: .long 0$/;"	l
mapstamp	src/first.S	/^mapstamp: .long 0		! map timestamp$/;"	l
mapstamp	src/first.s	/^mapstamp: .long 0 ! map timestamp$/;"	l
mapstamp	src/second.S	/^mapstamp:	.long	0$/;"	l
mapstamp	src/second.s	/^mapstamp: .long 0$/;"	l
mapstamp	src/third.s	/^mapstamp: .long 0$/;"	l
marker	src/common.h	/^    unsigned short marker;	\/* may be zero *\/$/;"	m	struct:__anon16
master	src/raid.c	/^static int master(int device)$/;"	f	file:
max_fault	src/md-int.h	/^	int			max_fault;	\/* unused for now *\/$/;"	m	struct:md_param
max_partno	src/geometry.c	/^unsigned char max_partno[512] = {$/;"	v	file:
max_secondary	src/bitmap.s	/^max_secondary:$/;"	l
max_secondary	src/second.S	/^max_secondary:$/;"	l
max_secondary	src/second.s	/^max_secondary:$/;"	l
max_secondary	src/third.s	/^max_secondary:$/;"	l
maxcol	src/bitmap.h	/^;*\/	short maxcol, xpitch;		\/* BMP max per col, xpitch between cols$/;"	m	struct:BitmapLiloHeader
maxcol	src/common.h	/^;*\/	short maxcol, xpitch;		\/* BMP max per col, xpitch between cols$/;"	m	struct:__anon15
maxdev	src/device.c	/^static int maxdev = 0;$/;"	v	file:
may_change	src/partition.c	/^static CHANGE_RULE *may_change(unsigned char sys_ind)$/;"	f	file:
mbchain	src/bitmap.s	/^mbchain:$/;"	l
mbchain	src/second.S	/^mbchain:$/;"	l
mbchain	src/second.s	/^mbchain:$/;"	l
mbchain	src/third.s	/^mbchain:$/;"	l
mbz	src/common.h	/^    unsigned short mbz;		\/* must be zero *\/$/;"	m	struct:__anon16
md_array_info_s	src/md-int.h	/^typedef struct md_array_info_s {$/;"	s
md_array_info_t	src/md-int.h	/^} md_array_info_t;$/;"	t	typeref:struct:md_array_info_s
md_bios	src/raid.c	/^int do_md_install, ndisk, md_bios;$/;"	v
md_bios	src/raid.h	/^int do_md_install, ndisk, md_bios;$/;"	v
md_descriptor_t	src/md-int.h	/^} md_descriptor_t;$/;"	t	typeref:struct:md_device_descriptor_s
md_device_descriptor_s	src/md-int.h	/^typedef struct md_device_descriptor_s {$/;"	s
md_disk	src/raid.c	/^static DT_ENTRY *md_disk;$/;"	v	file:
md_disk_info_s	src/md-int.h	/^typedef struct md_disk_info_s {$/;"	s
md_disk_info_t	src/md-int.h	/^} md_disk_info_t;$/;"	t	typeref:struct:md_disk_info_s
md_magic	src/md-int.h	/^	md_u32 md_magic;		\/*  0 MD identifier 			      *\/$/;"	m	struct:md_superblock_s
md_minor	src/md-int.h	/^	md_u32 md_minor;	\/* 11 preferred MD minor device number	      *\/$/;"	m	struct:md_superblock_s
md_minor	src/md-int.h	/^	md_u32 md_minor;$/;"	m	struct:md_array_info_s
md_param	src/md-int.h	/^struct md_param$/;"	s
md_superblock_s	src/md-int.h	/^typedef struct md_superblock_s {$/;"	s
md_superblock_t	src/md-int.h	/^} md_superblock_t;$/;"	t	typeref:struct:md_superblock_s
md_u16	src/md-int.h	/^typedef unsigned short md_u16;$/;"	t
md_u32	src/md-int.h	/^typedef unsigned int md_u32;$/;"	t
md_u8	src/md-int.h	/^typedef unsigned char md_u8;$/;"	t
md_version	src/md-int.h	/^struct md_version {$/;"	s
mdel9	src/bitmap.S	/^mdel9:	ret$/;"	l
mdel9	src/bitmap.s	/^mdel9: ret$/;"	l
mdel9	src/crt.S	/^mdel9:	ret$/;"	l
mdel9	src/third.s	/^mdel9: ret$/;"	l
me1	src/bitmap.S	/^me1:	pop	bx$/;"	l
me2	src/bitmap.S	/^me2:	pop	bx$/;"	l
me3	src/bitmap.S	/^me3:	pop	bx$/;"	l
media	diagnose/sector.S	/^media:		.blkb	1	; media_descriptor$/;"	l
media_descriptor	diagnose/sector.S	/^media_descriptor:	db	0xf0      ; 0f9H, 0f0h, 0fAh, etc.$/;"	d
media_descriptor	src/common.h	/^;*\/    unsigned char  media_descriptor;		\/*$/;"	m	struct:__anon10
mem	src/probe.h	/^   unsigned short mem;$/;"	m	struct:Equip
mem	src/probe.h	/^   unsigned short mem;$/;"	m	struct:Video
mem_map	diagnose/test4.c	/^    } mem_map;$/;"	v	typeref:struct:__anon58
memerr	src/bitmap.s	/^memerr:$/;"	l
memerr	src/second.S	/^memerr:$/;"	l
memerr	src/second.s	/^memerr:$/;"	l
memerr	src/third.s	/^memerr:$/;"	l
memmap	src/bitmap.s	/^memmap: .word 0,0,0,0,0,0,0,0,0,0$/;"	l
memmap	src/second.S	/^memmap:	.word	0,0,0,0,0,0,0,0,0,0$/;"	l
memmap	src/second.s	/^memmap: .word 0,0,0,0,0,0,0,0,0,0$/;"	l
memmap	src/third.s	/^memmap: .word 0,0,0,0,0,0,0,0,0,0$/;"	l
menu	src/edit.c	/^static	MENUTABLE *menu = &tm.mt;$/;"	v	file:
menu_delline	src/bitmap.S	/^menu_delline:$/;"	l
menu_delline	src/bitmap.s	/^menu_delline:$/;"	l
menu_delline	src/crt.S	/^menu_delline:$/;"	l
menu_delline	src/third.s	/^menu_delline:$/;"	l
menu_do_scheme	src/bsect.c	/^static void menu_do_scheme(char *scheme, MENUTABLE *menu)$/;"	f	file:
menu_exit	src/bitmap.S	/^menu_exit:$/;"	l
menu_exit	src/bitmap.s	/^menu_exit:$/;"	l
menu_exit	src/crt.S	/^menu_exit:$/;"	l
menu_exit	src/third.s	/^menu_exit:$/;"	l
menu_form_feed	src/bitmap.S	/^menu_form_feed:$/;"	l
menu_form_feed	src/crt.S	/^menu_form_feed:$/;"	l
menu_form_feed	src/third.s	/^menu_form_feed:$/;"	l
menu_setcmd	src/bitmap.S	/^menu_setcmd:$/;"	l
menu_setcmd	src/bitmap.s	/^menu_setcmd:$/;"	l
menu_setcmd	src/crt.S	/^menu_setcmd:$/;"	l
menu_setcmd	src/third.s	/^menu_setcmd:$/;"	l
menu_setup	src/bitmap.S	/^menu_setup:$/;"	l
menu_setup	src/bitmap.s	/^menu_setup:$/;"	l
menu_setup	src/crt.S	/^menu_setup:$/;"	l
menu_setup	src/third.s	/^menu_setup:$/;"	l
menu_sig	src/common.h	/^;*\/	char menu_sig[4];	\/* "MENU" or "BMP4" signature, or NULs if not present$/;"	m	struct:__anon15
menuparams	src/bsect.c	/^static MENUTABLE menuparams;$/;"	v	file:
mflp	src/probe.c	/^      unsigned char vid, mflp, mhrd;$/;"	m	struct:Buf::__anon53	file:
mflp	src/probe.c	/^      unsigned char vid, mflp, mhrd;$/;"	m	struct:Buf::__anon54	file:
mhrd	src/probe.c	/^      unsigned char vid, mflp, mhrd;$/;"	m	struct:Buf::__anon53	file:
mhrd	src/probe.c	/^      unsigned char vid, mflp, mhrd;$/;"	m	struct:Buf::__anon54	file:
mincol	src/bitmap.h	/^;*\/	short mincol, reserved[3];	\/* BMP min per col before spill to next, reserved spacer$/;"	m	struct:BitmapLiloHeader
mincol	src/common.h	/^;*\/	short mincol, reserved[3];	\/* BMP min per col before spill to next, reserved spacer$/;"	m	struct:__anon15
minor	src/geometry.c	/^    __u32 minor;$/;"	m	struct:evms_version_t	file:
minor	src/md-int.h	/^	md_u32 minor;		\/* 2 Device minor number		      *\/$/;"	m	struct:md_device_descriptor_s
minor	src/md-int.h	/^	md_u32 minor;$/;"	m	struct:md_disk_info_s
minor	src/md-int.h	/^	md_u32 minor;$/;"	m	struct:md_version
minor_version	src/md-int.h	/^	md_u32 minor_version;	\/*  2 minor version ...			      *\/$/;"	m	struct:md_superblock_s
minor_version	src/md-int.h	/^	md_u32 minor_version;$/;"	m	struct:md_array_info_s
mn	src/edit.c	199;"	d	file:
mn	src/edit.c	721;"	d	file:
mn_at_border	src/menu.S	/^mn_at_border:	db	0x47$/;"	d
mn_at_border	src/third.s	/^mn_at_border: db 0x47$/;"	d
mn_at_hilite	src/menu.S	/^mn_at_hilite:	db	0x71$/;"	d
mn_at_hilite	src/third.s	/^mn_at_hilite: db 0x71$/;"	d
mn_at_mono	src/menu.S	/^mn_at_mono:	db	0x07,0x70,0x07,0x0F$/;"	d
mn_at_mono	src/third.s	/^mn_at_mono: db 0x07,0x70,0x07,0x0F$/;"	d
mn_at_text	src/menu.S	/^mn_at_text:	db	0x47$/;"	d
mn_at_text	src/third.s	/^mn_at_text: db 0x47$/;"	d
mn_at_title	src/menu.S	/^mn_at_title:	db	0x4E$/;"	d
mn_at_title	src/third.s	/^mn_at_title: db 0x4E$/;"	d
mn_attended	src/crt.S	/^mn_attended:$/;"	l
mn_attended	src/third.s	/^mn_attended:$/;"	l
mn_attrib	src/menu.S	/^mn_attrib:$/;"	l
mn_attrib	src/third.s	/^mn_attrib:$/;"	l
mn_box	src/menu.S	/^mn_box:	db	SE,EW,SW,NS,NW,EW,NE,NS$/;"	d
mn_box	src/third.s	/^mn_box: db SE,EW,SW,NS,NW,EW,NE,NS$/;"	d
mn_cursoroff	src/menu.S	/^mn_cursoroff:$/;"	l
mn_cursoroff	src/third.s	/^mn_cursoroff:$/;"	l
mn_dr01	src/menu.S	/^mn_dr01:$/;"	l
mn_dr01	src/third.s	/^mn_dr01:$/;"	l
mn_dr1	src/menu.S	/^mn_dr1:	call	mn_wrcha$/;"	l
mn_dr1	src/third.s	/^mn_dr1: call mn_wrcha$/;"	l
mn_dr2	src/menu.S	/^mn_dr2:	call	mn_wrcha$/;"	l
mn_dr2	src/third.s	/^mn_dr2: call mn_wrcha$/;"	l
mn_dr3	src/menu.S	/^mn_dr3:	call	mn_wrcha$/;"	l
mn_dr3	src/third.s	/^mn_dr3: call mn_wrcha$/;"	l
mn_dr4	src/menu.S	/^mn_dr4:	call	mn_wrcha$/;"	l
mn_dr4	src/third.s	/^mn_dr4: call mn_wrcha$/;"	l
mn_dr9	src/menu.S	/^mn_dr9:	ret$/;"	l
mn_dr9	src/third.s	/^mn_dr9: ret$/;"	l
mn_drawbox	src/menu.S	/^mn_drawbox:$/;"	l
mn_drawbox	src/third.s	/^mn_drawbox:$/;"	l
mn_exit_ret	src/bitmap.S	/^mn_exit_ret:$/;"	l
mn_exit_ret	src/bitmap.s	/^mn_exit_ret:$/;"	l
mn_getcursor	src/menu.S	/^mn_getcursor:$/;"	l
mn_getcursor	src/third.s	/^mn_getcursor:$/;"	l
mn_hint	src/menu.S	/^mn_hint:  db	NS,NSE,NSEW,NSW$/;"	d
mn_hint	src/third.s	/^mn_hint: db NS,NSE,NSEW,NSW$/;"	d
mn_hline	src/menu.S	/^mn_hline:$/;"	l
mn_hline	src/third.s	/^mn_hline:$/;"	l
mn_hor	src/menu.S	/^mn_hor:	db	EW,EEWW$/;"	d
mn_hor	src/third.s	/^mn_hor: db EW,EEWW$/;"	d
mn_imono	src/menu.S	/^mn_imono:$/;"	l
mn_imono	src/third.s	/^mn_imono:$/;"	l
mn_init	src/menu.S	/^mn_init:$/;"	l
mn_init	src/third.s	/^mn_init:$/;"	l
mn_init9	src/menu.S	/^mn_init9:$/;"	l
mn_init9	src/third.s	/^mn_init9:$/;"	l
mn_line00	src/menu.S	/^mn_line00:$/;"	l
mn_line00	src/third.s	/^mn_line00:$/;"	l
mn_line01	src/menu.S	/^mn_line01:$/;"	l
mn_line01	src/third.s	/^mn_line01:$/;"	l
mn_line02	src/menu.S	/^mn_line02:$/;"	l
mn_line02	src/third.s	/^mn_line02:$/;"	l
mn_line10	src/menu.S	/^mn_line10:		;do the central part of the line$/;"	l
mn_line10	src/third.s	/^mn_line10: ;do the central part of the line$/;"	l
mn_line11	src/menu.S	/^mn_line11:$/;"	l
mn_line11	src/third.s	/^mn_line11:$/;"	l
mn_line12	src/menu.S	/^mn_line12:$/;"	l
mn_line12	src/third.s	/^mn_line12:$/;"	l
mn_line20	src/menu.S	/^mn_line20:		;do the end of the line$/;"	l
mn_line20	src/third.s	/^mn_line20: ;do the end of the line$/;"	l
mn_line21	src/menu.S	/^mn_line21:$/;"	l
mn_line21	src/third.s	/^mn_line21:$/;"	l
mn_line22	src/menu.S	/^mn_line22:$/;"	l
mn_line22	src/third.s	/^mn_line22:$/;"	l
mn_max_row_col	src/menu.S	/^mn_max_row_col: dw	0$/;"	d
mn_max_row_col	src/third.s	/^mn_max_row_col: dw 0$/;"	d
mn_page	src/menu.S	/^mn_page:	db	0$/;"	d
mn_rdcha	src/menu.S	/^mn_rdcha:$/;"	l
mn_rdcha	src/third.s	/^mn_rdcha:$/;"	l
mn_setcursor	src/menu.S	/^mn_setcursor:$/;"	l
mn_setcursor	src/third.s	/^mn_setcursor:$/;"	l
mn_ver	src/menu.S	/^mn_ver:	db	NS,NNSS$/;"	d
mn_ver	src/third.s	/^mn_ver: db NS,NNSS$/;"	d
mn_vint	src/menu.S	/^mn_vint:  db	EW,SEW,NSEW,NEW$/;"	d
mn_vint	src/third.s	/^mn_vint: db EW,SEW,NSEW,NEW$/;"	d
mn_vline	src/menu.S	/^mn_vline:$/;"	l
mn_vline	src/third.s	/^mn_vline:$/;"	l
mn_wrcha	src/menu.S	/^mn_wrcha:$/;"	l
mn_wrcha	src/third.s	/^mn_wrcha:$/;"	l
mn_wrs1	src/menu.S	/^mn_wrs1:$/;"	l
mn_wrs1	src/third.s	/^mn_wrs1:$/;"	l
mn_wrs9	src/menu.S	/^mn_wrs9:$/;"	l
mn_wrs9	src/third.s	/^mn_wrs9:$/;"	l
mn_wrstra	src/menu.S	/^mn_wrstra:$/;"	l
mn_wrstra	src/third.s	/^mn_wrstra:$/;"	l
mode	src/probe.c	/^static int mode, col, row, page;$/;"	v	file:
modelist	src/disk.S	/^modelist:$/;"	l
modelist	src/disk.s	/^modelist:$/;"	l
modelist	src/pseudo.S	/^modelist:$/;"	l
moff	src/bitmap.s	/^moff: .word 0 ; map offset$/;"	l
moff	src/second.S	/^moff:	.word	0		; map offset$/;"	l
moff	src/second.s	/^moff: .word 0 ; map offset$/;"	l
moff	src/third.s	/^moff: .word 0 ; map offset$/;"	l
mov_ar	src/second.S	/^mov_ar:	.ascii	" -> "$/;"	l
mov_ext_mem	diagnose/test4.c	/^void mov_ext_mem(void)$/;"	f	file:
mov_sz	src/second.S	/^mov_sz:	.ascii	", words "$/;"	l
ms_do_find	src/bitmap.S	/^ms_do_find:$/;"	l
ms_do_find	src/bitmap.s	/^ms_do_find:$/;"	l
ms_len	src/bitmap.s	/^ms_len: .word 0 ; initial greeting message$/;"	l
ms_len	src/second.S	/^ms_len:	.word	0		; initial greeting message$/;"	l
ms_len	src/second.s	/^ms_len: .word 0 ; initial greeting message$/;"	l
ms_len	src/third.s	/^ms_len: .word 0 ; initial greeting message$/;"	l
msdos_boot_data	diagnose/sector.S	/^msdos_boot_data:$/;"	l
mset1	src/bitmap.S	/^mset1:	lodsb$/;"	l
mset1	src/bitmap.s	/^mset1: lodsb$/;"	l
mset1	src/crt.S	/^mset1:	lodsb$/;"	l
mset1	src/third.s	/^mset1: lodsb$/;"	l
mset6	src/bitmap.S	/^mset6:$/;"	l
mset6	src/bitmap.s	/^mset6:$/;"	l
mset6	src/crt.S	/^mset6:$/;"	l
mset6	src/third.s	/^mset6:$/;"	l
msg	src/common.h	/^;*\/	SECTOR_ADDR msg; \/* initial greeting message$/;"	m	struct:__anon15
msg1	src/bootsect.S	/^msg1:$/;"	l
msg1	src/bootsect.s	/^msg1:$/;"	l
msg_arr	src/volume.S	/^msg_arr:  .ascii	" -> "$/;"	l
msg_bc	src/bitmap.s	/^msg_bc: .ascii "BIOS data check "$/;"	l
msg_bc	src/second.S	/^msg_bc:	.ascii	"BIOS data check "$/;"	l
msg_bc	src/second.s	/^msg_bc: .ascii "BIOS data check "$/;"	l
msg_bc	src/third.s	/^msg_bc: .ascii "BIOS data check "$/;"	l
msg_bm	src/bitmap.s	/^msg_bm: .byte 10$/;"	l
msg_bm	src/second.S	/^msg_bm:	.byte	10$/;"	l
msg_bm	src/second.s	/^msg_bm: .byte 10$/;"	l
msg_bm	src/third.s	/^msg_bm: .byte 10$/;"	l
msg_by	src/bitmap.s	/^msg_by: .ascii "bypassed\\n"$/;"	l
msg_by	src/second.S	/^msg_by:	.ascii	"bypassed\\n"$/;"	l
msg_by	src/second.s	/^msg_by: .ascii "bypassed\\n"$/;"	l
msg_by	src/third.s	/^msg_by: .ascii "bypassed\\n"$/;"	l
msg_chkerr	src/bitmap.s	/^msg_chkerr:$/;"	l
msg_chkerr	src/second.S	/^msg_chkerr:$/;"	l
msg_chkerr	src/second.s	/^msg_chkerr:$/;"	l
msg_chkerr	src/third.s	/^msg_chkerr:$/;"	l
msg_chkkey	src/bitmap.s	/^msg_chkkey:$/;"	l
msg_chkkey	src/second.S	/^msg_chkkey:$/;"	l
msg_chkkey	src/second.s	/^msg_chkkey:$/;"	l
msg_chkkey	src/third.s	/^msg_chkkey:$/;"	l
msg_confl	src/bitmap.s	/^msg_confl:$/;"	l
msg_confl	src/second.S	/^msg_confl:$/;"	l
msg_confl	src/second.s	/^msg_confl:$/;"	l
msg_confl	src/third.s	/^msg_confl:$/;"	l
msg_cont	src/chain.S	/^msg_cont: .ascii  "\\r\\nHit any key to continue ..."$/;"	l
msg_dupl	src/bitmap.s	/^msg_dupl:$/;"	l
msg_dupl	src/second.s	/^msg_dupl:$/;"	l
msg_dupl	src/third.s	/^msg_dupl:$/;"	l
msg_dupl	src/volume.S	/^msg_dupl:$/;"	l
msg_fs_changed	src/second.S	/^msg_fs_changed:$/;"	l
msg_fs_okay	src/second.S	/^msg_fs_okay:$/;"	l
msg_gk	src/second.S	/^msg_gk:	.ascii	" returned by 'get_K'\\n"$/;"	l
msg_high	src/second.S	/^msg_high:  .ascii " high"$/;"	l
msg_hma	src/second.S	/^msg_hma: .ascii	" is the HMA\\n"$/;"	l
msg_kbtest	src/second.S	/^msg_kbtest:$/;"	l
msg_l	src/bitmap.s	/^msg_l: .ascii "Loading "$/;"	l
msg_l	src/second.S	/^msg_l:	.ascii	"Loading "$/;"	l
msg_l	src/second.s	/^msg_l: .ascii "Loading "$/;"	l
msg_l	src/third.s	/^msg_l: .ascii "Loading "$/;"	l
msg_len	src/common.h	/^;*\/    unsigned short msg_len; \/* 0 if none$/;"	m	struct:__anon13
msg_load	src/chain.S	/^msg_load:$/;"	l
msg_low	src/second.S	/^msg_low: .ascii	" low"$/;"	l
msg_me	src/bitmap.s	/^msg_me: .byte 10$/;"	l
msg_me	src/second.S	/^msg_me: .byte	10$/;"	l
msg_me	src/second.s	/^msg_me: .byte 10$/;"	l
msg_me	src/third.s	/^msg_me: .byte 10$/;"	l
msg_mem	src/bitmap.s	/^msg_mem: .ascii "EBDA is big; kernel setup stack overlaps LILO second stage"$/;"	l
msg_mem	src/second.S	/^msg_mem: .ascii	"EBDA is big; kernel setup stack overlaps LILO second stage"$/;"	l
msg_mem	src/second.s	/^msg_mem: .ascii "EBDA is big; kernel setup stack overlaps LILO second stage"$/;"	l
msg_mem	src/third.s	/^msg_mem: .ascii "EBDA is big; kernel setup stack overlaps LILO second stage"$/;"	l
msg_new	src/chain.S	/^msg_new:$/;"	l
msg_nf	src/bitmap.s	/^msg_nf: .ascii "No such image. [Tab] shows a list."$/;"	l
msg_nf	src/second.S	/^msg_nf:	.ascii	"No such image. [Tab] shows a list."$/;"	l
msg_nf	src/second.s	/^msg_nf: .ascii "No such image. [Tab] shows a list."$/;"	l
msg_nf	src/third.s	/^msg_nf: .ascii "No such image. [Tab] shows a list."$/;"	l
msg_no_keyboard	src/second.S	/^msg_no_keyboard:$/;"	l
msg_nostar	src/volume.S	/^msg_nostar:	.ascii	"   "$/;"	l
msg_old	src/chain.S	/^msg_old:$/;"	l
msg_p	src/bitmap.s	/^msg_p: .ascii "boot: "$/;"	l
msg_p	src/second.S	/^msg_p:	.ascii	"boot: "$/;"	l
msg_p	src/second.s	/^msg_p: .ascii "boot: "$/;"	l
msg_p	src/third.s	/^msg_p: .ascii "boot: "$/;"	l
msg_pf	src/bitmap.s	/^msg_pf: .ascii "Sorry."$/;"	l
msg_pf	src/second.S	/^msg_pf:	.ascii	"Sorry."$/;"	l
msg_pf	src/second.s	/^msg_pf: .ascii "Sorry."$/;"	l
msg_pf	src/third.s	/^msg_pf: .ascii "Sorry."$/;"	l
msg_pl	src/second.S	/^msg_pl:	.ascii	"\\nParameter line = "$/;"	l
msg_plus	src/volume.S	/^msg_plus: .ascii	" + "$/;"	l
msg_pw	src/bitmap.s	/^msg_pw: .ascii "Password: "$/;"	l
msg_pw	src/second.S	/^msg_pw:	.ascii	"Password: "$/;"	l
msg_pw	src/second.s	/^msg_pw: .ascii "Password: "$/;"	l
msg_pw	src/third.s	/^msg_pw: .ascii "Password: "$/;"	l
msg_rd	src/second.S	/^msg_rd:	.byte	10$/;"	l
msg_rd2	src/second.S	/^msg_rd2: .byte	10$/;"	l
msg_rd4M	src/bitmap.s	/^msg_rd4M: .byte 10$/;"	l
msg_rd4M	src/second.S	/^msg_rd4M: .byte	10$/;"	l
msg_rd4M	src/second.s	/^msg_rd4M: .byte 10$/;"	l
msg_rd4M	src/third.s	/^msg_rd4M: .byte 10$/;"	l
msg_re	src/bitmap.s	/^msg_re: .byte 10$/;"	l
msg_re	src/second.S	/^msg_re:	.byte	10$/;"	l
msg_re	src/second.s	/^msg_re: .byte 10$/;"	l
msg_re	src/third.s	/^msg_re: .byte 10$/;"	l
msg_real	src/second.S	/^msg_real:$/;"	l
msg_rw	src/volume.S	/^msg_rw:	.ascii	"RAID physical write: "$/;"	l
msg_s	src/bitmap.s	/^msg_s: .ascii "successful\\n"$/;"	l
msg_s	src/second.S	/^msg_s:	.ascii	"successful\\n"$/;"	l
msg_s	src/second.s	/^msg_s: .ascii "successful\\n"$/;"	l
msg_s	src/third.s	/^msg_s: .ascii "successful\\n"$/;"	l
msg_sigerr	src/bitmap.s	/^msg_sigerr:$/;"	l
msg_sigerr	src/second.S	/^msg_sigerr:$/;"	l
msg_sigerr	src/second.s	/^msg_sigerr:$/;"	l
msg_sigerr	src/third.s	/^msg_sigerr:$/;"	l
msg_space	src/volume.S	/^msg_space = msg_nostar$/;"	d
msg_star	src/volume.S	/^msg_star:	.ascii	" * "$/;"	l
msg_swap13	src/chain.S	/^msg_swap13:$/;"	l
msg_time	src/bitmap.s	/^msg_time:$/;"	l
msg_time	src/second.S	/^msg_time:$/;"	l
msg_time	src/second.s	/^msg_time:$/;"	l
msg_time	src/third.s	/^msg_time:$/;"	l
msg_tt	src/volume.S	/^msg_tt:	.ascii	"The device translate table:\\n"$/;"	l
msg_v	src/bitmap.s	/^msg_v: .byte 10$/;"	l
msg_v	src/second.S	/^msg_v:	.byte	10$/;"	l
msg_v	src/second.s	/^msg_v: .byte 10$/;"	l
msg_v	src/third.s	/^msg_v: .byte 10$/;"	l
msg_virtual	src/second.S	/^msg_virtual:$/;"	l
msg_vmwarn	src/bitmap.s	/^msg_vmwarn:$/;"	l
msg_vmwarn	src/second.S	/^msg_vmwarn:$/;"	l
msg_vmwarn	src/second.s	/^msg_vmwarn:$/;"	l
msg_vmwarn	src/third.s	/^msg_vmwarn:$/;"	l
msg_voltab	src/volume.S	/^msg_voltab:$/;"	l
msg_where	src/second.S	/^msg_where:$/;"	l
msg_wrerr	src/bitmap.s	/^msg_wrerr: .ascii "\\nMap file write; BIOS error code = 0x"$/;"	l
msg_wrerr	src/second.S	/^msg_wrerr:	.ascii	"\\nMap file write; BIOS error code = 0x"$/;"	l
msg_wrerr	src/second.s	/^msg_wrerr: .ascii "\\nMap file write; BIOS error code = 0x"$/;"	l
msg_wrerr	src/third.s	/^msg_wrerr: .ascii "\\nMap file write; BIOS error code = 0x"$/;"	l
msg_wrerr3	src/bitmap.s	/^msg_wrerr3: .ascii "\\nMap file: WRITE PROTECT\\n"$/;"	l
msg_wrerr3	src/second.S	/^msg_wrerr3:	.ascii	"\\nMap file: WRITE PROTECT\\n"$/;"	l
msg_wrerr3	src/second.s	/^msg_wrerr3: .ascii "\\nMap file: WRITE PROTECT\\n"$/;"	l
msg_wrerr3	src/third.s	/^msg_wrerr3: .ascii "\\nMap file: WRITE PROTECT\\n"$/;"	l
msg_write	src/chain.S	/^msg_write:$/;"	l
msgs	src/dump.S	/^msgs:	.byte	13,10$/;"	l
mt	src/edit.c	/^	   MENUTABLE mt;$/;"	m	union:__anon31	file:
mt_at_border	src/common.s	/^						mt_at_border:	.blkb	1$/;"	l
mt_at_hilite	src/common.s	/^						mt_at_hilite:	.blkb	1$/;"	l
mt_at_text	src/common.s	/^						mt_at_text:	.blkb	1$/;"	l
mt_at_title	src/common.s	/^						mt_at_title:	.blkb	1$/;"	l
mt_bg	src/common.s	/^						mt_bg:		.blkw	1$/;"	l
mt_cksum	src/common.s	/^						mt_cksum:	.blkw	2$/;"	l
mt_col	src/common.s	/^						mt_col:		.blkw	1$/;"	l
mt_descr	src/common.h	/^;*\/	SECTOR_ADDR mt_descr[MAX_DESCR_SECS];	\/* descriptor disk addresses$/;"	m	struct:__anon15
mt_descr	src/common.s	/^						mt_descr:	.blkb	sa_size*MAX_DESCR_SECS_asm$/;"	l
mt_dflcmd	src/common.s	/^						mt_dflcmd:	.blkb	sa_size$/;"	l
mt_fg	src/common.s	/^						mt_fg:		.blkw	1$/;"	l
mt_flag	src/common.h	/^;*\/	unsigned char mt_flag;		\/* contains the FLAG_NOBD only$/;"	m	struct:__anon15
mt_flag	src/common.s	/^						mt_flag:	.blkb	1$/;"	l
mt_h_bg	src/common.s	/^						mt_h_bg:	.blkw	1$/;"	l
mt_h_fg	src/common.s	/^						mt_h_fg:	.blkw	1$/;"	l
mt_h_sh	src/common.s	/^						mt_h_sh:	.blkw	1$/;"	l
mt_len_title	src/common.s	/^						mt_len_title:	.blkb	1$/;"	l
mt_maxcol	src/common.s	/^						mt_maxcol:	.blkw	1$/;"	l
mt_mincol	src/common.s	/^						mt_mincol:	.blkw	1$/;"	l
mt_msg	src/common.s	/^						mt_msg:	.blkb	sa_size$/;"	l
mt_ncol	src/common.s	/^						mt_ncol:	.blkw	1$/;"	l
mt_raid_dev_mask	src/common.s	/^						mt_raid_dev_mask: .blkw	1$/;"	l
mt_raid_offset	src/common.s	/^						mt_raid_offset:	.blkw	MAX_RAID_DEVICES_asm*2$/;"	l
mt_row	src/common.s	/^						mt_row:		.blkw	1$/;"	l
mt_serial_no	src/common.s	/^						mt_serial_no:	.blkw	MAX_BIOS_DEVICES_asm*2$/;"	l
mt_sh	src/common.s	/^						mt_sh:		.blkw	1$/;"	l
mt_sig	src/common.s	/^						mt_sig:		.blkb	4$/;"	l
mt_size	src/common.s	/^						mt_size:$/;"	l
mt_t_bg	src/common.s	/^						mt_t_bg:	.blkw	1$/;"	l
mt_t_col	src/common.s	/^						mt_t_col:	.blkw	1$/;"	l
mt_t_fg	src/common.s	/^						mt_t_fg:	.blkw	1$/;"	l
mt_t_row	src/common.s	/^						mt_t_row:	.blkw	1$/;"	l
mt_t_sh	src/common.s	/^						mt_t_sh:	.blkw	1$/;"	l
mt_title	src/common.s	/^						mt_title:	.blkb	MAX_MENU_TITLE_asm+2$/;"	l
mt_unused	src/common.s	/^						mt_unused:	.blkb	150-sa_size*MAX_DESCR_SECS_asm-4*MAX_BIOS_DEVICES_asm-4*MAX_RAID_DEVICES_asm$/;"	l
mt_unused2	src/common.s	/^						mt_unused2:	.blkb	1$/;"	l
mt_xpitch	src/common.s	/^						mt_xpitch:	.blkw	1$/;"	l
mtmp	src/chain.S	/^mtmp = SETUPSECS-1			! broken math ...$/;"	d
mtmp	src/chain.s	/^mtmp = 4 -1 ! broken math ...$/;"	d
mtype	diagnose/test4.c	/^	mtype;$/;"	m	struct:__anon58	file:
mul	src/disk.S	/^		mul	dx$/;"	d
mul	src/disk.s	/^		mul	dx$/;"	d
n	diagnose/cprintf.c	/^mov	-6[bp],*$A		! n = 10$/;"	v
nDirEnt	diagnose/sector.S	/^nDirEnt:	.blkw	1	; directory_entries$/;"	l
nDirSec	diagnose/sector.S	/^nDirSec:	.blkw	1$/;"	l
nFATs	diagnose/sector.S	/^nFATs:		.blkb	1	; FAT_copies$/;"	l
nSEC	diagnose/sector.S	/^nSEC:		.blkw	1	; sectors_per_track$/;"	l
nSides	diagnose/sector.S	/^nSides:		.blkw	1	; heads_per_cylinder$/;"	l
n_cyl	src/probe.h	/^   int n_cyl;$/;"	m	struct:disk_geom
n_disks	src/probe.h	/^   char n_disks;$/;"	m	struct:disk_geom
n_head	src/probe.h	/^   int n_head;$/;"	m	struct:disk_geom
n_sect	src/probe.h	/^   int n_sect;$/;"	m	struct:disk_geom
n_total_blocks	src/probe.h	/^   unsigned int n_total_blocks;$/;"	m	struct:disk_geom
name	src/cfg.h	/^    char *name;$/;"	m	struct:__anon33
name	src/common.c	/^static char *name(int stage)$/;"	f	file:
name	src/common.h	/^;*\/    char name[MAX_IMAGE_NAME+1];	\/* image name, NUL terminated $/;"	m	struct:__anon9
name	src/device.c	/^    char *name;		\/* the name of the disk; e.g.  "\/dev\/hda" *\/$/;"	m	struct:VolumeMgmt	file:
name	src/device.c	/^    const char *name;$/;"	m	struct:_cache_entry	file:
name	src/device.h	/^    char *name;$/;"	m	struct:__anon5
name	src/geometry.h	/^	const char	* name; \/* used only for predefined formats *\/$/;"	m	struct:floppy_struct
name	src/probe.c	/^	char *name;$/;"	m	struct:partitions	file:
name	src/temp.c	/^    char *name;$/;"	m	struct:_temp	file:
ncol	src/bitmap.S	/^#define ncol KEYTABLE+256+mt_ncol$/;"	d
ncol	src/bitmap.h	/^;*\/	short row, col, ncol;		\/* BMP row, col, and ncols$/;"	m	struct:BitmapLiloHeader
ncol	src/common.h	/^;*\/	short row, col, ncol;		\/* BMP row, col, and ncols$/;"	m	struct:__anon15
ncol	src/crt.S	/^ncol:	dw	0	; number of columns (default=2)$/;"	d
ncol	src/third.s	/^ncol: dw 0 ; number of columns (default=2)$/;"	d
ndevs	src/device.c	/^static int ndevs=0;$/;"	v	file:
ndisk	src/raid.c	/^int do_md_install, ndisk, md_bios;$/;"	v
ndisk	src/raid.h	/^int do_md_install, ndisk, md_bios;$/;"	v
neg	src/bitmap.S	/^	neg	dh			; remainder [0..(nrow-1)]$/;"	d
neg	src/bitmap.s	/^ neg dh ; remainder [0..(nrow-1)]$/;"	d
neg	src/crt.S	/^	neg	dh			; remainder [0..(nrow-1)]$/;"	d
neg	src/third.s	/^ neg dh ; remainder [0..(nrow-1)]$/;"	d
nelem	diagnose/test4.c	41;"	d	file:
nelem	src/lilo.h	73;"	d
new	diagnose/cprintf.c	/^xchg ax,si			! val(new) = val \/ base$/;"	v
new13	src/bitmap.s	/^new13: push ax ! save AX (contains function code in AH)$/;"	l
new13	src/chain.s	/^new13: push ax ! save AX (contains function code in AH)$/;"	l
new13	src/mapper.S	/^new13:	push	ax		! save AX (contains function code in AH)$/;"	l
new13	src/second.s	/^new13: push ax ! save AX (contains function code in AH)$/;"	l
new13	src/third.s	/^new13: push ax ! save AX (contains function code in AH)$/;"	l
new13_drvmap_offset	src/bitmap.s	/^new13_drvmap_offset = * - new13$/;"	d
new13_drvmap_offset	src/chain.s	/^new13_drvmap_offset = * - new13$/;"	d
new13_drvmap_offset	src/mapper.S	/^new13_drvmap_offset	=	* - new13$/;"	d
new13_drvmap_offset	src/second.s	/^new13_drvmap_offset = * - new13$/;"	d
new13_drvmap_offset	src/third.s	/^new13_drvmap_offset = * - new13$/;"	d
new13_length	src/bitmap.s	/^new13_length = *-new13 ; max compare length$/;"	d
new13_length	src/chain.s	/^new13_length = *-new13 ; max compare length$/;"	d
new13_length	src/mapper.S	/^new13_length		=	*-new13		; max compare length$/;"	d
new13_length	src/second.s	/^new13_length = *-new13 ; max compare length$/;"	d
new13_length	src/third.s	/^new13_length = *-new13 ; max compare length$/;"	d
new13_old	src/bitmap.s	/^new13_old:$/;"	l
new13_old	src/chain.S	/^new13_old:$/;"	l
new13_old	src/chain.s	/^new13_old:$/;"	l
new13_old	src/mapper.S	/^new13_old:$/;"	l
new13_old	src/second.s	/^new13_old:$/;"	l
new13_old	src/third.s	/^new13_old:$/;"	l
new13_old_drvmap_offs	src/bitmap.s	/^new13_old_drvmap_offs = * - new13_old - 2$/;"	d
new13_old_drvmap_offs	src/chain.S	/^new13_old_drvmap_offs	=	* - new13_old - 2$/;"	d
new13_old_drvmap_offs	src/chain.s	/^new13_old_drvmap_offs = * - new13_old - 2$/;"	d
new13_old_drvmap_offs	src/mapper.S	/^new13_old_drvmap_offs	=	* - new13_old - 2$/;"	d
new13_old_drvmap_offs	src/second.s	/^new13_old_drvmap_offs = * - new13_old - 2$/;"	d
new13_old_drvmap_offs	src/third.s	/^new13_old_drvmap_offs = * - new13_old - 2$/;"	d
new13_old_length	src/bitmap.s	/^new13_old_length = new13_old_drvmap_offs$/;"	d
new13_old_length	src/chain.S	/^new13_old_length	=	new13_old_drvmap_offs$/;"	d
new13_old_length	src/chain.s	/^new13_old_length = new13_old_drvmap_offs$/;"	d
new13_old_length	src/mapper.S	/^new13_old_length	=	new13_old_drvmap_offs$/;"	d
new13_old_length	src/second.s	/^new13_old_length = new13_old_drvmap_offs$/;"	d
new13_old_length	src/third.s	/^new13_old_length = new13_old_drvmap_offs$/;"	d
new13_old_max_offs	src/bitmap.s	/^new13_old_max_offs = 0x50 ; maxed out at 21.7.5 at 0x4d$/;"	d
new13_old_max_offs	src/chain.S	/^new13_old_max_offs	=	0x50	; maxed out at  21.7.5 at 0x4d$/;"	d
new13_old_max_offs	src/chain.s	/^new13_old_max_offs = 0x50 ; maxed out at 21.7.5 at 0x4d$/;"	d
new13_old_max_offs	src/mapper.S	/^new13_old_max_offs	=	0x50	; maxed out at  21.7.5 at 0x4d$/;"	d
new13_old_max_offs	src/second.s	/^new13_old_max_offs = 0x50 ; maxed out at 21.7.5 at 0x4d$/;"	d
new13_old_max_offs	src/third.s	/^new13_old_max_offs = 0x50 ; maxed out at 21.7.5 at 0x4d$/;"	d
new13_old_min_offs	src/bitmap.s	/^new13_old_min_offs = 0x46 ; min seen in old code is 0x49$/;"	d
new13_old_min_offs	src/chain.S	/^new13_old_min_offs	=	0x46	; min seen in old code is 0x49$/;"	d
new13_old_min_offs	src/chain.s	/^new13_old_min_offs = 0x46 ; min seen in old code is 0x49$/;"	d
new13_old_min_offs	src/mapper.S	/^new13_old_min_offs	=	0x46	; min seen in old code is 0x49$/;"	d
new13_old_min_offs	src/second.s	/^new13_old_min_offs = 0x46 ; min seen in old code is 0x49$/;"	d
new13_old_min_offs	src/third.s	/^new13_old_min_offs = 0x46 ; min seen in old code is 0x49$/;"	d
new13a	src/bitmap.s	/^new13a:$/;"	l
new13a	src/chain.s	/^new13a:$/;"	l
new13a	src/mapper.S	/^new13a:$/;"	l
new13a	src/second.s	/^new13a:$/;"	l
new13a	src/third.s	/^new13a:$/;"	l
new13end	src/chain.s	/^new13end:$/;"	l
new13end	src/mapper.S	/^new13end:$/;"	l
new_serial	src/device.c	/^int new_serial(int dev)$/;"	f
next	src/bsect.c	/^    struct Pass *next;$/;"	m	struct:Pass	typeref:struct:Pass::Pass	file:
next	src/cfg.c	/^static int next(void)$/;"	f	file:
next	src/device.c	/^    struct _cache_entry *next;$/;"	m	struct:_cache_entry	typeref:struct:_cache_entry::_cache_entry	file:
next	src/device.c	/^    struct _st_buf *next;$/;"	m	struct:_st_buf	typeref:struct:_st_buf::_st_buf	file:
next	src/geometry.c	/^    struct _dm_table *next;$/;"	m	struct:_dm_table	typeref:struct:_dm_table::_dm_table	file:
next	src/geometry.c	/^    struct _dm_target *next;$/;"	m	struct:_dm_target	typeref:struct:_dm_target::_dm_target	file:
next	src/geometry.c	/^    struct _st_buf *next;$/;"	m	struct:_st_buf	typeref:struct:_st_buf::_st_buf	file:
next	src/geometry.h	/^    struct _dt_entry *next;$/;"	m	struct:_dt_entry	typeref:struct:_dt_entry::_dt_entry
next	src/map.c	/^    struct _map_entry *next;$/;"	m	struct:_map_entry	typeref:struct:_map_entry::_map_entry	file:
next	src/partition.h	/^    struct _change_rule *next;$/;"	m	struct:_change_rule	typeref:struct:_change_rule::_change_rule
next	src/temp.c	/^    struct _temp *next;$/;"	m	struct:_temp	typeref:struct:_temp::_temp	file:
nextCluster	diagnose/sector.S	/^nextCluster:$/;"	l
next_raw	src/cfg.c	/^static int next_raw(void)$/;"	f	file:
nextone	src/chain.S	/^nextone:$/;"	l
nextone	src/chain.s	/^nextone:$/;"	l
nextone1	src/chain.S	/^nextone1:$/;"	l
nextone1	src/chain.s	/^nextone1:$/;"	l
nflop	src/disk.S	/^nflop:          .byte      0$/;"	l
nflop	src/disk.s	/^nflop:          .byte      0$/;"	l
nhard	src/disk.S	/^nhard:          .byte      0$/;"	l
nhard	src/disk.s	/^nhard:          .byte      0$/;"	l
niloop	src/bitmap.s	/^niloop: ; ES may point to external params$/;"	l
niloop	src/second.S	/^niloop:				; ES may point to external params$/;"	l
niloop	src/second.s	/^niloop: ; ES may point to external params$/;"	l
niloop	src/third.s	/^niloop: ; ES may point to external params$/;"	l
nimage	src/bitmap.S	/^nimage:	dw	0	; number of images$/;"	d
nimage	src/bitmap.s	/^nimage: dw 0 ; number of images$/;"	d
nimage	src/crt.S	/^nimage:	dw	0	; number of images$/;"	d
nimage	src/third.s	/^nimage: dw 0 ; number of images$/;"	d
nkbdbg0	src/second.S	/^nkbdbg0: pop	bx$/;"	l
nlimit	src/disk.S	/^nlimit:         dd	1024*255*63, 0$/;"	d
nlimit	src/disk.s	/^nlimit:         dd	1024*255*63, 0$/;"	d
nlist	src/raid.c	/^static int nlist, faulty;$/;"	v	file:
noError	diagnose/sector.S	/^noError:$/;"	l
noNull	src/bitmap.s	/^noNull: or al,al ; keyboard NUL input?$/;"	l
noNull	src/second.S	/^noNull:	or	al,al		; keyboard NUL input?$/;"	l
noNull	src/second.s	/^noNull: or al,al ; keyboard NUL input?$/;"	l
noS	src/disk.S	/^noS:            call    say$/;"	l
noS	src/disk.s	/^noS:            call    say$/;"	l
no_add	src/disk.S	/^no_add:$/;"	l
no_add	src/disk.s	/^no_add:$/;"	l
no_bmp	src/bitmap.S	/^no_bmp:	.ascii	" = AL; NOT a bitmap file\\n"$/;"	l
no_boot	src/mbr.S	/^no_boot: call	say$/;"	l
no_boot	src/mbr.s	/^no_boot: call	say$/;"	l
no_boot	src/mbr2.s	/^no_boot: call	say$/;"	l
no_e801	src/bitmap.s	/^no_e801:$/;"	l
no_e801	src/second.S	/^no_e801:$/;"	l
no_e801	src/second.s	/^no_e801:$/;"	l
no_e801	src/third.s	/^no_e801:$/;"	l
no_e820	src/bitmap.s	/^no_e820:$/;"	l
no_e820	src/second.S	/^no_e820:$/;"	l
no_e820	src/second.s	/^no_e820:$/;"	l
no_e820	src/third.s	/^no_e820:$/;"	l
no_lba	src/bitmap.s	/^no_lba:$/;"	l
no_lba	src/disk.s	/^no_lba:$/;"	l
no_lba	src/read.S	/^no_lba:$/;"	l
no_lba	src/second.s	/^no_lba:$/;"	l
no_lba	src/third.s	/^no_lba:$/;"	l
no_overwrite	src/bitmap.s	/^no_overwrite:$/;"	l
no_overwrite	src/second.S	/^no_overwrite:$/;"	l
no_overwrite	src/second.s	/^no_overwrite:$/;"	l
no_overwrite	src/third.s	/^no_overwrite:$/;"	l
no_params	src/mbr.S	/^no_params:$/;"	l
no_params	src/mbr.s	/^no_params:$/;"	l
no_params	src/mbr2.s	/^no_params:$/;"	l
no_reg	src/bootsect.S	/^no_reg:$/;"	l
no_reg	src/bootsect.s	/^no_reg:$/;"	l
no_remove	src/bitmap.s	/^no_remove:$/;"	l
no_remove	src/second.S	/^no_remove:$/;"	l
no_remove	src/second.s	/^no_remove:$/;"	l
no_remove	src/third.s	/^no_remove:$/;"	l
no_timer_display	src/bitmap.s	/^no_timer_display:$/;"	l
no_timer_display	src/second.S	/^no_timer_display:$/;"	l
no_timer_display	src/third.s	/^no_timer_display:$/;"	l
no_update	src/chain.S	/^no_update:$/;"	l
noblnk	src/bitmap.s	/^noblnk: cmp bx,#cmdline+CL_LENGTH-1 ; at end of buffer ?$/;"	l
noblnk	src/second.S	/^noblnk:	cmp	bx,#cmdline+CL_LENGTH-1 ; at end of buffer ?$/;"	l
noblnk	src/second.s	/^noblnk: cmp bx,#cmdline+CL_LENGTH-1 ; at end of buffer ?$/;"	l
noblnk	src/third.s	/^noblnk: cmp bx,#cmdline+CL_LENGTH-1 ; at end of buffer ?$/;"	l
nobrk	src/bitmap.s	/^nobrk: test al,#0x20 ; ready to send ?$/;"	l
nobrk	src/second.S	/^nobrk:	test	al,#0x20	; ready to send ?$/;"	l
nobrk	src/second.s	/^nobrk: test al,#0x20 ; ready to send ?$/;"	l
nobrk	src/third.s	/^nobrk: test al,#0x20 ; ready to send ?$/;"	l
noc	src/chain.S	/^noc:	mov	ax,ds$/;"	l
noc	src/chain.s	/^noc: mov ax,ds$/;"	l
nocancel	src/bitmap.s	/^nocancel:$/;"	l
nocancel	src/second.S	/^nocancel:$/;"	l
nocancel	src/second.s	/^nocancel:$/;"	l
nocancel	src/third.s	/^nocancel:$/;"	l
nochker_msg	src/second.S	/^nochker_msg:$/;"	l
nochkerr	src/bitmap.s	/^nochkerr:$/;"	l
nochkerr	src/second.S	/^nochkerr:$/;"	l
nochkerr	src/second.s	/^nochkerr:$/;"	l
nochkerr	src/third.s	/^nochkerr:$/;"	l
nochkerr1	src/second.S	/^nochkerr1:$/;"	l
nocls	src/bitmap.s	/^nocls: call display ; display, tty-style$/;"	l
nocls	src/second.S	/^nocls:	call	display		; display, tty-style$/;"	l
nocls	src/second.s	/^nocls: call display ; display, tty-style$/;"	l
nocls	src/third.s	/^nocls: call display ; display, tty-style$/;"	l
nocmd	src/chain.S	/^nocmd:$/;"	l
nocmd	src/chain.s	/^nocmd:$/;"	l
nocng	src/chain.S	/^nocng:	br	prtclp			! next one$/;"	l
nocng	src/chain.s	/^nocng: br prtclp ! next one$/;"	l
nocom	src/bitmap.s	/^nocom:$/;"	l
nocom	src/second.S	/^nocom:$/;"	l
nocom	src/second.s	/^nocom:$/;"	l
nocom	src/third.s	/^nocom:$/;"	l
nocopt	src/bitmap.s	/^nocopt: mov si,options ; append variable options$/;"	l
nocopt	src/second.S	/^nocopt:	mov	si,options	; append variable options$/;"	l
nocopt	src/second.s	/^nocopt: mov si,options ; append variable options$/;"	l
nocopt	src/third.s	/^nocopt: mov si,options ; append variable options$/;"	l
nodfl	src/bitmap.s	/^nodfl: .word 0 ; action if no defaults are present$/;"	l
nodfl	src/second.S	/^nodfl:	.word	0		; action if no defaults are present$/;"	l
nodfl	src/second.s	/^nodfl: .word 0 ; action if no defaults are present$/;"	l
nodfl	src/third.s	/^nodfl: .word 0 ; action if no defaults are present$/;"	l
noex	src/bitmap.s	/^noex: push cs ; restore ES$/;"	l
noex	src/second.S	/^noex:	push	cs		; restore ES$/;"	l
noex	src/second.s	/^noex: push cs ; restore ES$/;"	l
noex	src/third.s	/^noex: push cs ; restore ES$/;"	l
nofbck	src/bitmap.s	/^nofbck:$/;"	l
nofbck	src/second.S	/^nofbck:$/;"	l
nofbck	src/second.s	/^nofbck:$/;"	l
nofbck	src/third.s	/^nofbck:$/;"	l
noflop	src/disk.S	/^noflop:         call    say$/;"	l
noflop	src/disk.s	/^noflop:         call    say$/;"	l
nohard	src/disk.S	/^nohard:         mov     nhard,ah$/;"	l
nohard	src/disk.s	/^nohard:         mov     nhard,ah$/;"	l
nohdrs	src/second.S	/^nohdrs:	.ascii	"\\nNo cmdline passed"$/;"	l
noheap	src/bitmap.s	/^noheap:$/;"	l
noheap	src/second.S	/^noheap:$/;"	l
noheap	src/second.s	/^noheap:$/;"	l
noheap	src/third.s	/^noheap:$/;"	l
nohigh	src/bitmap.s	/^nohigh:$/;"	l
nohigh	src/second.S	/^nohigh:$/;"	l
nohigh	src/second.s	/^nohigh:$/;"	l
nohigh	src/third.s	/^nohigh:$/;"	l
nohome	src/crt.S	/^nohome:	$/;"	l
nohome	src/third.s	/^nohome:$/;"	l
noimap	src/chain.S	/^noimap:$/;"	l
noimap	src/chain.s	/^noimap:$/;"	l
nokay	src/dump.S	/^nokay:	xor	bh,bh		! display on screen$/;"	l
nokeyerr	src/bitmap.s	/^nokeyerr:$/;"	l
nokeyerr	src/second.S	/^nokeyerr:$/;"	l
nokeyerr	src/second.s	/^nokeyerr:$/;"	l
nokeyerr	src/third.s	/^nokeyerr:$/;"	l
nolock	src/bitmap.s	/^nolock:$/;"	l
nolock	src/second.S	/^nolock:$/;"	l
nolock	src/second.s	/^nolock:$/;"	l
nolock	src/third.s	/^nolock:$/;"	l
nomap	src/chain.s	/^nomap: pop si ! restore SI$/;"	l
nomap	src/mapper.S	/^nomap:	pop	si		! restore SI$/;"	l
nomsg	src/bitmap.s	/^nomsg: push cs ; disable external parameters$/;"	l
nomsg	src/second.S	/^nomsg:	push	cs		; disable external parameters$/;"	l
nomsg	src/second.s	/^nomsg: push cs ; disable external parameters$/;"	l
nomsg	src/third.s	/^nomsg: push cs ; disable external parameters$/;"	l
nonl	src/bitmap.s	/^nonl:$/;"	l
nonl	src/second.S	/^nonl:$/;"	l
nonl	src/second.s	/^nonl:$/;"	l
nonl	src/third.s	/^nonl:$/;"	l
noosht	src/bitmap.s	/^noosht:$/;"	l
noosht	src/second.S	/^noosht:$/;"	l
noosht	src/second.s	/^noosht:$/;"	l
noosht	src/third.s	/^noosht:$/;"	l
nopp	src/chain.S	/^nopp:$/;"	l
nopp	src/chain.s	/^nopp:$/;"	l
noramd	src/bitmap.s	/^noramd:$/;"	l
noramd	src/second.S	/^noramd:$/;"	l
noramd	src/second.s	/^noramd:$/;"	l
noramd	src/third.s	/^noramd:$/;"	l
nordpt	src/bitmap.s	/^nordpt:$/;"	l
nordpt	src/second.S	/^nordpt:	$/;"	l
nordpt	src/second.s	/^nordpt:$/;"	l
nordpt	src/third.s	/^nordpt:$/;"	l
norigin	src/crt.S	/^norigin: dw	0	; row\/col origin of names on screen$/;"	d
norigin	src/third.s	/^norigin: dw 0 ; row\/col origin of names on screen$/;"	d
normal	src/partition.h	/^    unsigned char normal;$/;"	m	struct:_change_rule
noschema	src/crt.S	/^noschema:$/;"	l
noschema	src/third.s	/^noschema:$/;"	l
nostore	src/chain.S	/^nostore:$/;"	l
nostore	src/chain.s	/^nostore:$/;"	l
noswap	src/chain.S	/^noswap:$/;"	l
noswap	src/chain.s	/^noswap:$/;"	l
not	src/bitmap.S	/^	not	dh$/;"	d
not	src/bitmap.s	/^ not dh$/;"	d
not	src/crt.S	/^	not	dh$/;"	d
not	src/third.s	/^ not dh$/;"	d
not203	src/bitmap.s	/^not203:$/;"	l
not203	src/second.S	/^not203:$/;"	l
not203	src/second.s	/^not203:$/;"	l
not203	src/third.s	/^not203:$/;"	l
not_chain	src/bitmap.s	/^not_chain:$/;"	l
not_chain	src/second.S	/^not_chain:$/;"	l
not_chain	src/second.s	/^not_chain:$/;"	l
not_chain	src/third.s	/^not_chain:$/;"	l
not_el_torito	src/bitmap.s	/^not_el_torito:$/;"	l
not_el_torito	src/second.S	/^not_el_torito:$/;"	l
not_el_torito	src/second.s	/^not_el_torito:$/;"	l
not_el_torito	src/third.s	/^not_el_torito:$/;"	l
not_persistent	src/md-int.h	/^	md_u32 not_persistent;$/;"	m	struct:md_array_info_s
noteof	src/bitmap.s	/^noteof: add si,#sa_size ; increment pointer$/;"	l
noteof	src/second.S	/^noteof:	add	si,#sa_size	; increment pointer$/;"	l
noteof	src/second.s	/^noteof: add si,#sa_size ; increment pointer$/;"	l
noteof	src/third.s	/^noteof: add si,#sa_size ; increment pointer$/;"	l
notice	src/probe.c	/^static int notice(int needed)$/;"	f	file:
notitle	src/crt.S	/^notitle:$/;"	l
notitle	src/third.s	/^notitle:$/;"	l
notzro	src/bitmap.s	/^notzro:$/;"	l
notzro	src/second.S	/^notzro:$/;"	l
notzro	src/second.s	/^notzro:$/;"	l
notzro	src/third.s	/^notzro:$/;"	l
nout	src/bitmap.s	/^nout: and al,#0x0F ; lower nible only$/;"	l
nout	src/chain.S	/^nout:	and	al,#0x0F	! lower nible only$/;"	l
nout	src/dump.S	/^nout:	and	al,#15		! display one nibble$/;"	l
nout	src/first.S	/^nout:	and	al,#0x0F	! display one nibble$/;"	l
nout	src/first.s	/^nout: and al,#0x0F ! display one nibble$/;"	l
nout	src/mbr.S	/^nout:	and	al,#0x0F	! write the nibble in low half of AL$/;"	l
nout	src/second.S	/^nout:	and	al,#0x0F	; lower nible only$/;"	l
nout	src/second.s	/^nout: and al,#0x0F ; lower nible only$/;"	l
nout	src/third.s	/^nout: and al,#0x0F ; lower nible only$/;"	l
novga	src/bitmap.s	/^novga: push bx ; use flags (BX) later$/;"	l
novga	src/second.S	/^novga:	push	bx		; use flags (BX) later$/;"	l
novga	src/second.s	/^novga: push bx ; use flags (BX) later$/;"	l
novga	src/third.s	/^novga: push bx ; use flags (BX) later$/;"	l
nowarn	src/common.c	/^      nowarn = 0, lba32 = 0, autoauto = 0, passw = 0, geometric = 0, eflag = 0;$/;"	v
nowrap	src/bitmap.s	/^nowrap:$/;"	l
nowrap	src/second.S	/^nowrap:$/;"	l
nowrap	src/second.s	/^nowrap:$/;"	l
nowrap	src/third.s	/^nowrap:$/;"	l
npal	src/edit.c	/^static int filepos, npal;$/;"	v	file:
nr_disks	src/md-int.h	/^	md_u32 nr_disks;	\/*  9 total disks in the raid set	      *\/$/;"	m	struct:md_superblock_s
nr_disks	src/md-int.h	/^	md_u32 nr_disks;$/;"	m	struct:md_array_info_s
nr_sects	src/partition.h	/^	unsigned int nr_sects;		\/* nr of sectors in partition *\/$/;"	m	struct:partition
nrow	src/bitmap.S	/^nrow:	dw	0	; number of rows of selections$/;"	d
nrow	src/bitmap.s	/^nrow: dw 0 ; number of rows of selections$/;"	d
nrow	src/crt.S	/^nrow:	dw	0	; number of rows of selections$/;"	d
nrow	src/third.s	/^nrow: dw 0 ; number of rows of selections$/;"	d
nstring	diagnose/cprintf.c	/^static char nstring[]="0123456789ABCDEF";$/;"	v	file:
nt	src/device.c	/^    char nt[PART_MAX];	\/* flag partitions which might be NT *\/$/;"	m	struct:VolumeMgmt	file:
nul	src/bitmap.s	/^nul: push bx ; automatic boot - wait for timeout$/;"	l
nul	src/second.S	/^nul:	push	bx		; automatic boot - wait for timeout$/;"	l
nul	src/second.s	/^nul: push bx ; automatic boot - wait for timeout$/;"	l
nul	src/third.s	/^nul: push bx ; automatic boot - wait for timeout$/;"	l
null	src/bitmap.S	/^null:	mov	al,#1$/;"	l
null	src/bitmap.h	/^   bm_byte  blue, green, red, null;$/;"	m	struct:Rgb
null	src/bitmap.s	/^null: mov al,#1$/;"	l
null	src/crt.S	/^null:	mov	al,#1$/;"	l
null	src/third.s	/^null: mov al,#1$/;"	l
numBitPlanes	src/bitmap.h	/^   bm_uint16   numBitPlanes;$/;"	m	struct:BitMapHeader
numBitPlanes	src/bitmap.h	/^   bm_uint16   numBitPlanes;$/;"	m	struct:BitMapHeader2
numBitsPerPlane	src/bitmap.h	/^   bm_uint16   numBitsPerPlane;$/;"	m	struct:BitMapHeader
numBitsPerPlane	src/bitmap.h	/^   bm_uint16   numBitsPerPlane;$/;"	m	struct:BitMapHeader2
numColorsUsed	src/bitmap.h	/^   bm_uint32   numColorsUsed, numImportantColors;$/;"	m	struct:BitMapHeader
numImportantColors	src/bitmap.h	/^   bm_uint32   numColorsUsed, numImportantColors;$/;"	m	struct:BitMapHeader
num_hard_disks	diagnose/test5.c	/^int num_hard_disks(void)$/;"	f	file:
num_hd	diagnose/test4.c	/^int num_hd = BD_MAX_HARD;$/;"	v
num_hd	diagnose/test5.c	/^int num_hd = BD_MAX_HARD;$/;"	v
num_sect	src/common.h	/^;*\/    unsigned char num_sect; \/* AL$/;"	m	struct:__anon8
number	src/device.c	/^    int number;$/;"	m	struct:_cache_entry	file:
number	src/edit.c	/^static void number(char *what, short *num, int min, int max)$/;"	f	file:
number	src/md-int.h	/^	md_u32 number;		\/* 0 Device number in the entire set	      *\/$/;"	m	struct:md_device_descriptor_s
number	src/md-int.h	/^	md_u32 number;$/;"	m	struct:md_disk_info_s
number	src/probe.c	/^static char *number(unsigned int n)$/;"	f	file:
number_of_FATs	src/common.h	/^;*\/    unsigned char  number_of_FATs;		\/*$/;"	m	struct:__anon10
ofd	src/edit.c	/^static	int ifd, ofd;$/;"	v	file:
offset	src/chain.S	/^offset:	.word	0$/;"	l
offset	src/chain.s	/^offset: .word 0$/;"	l
offset	src/common.h	/^;*\/    unsigned short offset; \/* partition entry offset$/;"	m	struct:__anon14
offset	src/geometry.c	/^    uint64_t start,length,offset;$/;"	m	struct:_dm_target	file:
offset	src/probe.h	/^   unsigned short offset,$/;"	m	struct:Edd
offsetToBits	src/bitmap.h	/^   bm_uint16   offsetToBits[2];			\/* actually bm_uint32 *\/$/;"	m	struct:BitMapFileHeader
ok1_read	src/bootsect.S	/^ok1_read:$/;"	l
ok1_read	src/bootsect.s	/^ok1_read:$/;"	l
ok2_read	src/bootsect.S	/^ok2_read:$/;"	l
ok2_read	src/bootsect.s	/^ok2_read:$/;"	l
ok3_read	src/bootsect.S	/^ok3_read:$/;"	l
ok3_read	src/bootsect.s	/^ok3_read:$/;"	l
ok4_read	src/bootsect.S	/^ok4_read:$/;"	l
ok4_read	src/bootsect.s	/^ok4_read:$/;"	l
ok_load_setup	src/bootsect.S	/^ok_load_setup:$/;"	l
ok_load_setup	src/bootsect.s	/^ok_load_setup:$/;"	l
okay	src/dparam.S	/^okay:	cmpb	1(bx),#56		! '8' ?$/;"	l
old13of	src/chain.s	/^old13of = *+1$/;"	d
old13of	src/mapper.S	/^old13of	=	*+1$/;"	d
old13sg	src/chain.s	/^old13sg = *+3$/;"	d
old13sg	src/mapper.S	/^old13sg	=	*+3$/;"	d
old_disktab	src/geometry.c	/^int old_disktab = 0;$/;"	v
one_found	src/mbr.S	/^one_found:				! one partition is active$/;"	l
one_found	src/mbr.S	/^one_found:$/;"	l
one_found	src/mbr.s	/^one_found:				! one partition is active$/;"	l
one_found	src/mbr2.s	/^one_found:$/;"	l
oop	diagnose/Makefile	/^	mount -t msdos -o loop=$(LOOP) bootdiagnostic.b $(MFILE)$/;"	m
open_bsect	src/bsect.c	/^static void open_bsect(char *boot_dev)$/;"	f	file:
opt	src/identify.c	/^static char *opt;$/;"	v	file:
optfnd	src/bitmap.s	/^optfnd: dec si ; adjust pointer$/;"	l
optfnd	src/second.S	/^optfnd:	dec	si		; adjust pointer$/;"	l
optfnd	src/second.s	/^optfnd: dec si ; adjust pointer$/;"	l
optfnd	src/third.s	/^optfnd: dec si ; adjust pointer$/;"	l
options	src/bsect.c	/^static char options[SECTOR_SIZE]; \/* this is ugly *\/$/;"	v	file:
oreg	diagnose/test4.c	/^union REGS reg, oreg;$/;"	v	typeref:union:
oreg	diagnose/test5.c	/^union REGS reg, oreg;$/;"	v	typeref:union:
ospc	src/bitmap.s	/^ospc: .ascii "O"$/;"	l
ospc	src/second.S	/^ospc:	.ascii	"O"$/;"	l
ospc	src/second.s	/^ospc: .ascii "O"$/;"	l
ospc	src/third.s	/^ospc: .ascii "O"$/;"	l
out	diagnose/cprintf.c	/^mov	byte ptr [___out+$B],*$0	! out[11] = nul$/;"	v
out	diagnose/cprintf.c	/^mov	byte ptr ___out[bx],*$2D	! out[n--] = minus$/;"	v
outb	diagnose/test4.c	/^int outb(int port, int data)$/;"	f	file:
outb	diagnose/test5.c	/^int outb(int port, int data)$/;"	f	file:
p_devmap	src/common.h	/^;*\/    unsigned short p_devmap[2];	\/* pointer to device map filled in by second.S$/;"	m	struct:__anon14
p_table	src/first.S	/^p_table:$/;"	l
p_table	src/first.s	/^p_table:$/;"	l
p_table	src/mbr.S	/^p_table:$/;"	l
p_table	src/mbr.s	/^p_table:$/;"	l
p_table	src/mbr2.s	/^p_table:$/;"	l
packet	src/mbr.S	/^packet:	.word	16		! size of packet$/;"	l
packet	src/mbr.s	/^packet:	.word	16		! size of packet$/;"	l
packet	src/mbr2.s	/^packet:	.word	16		! size of packet$/;"	l
page	src/probe.c	/^static int mode, col, row, page;$/;"	v	file:
palette	src/edit.c	/^static RGB palette[NPALETTE];$/;"	v	file:
par1_cli	src/common.s	/^						par1_cli:	.blkb	1$/;"	l
par1_code_len	src/common.s	/^						par1_code_len:	.blkb	2$/;"	l
par1_jump	src/common.s	/^						par1_jump:	.blkb	2$/;"	l
par1_map_serial_no	src/common.s	/^						par1_map_serial_no:	.blkb	4$/;"	l
par1_mapstamp	src/common.s	/^						par1_mapstamp:	.blkb	4$/;"	l
par1_prompt	src/common.s	/^						par1_prompt:	.blkb	2$/;"	l
par1_raid_offset	src/common.s	/^						par1_raid_offset: .blkb	4$/;"	l
par1_secondary	src/common.s	/^						par1_secondary:	.blkb	sa_size+1$/;"	l
par1_signature	src/common.s	/^						par1_signature:	.blkb	4$/;"	l
par1_size	src/common.s	/^						par1_size:$/;"	l
par1_stage	src/common.s	/^						par1_stage:	.blkb	1$/;"	l
par1_timestamp	src/common.s	/^						par1_timestamp:	.blkb	4$/;"	l
par1_version	src/common.s	/^						par1_version:	.blkb	2$/;"	l
par2_delay	src/common.s	/^						par2_delay:	.blkb	2$/;"	l
par2_flag2	src/common.s	/^						par2_flag2:	.blkb	1$/;"	l
par2_jump	src/common.s	/^						par2_jump:	.blkb	6$/;"	l
par2_keytab	src/common.s	/^						par2_keytab:	.blkb	sa_size$/;"	l
par2_mapstamp	src/common.s	/^						par2_mapstamp:	.blkb	4$/;"	l
par2_msg_len	src/common.s	/^						par2_msg_len:	.blkb	2$/;"	l
par2_port	src/common.s	/^						par2_port:	.blkb	1	; referenced together$/;"	l
par2_ser_param	src/common.s	/^						par2_ser_param:	.blkb	1	; **$/;"	l
par2_signature	src/common.s	/^						par2_signature:	.blkb	4$/;"	l
par2_size	src/common.s	/^						par2_size:$/;"	l
par2_stage	src/common.s	/^						par2_stage:	.blkb	2$/;"	l
par2_timeout	src/common.s	/^						par2_timeout:	.blkb	2$/;"	l
par2_version	src/common.s	/^						par2_version:	.blkb	2$/;"	l
parC_devmap	src/common.s	/^						parC_devmap:	.blkb	4$/;"	l
parC_drive	src/common.s	/^						parC_drive:	.blkb	1$/;"	l
parC_drvmap	src/common.s	/^						parC_drvmap:	.blkb	2$/;"	l
parC_head	src/common.s	/^						parC_head:	.blkb	1$/;"	l
parC_jump	src/common.s	/^						parC_jump:	.blkb	6$/;"	l
parC_offset	src/common.s	/^						parC_offset:	.blkb	2$/;"	l
parC_ptable	src/common.s	/^						parC_ptable:	.blkb	64$/;"	l
parC_signature	src/common.s	/^						parC_signature:	.blkb	4$/;"	l
parC_size	src/common.s	/^						parC_size:$/;"	l
parC_stage	src/common.s	/^						parC_stage:	.blkb	2$/;"	l
parC_version	src/common.s	/^						parC_version:	.blkb	2$/;"	l
par_1	src/common.h	/^    BOOT_PARAMS_1 par_1;$/;"	m	union:__anon17
par_2	src/common.h	/^    BOOT_PARAMS_2 par_2;$/;"	m	union:__anon17
par_c	src/common.h	/^    BOOT_PARAMS_C par_c;$/;"	m	union:__anon17
par_d	src/common.h	/^    BOOT_PARAMS_DOS par_d;$/;"	m	union:__anon17
param2	src/bsect.c	/^static BOOT_PARAMS_2 param2;$/;"	v	file:
part	src/common.h	/^    unsigned char part[PART_TABLE_SIZE];$/;"	m	struct:__anon16
part_nowrite	src/partition.c	/^int part_nowrite(char* device)$/;"	f
part_verify	src/partition.c	/^void part_verify(int dev_nr,int type)$/;"	f
partition	src/partition.h	/^struct partition {$/;"	s
partitions	src/probe.c	/^      short partitions;		\/* byte offset to partition info *\/$/;"	m	struct:Buf::__anon53	file:
partitions	src/probe.c	/^      short partitions;		\/* byte offset to partition info *\/$/;"	m	struct:Buf::__anon54	file:
partitions	src/probe.c	/^static struct partitions {$/;"	s	file:
passw	src/common.c	/^      nowarn = 0, lba32 = 0, autoauto = 0, passw = 0, geometric = 0, eflag = 0;$/;"	v
password_crc	src/common.h	/^;*\/    unsigned short password_crc[MAX_PW_CRC*(sizeof(INT4)\/sizeof(short))];  \/* 4 password CRC-32 values$/;"	m	struct:__anon9
patch	src/geometry.c	/^    __u32 patch;$/;"	m	struct:evms_version_t	file:
patch_version	src/md-int.h	/^	md_u32 patch_version;	\/*  3 patchlevel version ...		      *\/$/;"	m	struct:md_superblock_s
patch_version	src/md-int.h	/^	md_u32 patch_version;$/;"	m	struct:md_array_info_s
patchlevel	src/md-int.h	/^	md_u32 patchlevel;$/;"	m	struct:md_version
path   boot	doc/user.tex	/^Linux normally has no problems using all disks once it is booted.$/;"	b
pause	diagnose/test4.c	/^void pause(void)$/;"	f	file:
pause	diagnose/test5.c	/^void pause(void)$/;"	f	file:
pause	src/bitmap.s	/^pause:$/;"	l
pause	src/disk.S	/^pause:		call	say$/;"	l
pause	src/disk.s	/^pause:		call	say$/;"	l
pause	src/second.S	/^pause:$/;"	l
pause	src/second.s	/^pause:$/;"	l
pause	src/third.s	/^pause:$/;"	l
pdie	src/common.c	/^\/*volatile*\/ void pdie(const char *msg)$/;"	f
peekw_es	diagnose/test5.c	/^int peekw_es(int addr)$/;"	f	file:
personality	src/md-int.h	/^	int			personality;	\/* 1,2,3,4 *\/$/;"	m	struct:md_param
pf_hard_disk_scan	src/device.c	/^int pf_hard_disk_scan(void)$/;"	f
phead	src/probe.c	/^static char phead[] = "\\t\\t Type  Boot      Start           End      Sector    #sectors";$/;"	v	file:
pkdone	src/bitmap.s	/^pkdone: dec si ; return last character$/;"	l
pkdone	src/second.S	/^pkdone:	dec	si		; return last character$/;"	l
pkdone	src/second.s	/^pkdone: dec si ; return last character$/;"	l
pkdone	src/third.s	/^pkdone: dec si ; return last character$/;"	l
pkend	src/bitmap.s	/^pkend: call pkput ; store token$/;"	l
pkend	src/second.S	/^pkend:	call	pkput		; store token$/;"	l
pkend	src/second.s	/^pkend: call pkput ; store token$/;"	l
pkend	src/third.s	/^pkend: call pkput ; store token$/;"	l
pkfls	src/bitmap.s	/^pkfls: lodsb ; flush to end of option$/;"	l
pkfls	src/second.S	/^pkfls:	lodsb			; flush to end of option$/;"	l
pkfls	src/second.s	/^pkfls: lodsb ; flush to end of option$/;"	l
pkfls	src/third.s	/^pkfls: lodsb ; flush to end of option$/;"	l
pkfull	src/bitmap.s	/^pkfull: mov bx,#msg_pkf ; complain$/;"	l
pkfull	src/second.S	/^pkfull:	mov	bx,#msg_pkf	; complain$/;"	l
pkfull	src/second.s	/^pkfull: mov bx,#msg_pkf ; complain$/;"	l
pkfull	src/third.s	/^pkfull: mov bx,#msg_pkf ; complain$/;"	l
pkmore	src/bitmap.s	/^pkmore: call pkput ; store token$/;"	l
pkmore	src/second.S	/^pkmore:	call	pkput		; store token$/;"	l
pkmore	src/second.s	/^pkmore: call pkput ; store token$/;"	l
pkmore	src/third.s	/^pkmore: call pkput ; store token$/;"	l
pknadj	src/bitmap.s	/^pknadj: seg es ; buffer full ?$/;"	l
pknadj	src/second.S	/^pknadj: seg	es		; buffer full ?$/;"	l
pknadj	src/second.s	/^pknadj: seg es ; buffer full ?$/;"	l
pknadj	src/third.s	/^pknadj: seg es ; buffer full ?$/;"	l
pknext	src/bitmap.s	/^pknext: lodsb ; get next byte$/;"	l
pknext	src/second.S	/^pknext:	lodsb			; get next byte$/;"	l
pknext	src/second.s	/^pknext: lodsb ; get next byte$/;"	l
pknext	src/third.s	/^pknext: lodsb ; get next byte$/;"	l
pknol	src/bitmap.s	/^pknol: sub al,#48 ; normalize$/;"	l
pknol	src/second.S	/^pknol:	sub	al,#48		; normalize$/;"	l
pknol	src/second.s	/^pknol: sub al,#48 ; normalize$/;"	l
pknol	src/third.s	/^pknol: sub al,#48 ; normalize$/;"	l
pkok	src/bitmap.s	/^pkok: shl cx,1 ; shift CX$/;"	l
pkok	src/second.S	/^pkok:	shl	cx,1		; shift CX$/;"	l
pkok	src/second.s	/^pkok: shl cx,1 ; shift CX$/;"	l
pkok	src/third.s	/^pkok: shl cx,1 ; shift CX$/;"	l
pkput	src/bitmap.s	/^pkput: seg es ; get buffer pointer$/;"	l
pkput	src/second.S	/^pkput:	seg	es		; get buffer pointer$/;"	l
pkput	src/second.s	/^pkput: seg es ; get buffer pointer$/;"	l
pkput	src/third.s	/^pkput: seg es ; get buffer pointer$/;"	l
pkrd	src/bitmap.s	/^pkrd: xor cx,cx ; clear accumulator$/;"	l
pkrd	src/second.S	/^pkrd:	xor	cx,cx		; clear accumulator$/;"	l
pkrd	src/second.s	/^pkrd: xor cx,cx ; clear accumulator$/;"	l
pkrd	src/third.s	/^pkrd: xor cx,cx ; clear accumulator$/;"	l
pkrdlp	src/bitmap.s	/^pkrdlp: cmp al,#97 ; lower case character ?$/;"	l
pkrdlp	src/second.S	/^pkrdlp:	cmp	al,#97		; lower case character ?$/;"	l
pkrdlp	src/second.s	/^pkrdlp: cmp al,#97 ; lower case character ?$/;"	l
pkrdlp	src/third.s	/^pkrdlp: cmp al,#97 ; lower case character ?$/;"	l
pksyn	src/bitmap.s	/^pksyn: mov bx,#msg_pks ; complain$/;"	l
pksyn	src/second.S	/^pksyn:	mov	bx,#msg_pks	; complain$/;"	l
pksyn	src/second.s	/^pksyn: mov bx,#msg_pks ; complain$/;"	l
pksyn	src/third.s	/^pksyn: mov bx,#msg_pks ; complain$/;"	l
pmend	src/chain.S	/^pmend:	call	flush			! flush table$/;"	l
pmend	src/chain.s	/^pmend: call flush ! flush table$/;"	l
pop	diagnose/sector.S	/^        pop     di$/;"	d
pop	diagnose/sector.S	/^        pop     dx$/;"	d
pop	src/biosdata.S	/^	pop	di$/;"	d
pop	src/biosdata.S	/^	pop	ds$/;"	d
pop	src/biosdata.S	/^	pop	dx$/;"	d
pop	src/bitmap.S	/^	pop	di$/;"	d
pop	src/bitmap.S	/^	pop	ds		; make sure DS is good$/;"	d
pop	src/bitmap.S	/^	pop	ds	$/;"	d
pop	src/bitmap.s	/^                pop di$/;"	d
pop	src/bitmap.s	/^                pop ds ;DS:SI points at param block$/;"	d
pop	src/bitmap.s	/^                pop ds ;restore DS$/;"	d
pop	src/bitmap.s	/^                pop dx ;get device$/;"	d
pop	src/bitmap.s	/^                pop dx ;was DI$/;"	d
pop	src/bitmap.s	/^                pop dx$/;"	d
pop	src/bitmap.s	/^        pop di ;y$/;"	d
pop	src/bitmap.s	/^        pop di$/;"	d
pop	src/bitmap.s	/^        pop ds$/;"	d
pop	src/bitmap.s	/^        pop dx$/;"	d
pop	src/bitmap.s	/^  pop di$/;"	d
pop	src/bitmap.s	/^ pop di ; clear stack$/;"	d
pop	src/bitmap.s	/^ pop di$/;"	d
pop	src/bitmap.s	/^ pop ds ; DS = 0x9000 (initseg)$/;"	d
pop	src/bitmap.s	/^ pop ds ; make sure DS is good$/;"	d
pop	src/bitmap.s	/^ pop ds$/;"	d
pop	src/bitmap.s	/^ pop dx ; restore base address$/;"	d
pop	src/bitmap.s	/^ pop dx ; restore registers$/;"	d
pop	src/bitmap.s	/^ pop dx ; set new divisor$/;"	d
pop	src/bitmap.s	/^ pop dx$/;"	d
pop	src/bootsect.S	/^	pop	di$/;"	d
pop	src/bootsect.S	/^	pop	ds$/;"	d
pop	src/bootsect.S	/^	pop	dx$/;"	d
pop	src/bootsect.s	/^	pop	di$/;"	d
pop	src/bootsect.s	/^	pop	ds$/;"	d
pop	src/bootsect.s	/^	pop	dx$/;"	d
pop	src/chain.S	/^	pop	di$/;"	d
pop	src/chain.S	/^	pop	ds		; DS:SI is primary map$/;"	d
pop	src/chain.S	/^	pop	ds		; restore the DS$/;"	d
pop	src/chain.S	/^	pop	ds$/;"	d
pop	src/chain.s	/^ pop di$/;"	d
pop	src/chain.s	/^ pop ds ; DS:SI is primary map$/;"	d
pop	src/chain.s	/^ pop ds ; restore the DS$/;"	d
pop	src/chain.s	/^ pop ds$/;"	d
pop	src/crt.S	/^	pop	di$/;"	d
pop	src/crt.S	/^	pop	dx			; get saved cursor position$/;"	d
pop	src/crt.S	/^	pop	dx		; restore cursor$/;"	d
pop	src/crt.S	/^	pop	dx$/;"	d
pop	src/disk.S	/^                pop     di$/;"	d
pop	src/disk.S	/^                pop     ds$/;"	d
pop	src/disk.S	/^                pop     dx$/;"	d
pop	src/disk.s	/^	pop	di$/;"	d
pop	src/disk.s	/^	pop	ds$/;"	d
pop	src/disk.s	/^	pop	dx$/;"	d
pop	src/disk.s	/^                pop     di$/;"	d
pop	src/disk.s	/^                pop     ds              ;DS:SI points at param block$/;"	d
pop	src/disk.s	/^                pop     ds              ;restore DS$/;"	d
pop	src/disk.s	/^                pop     ds$/;"	d
pop	src/disk.s	/^                pop     dx              ;get device$/;"	d
pop	src/disk.s	/^                pop     dx              ;was DI$/;"	d
pop	src/disk.s	/^                pop     dx$/;"	d
pop	src/display4.S	/^	pop	di$/;"	d
pop	src/display4.S	/^	pop	ds$/;"	d
pop	src/display4.S	/^	pop	dx$/;"	d
pop	src/display4.S	/^        pop     di              ;y$/;"	d
pop	src/display4.S	/^        pop     di$/;"	d
pop	src/display4.S	/^        pop     ds$/;"	d
pop	src/display4.S	/^        pop     dx$/;"	d
pop	src/dparam.S	/^	pop	dx			! number of heads$/;"	d
pop	src/first.S	/^	pop	ds$/;"	d
pop	src/first.S	/^	pop	dx		! restore device code$/;"	d
pop	src/first.S	/^	pop	dx		! restore specified BIOS code$/;"	d
pop	src/first.s	/^ pop dx ! restore device code$/;"	d
pop	src/first.s	/^ pop dx ! restore specified BIOS code$/;"	d
pop	src/mbr.S	/^	pop	dx		! restore device code$/;"	d
pop	src/mbr.S	/^	pop	dx$/;"	d
pop	src/mbr.s	/^	pop	dx		! restore device code$/;"	d
pop	src/mbr.s	/^	pop	dx$/;"	d
pop	src/mbr2.s	/^	pop	dx		! restore device code$/;"	d
pop	src/mbr2.s	/^	pop	dx$/;"	d
pop	src/menu.S	/^	pop	ds$/;"	d
pop	src/menu.S	/^	pop	dx$/;"	d
pop	src/read.S	/^                pop     di$/;"	d
pop	src/read.S	/^                pop     ds              ;DS:SI points at param block$/;"	d
pop	src/read.S	/^                pop     ds              ;restore DS$/;"	d
pop	src/read.S	/^                pop     dx              ;get device$/;"	d
pop	src/read.S	/^                pop     dx              ;was DI$/;"	d
pop	src/read.S	/^                pop     dx$/;"	d
pop	src/second.S	/^		pop	di$/;"	d
pop	src/second.S	/^	pop	di		; clear stack$/;"	d
pop	src/second.S	/^	pop	di$/;"	d
pop	src/second.S	/^	pop	ds		; DS = 0x9000 (initseg)$/;"	d
pop	src/second.S	/^	pop	ds$/;"	d
pop	src/second.S	/^	pop	dx		; restore base address$/;"	d
pop	src/second.S	/^	pop	dx		; restore registers$/;"	d
pop	src/second.S	/^	pop	dx		; set new divisor$/;"	d
pop	src/second.S	/^	pop	dx$/;"	d
pop	src/second.S	/^	pop     dx$/;"	d
pop	src/second.s	/^                pop di$/;"	d
pop	src/second.s	/^                pop ds ;DS:SI points at param block$/;"	d
pop	src/second.s	/^                pop ds ;restore DS$/;"	d
pop	src/second.s	/^                pop dx ;get device$/;"	d
pop	src/second.s	/^                pop dx ;was DI$/;"	d
pop	src/second.s	/^                pop dx$/;"	d
pop	src/second.s	/^  pop di$/;"	d
pop	src/second.s	/^ pop di ; clear stack$/;"	d
pop	src/second.s	/^ pop di$/;"	d
pop	src/second.s	/^ pop ds ; DS = 0x9000 (initseg)$/;"	d
pop	src/second.s	/^ pop ds$/;"	d
pop	src/second.s	/^ pop dx ; restore base address$/;"	d
pop	src/second.s	/^ pop dx ; restore registers$/;"	d
pop	src/second.s	/^ pop dx ; set new divisor$/;"	d
pop	src/second.s	/^ pop dx$/;"	d
pop	src/shs3.S	/^	pop	di$/;"	d
pop	src/shs3.S	/^	pop     di$/;"	d
pop	src/third.s	/^                pop di$/;"	d
pop	src/third.s	/^                pop ds ;DS:SI points at param block$/;"	d
pop	src/third.s	/^                pop ds ;restore DS$/;"	d
pop	src/third.s	/^                pop dx ;get device$/;"	d
pop	src/third.s	/^                pop dx ;was DI$/;"	d
pop	src/third.s	/^                pop dx$/;"	d
pop	src/third.s	/^  pop di$/;"	d
pop	src/third.s	/^ pop di ; clear stack$/;"	d
pop	src/third.s	/^ pop di$/;"	d
pop	src/third.s	/^ pop ds ; DS = 0x9000 (initseg)$/;"	d
pop	src/third.s	/^ pop ds$/;"	d
pop	src/third.s	/^ pop dx ; get saved cursor position$/;"	d
pop	src/third.s	/^ pop dx ; restore base address$/;"	d
pop	src/third.s	/^ pop dx ; restore cursor$/;"	d
pop	src/third.s	/^ pop dx ; restore registers$/;"	d
pop	src/third.s	/^ pop dx ; set new divisor$/;"	d
pop	src/third.s	/^ pop dx$/;"	d
pop	src/volume.S	/^	pop	di$/;"	d
pop	src/volume.S	/^	pop	dx		; restore device code$/;"	d
pop	src/volume.S	/^	pop	dx$/;"	d
port	src/bitmap.s	/^port: .byte 0 ; COM port (0 = unused, 1 = COM1, etc.)$/;"	l
port	src/common.h	/^;*\/    unsigned char port; \/* COM port. 0 = none, 1 = COM1, etc. !!! keep these two serial bytes together !!!$/;"	m	struct:__anon13
port	src/second.S	/^port:	.byte	0		; COM port (0 = unused, 1 = COM1, etc.)$/;"	l
port	src/second.s	/^port: .byte 0 ; COM port (0 = unused, 1 = COM1, etc.)$/;"	l
port	src/third.s	/^port: .byte 0 ; COM port (0 = unused, 1 = COM1, etc.)$/;"	l
pp_fd	src/common.c	/^FILE *pp_fd = NULL;$/;"	v
prc	src/probe.c	/^	void (*prc)();$/;"	m	struct:Probes	file:
pread	src/first.S	/^pread:$/;"	l
pread	src/first.s	/^pread:$/;"	l
prechr	src/bitmap.s	/^prechr: .byte 32 ; space: guard double blank supression$/;"	l
prechr	src/second.S	/^prechr:	.byte	32		; space: guard double blank supression$/;"	l
prechr	src/second.s	/^prechr: .byte 32 ; space: guard double blank supression$/;"	l
prechr	src/third.s	/^prechr: .byte 32 ; space: guard double blank supression$/;"	l
preload_dev_cache	src/device.c	/^void preload_dev_cache(void)$/;"	f
preload_types	src/partition.c	/^void preload_types(void)$/;"	f
present	src/bsect.c	/^static int present(char *var)$/;"	f	file:
print	src/disk.S	/^print:          push    ds$/;"	l
print	src/disk.s	/^print:          push    ds$/;"	l
print_all	src/bootsect.S	/^print_all:$/;"	l
print_all	src/bootsect.s	/^print_all:$/;"	l
print_carry	diagnose/test4.c	/^static void print_carry(int flag)$/;"	f	file:
print_digit	src/bootsect.S	/^print_digit:$/;"	l
print_digit	src/bootsect.s	/^print_digit:$/;"	l
print_geom	src/probe.c	/^static void print_geom(int dr, struct disk_geom geom)$/;"	f	file:
print_hex	src/bootsect.S	/^print_hex:$/;"	l
print_hex	src/bootsect.s	/^print_hex:$/;"	l
print_io_status	diagnose/test4.c	/^static void print_io_status(int status)$/;"	f	file:
print_loop	src/bootsect.S	/^print_loop:$/;"	l
print_loop	src/bootsect.s	/^print_loop:$/;"	l
print_nl	src/bootsect.S	/^print_nl:$/;"	l
print_nl	src/bootsect.s	/^print_nl:$/;"	l
print_pt	src/probe.c	/^static void print_pt(int index, struct partition pt)$/;"	f	file:
print_regs	diagnose/test4.c	/^void print_regs(union REGS *reg) {$/;"	f	file:
print_regs	diagnose/test5.c	/^void print_regs(union REGS *reg) {$/;"	f	file:
print_sregs	diagnose/test4.c	/^void print_sregs(struct SREGS *sreg) {$/;"	f	file:
print_sregs	diagnose/test5.c	/^void print_sregs(struct SREGS *sreg) {$/;"	f	file:
printf	diagnose/test4.c	18;"	d	file:
printf	diagnose/test5.c	19;"	d	file:
printline	src/edit.c	/^void printline(RGB pal[], int i)$/;"	f
printpalette	src/edit.c	/^void printpalette(RGB pal[], int n)$/;"	f
probe	src/device.c	/^	int probe;	\/* volume ID as probed *\/$/;"	m	struct:VolumeMgmt::__anon29	file:
probe	src/device.c	/^    	int probe;	\/* passed in from the BIOS data check *\/$/;"	m	struct:VolumeMgmt::__anon30	file:
probe_loop	src/bootsect.S	/^probe_loop:$/;"	l
probe_loop	src/bootsect.s	/^probe_loop:$/;"	l
probe_tell	src/probe.c	/^void probe_tell (char *cmd)$/;"	f
process	src/chain.S	/^process:$/;"	l
process	src/chain.s	/^process:$/;"	l
process	src/temp.c	/^void process(char *file, char *name)$/;"	f
prompt	src/common.h	/^;*\/    unsigned short prompt; \/* FLAG_PROMPT=always, FLAG_RAID install$/;"	m	struct:__anon12
prompt	src/first.S	/^prompt:	.word	0		! indicates whether to always enter prompt$/;"	l
prompt	src/first.s	/^prompt: .word 0 ! indicates whether to always enter prompt$/;"	l
protocol201	src/bitmap.s	/^protocol201:$/;"	l
protocol201	src/second.S	/^protocol201:$/;"	l
protocol201	src/second.s	/^protocol201:$/;"	l
protocol201	src/third.s	/^protocol201:$/;"	l
prt_map	src/common.c	/^unsigned int prt_map[PRTMAP_SIZE+1];$/;"	v
prtclp	src/chain.S	/^prtclp:	lodsw				! bios == 0 indicates end$/;"	l
prtclp	src/chain.s	/^prtclp: lodsw ! bios == 0 indicates end$/;"	l
prtmap	src/chain.S	/^prtmap:	.blkw	PRTMAP_SIZE*2+1	! only first word of last entry is read$/;"	l
prtmap	src/chain.s	/^prtmap: .blkw 32*2+1 ! only first word of last entry is read$/;"	l
pstate_reserved	src/md-int.h	/^	md_u32 pstate_reserved[MD_SB_PERSONALITY_WORDS - 2];$/;"	m	struct:md_superblock_s
pt	src/probe.h	/^   struct partition *pt;$/;"	m	struct:disk_geom	typeref:struct:disk_geom::partition
ptab	src/probe.c	/^	} ptab [] = {		\/* Not complete, by any means *\/$/;"	v	typeref:struct:partitions	file:
ptable	src/chain.S	/^ptable:	.blkw	0x20			! partition table to preload$/;"	l
ptable	src/chain.s	/^ptable: .blkw 0x20 ! partition table to preload$/;"	l
ptable	src/common.h	/^;*\/    unsigned char ptable[PARTITION_ENTRY*PARTITION_ENTRIES]; \/* part. table$/;"	m	struct:__anon14
ptr	diagnose/bios.c	/^  cmp	word ptr [0],#$20CD	! "int 20h" at psp:  ES:0000$/;"	v	typeref:struct:word
ptr	diagnose/bios.c	/^  mov	word ptr [iret_ins-2],es  ! patch return to int 20h exit$/;"	v	typeref:struct:word
punct	src/disk.S	/^punct:          mov     al,#':$/;"	l
punct	src/disk.s	/^punct:          mov     al,#':$/;"	l
purge	src/probe.c	/^int purge(void)$/;"	f
push	diagnose/sector.S	/^        push    di$/;"	d
push	diagnose/sector.S	/^        push    ds$/;"	d
push	diagnose/sector.S	/^        push    dx              ;AX=dividend-hi, DX=dividend-low$/;"	d
push	diagnose/sector.S	/^        push    dx              ;save registers$/;"	d
push	diagnose/sector.S	/^        push    dx              ;save sector number$/;"	d
push	diagnose/sector.S	/^        push    dx$/;"	d
push	src/biosdata.S	/^	push	di		; do not trust anyone$/;"	d
push	src/biosdata.S	/^	push	di		;$/;"	d
push	src/biosdata.S	/^	push	di$/;"	d
push	src/biosdata.S	/^	push	ds$/;"	d
push	src/biosdata.S	/^	push	dx		; paranoia, protect DL$/;"	d
push	src/biosdata.S	/^	push	dx		; protect this register$/;"	d
push	src/biosdata.S	/^	push	dx$/;"	d
push	src/bitmap.S	/^	push	di			; cp low$/;"	d
push	src/bitmap.S	/^	push	di$/;"	d
push	src/bitmap.S	/^	push	ds			; cp hi$/;"	d
push	src/bitmap.S	/^	push	ds		; cp -hi$/;"	d
push	src/bitmap.S	/^	push	ds		;sch-hi$/;"	d
push	src/bitmap.S	/^	push	ds$/;"	d
push	src/bitmap.s	/^                push di ;LBA hi word$/;"	d
push	src/bitmap.s	/^                push di$/;"	d
push	src/bitmap.s	/^                push ds ;save DS$/;"	d
push	src/bitmap.s	/^                push dx$/;"	d
push	src/bitmap.s	/^        push di$/;"	d
push	src/bitmap.s	/^        push ds ;$/;"	d
push	src/bitmap.s	/^        push ds$/;"	d
push	src/bitmap.s	/^        push dx ; save high order$/;"	d
push	src/bitmap.s	/^        push dx ;x2-x1+1$/;"	d
push	src/bitmap.s	/^        push dx$/;"	d
push	src/bitmap.s	/^  push di$/;"	d
push	src/bitmap.s	/^ push di ; cp low$/;"	d
push	src/bitmap.s	/^ push di ; do not trust anyone$/;"	d
push	src/bitmap.s	/^ push di ;$/;"	d
push	src/bitmap.s	/^ push di$/;"	d
push	src/bitmap.s	/^ push ds ; cp -hi$/;"	d
push	src/bitmap.s	/^ push ds ; cp hi$/;"	d
push	src/bitmap.s	/^ push ds ; save DS$/;"	d
push	src/bitmap.s	/^ push ds ;sch-hi$/;"	d
push	src/bitmap.s	/^ push ds$/;"	d
push	src/bitmap.s	/^ push dx ; paranoia, protect DL$/;"	d
push	src/bitmap.s	/^ push dx ; protect this register$/;"	d
push	src/bitmap.s	/^ push dx ; save base address$/;"	d
push	src/bitmap.s	/^ push dx$/;"	d
push	src/bootsect.S	/^	push	di$/;"	d
push	src/bootsect.S	/^	push	ds$/;"	d
push	src/bootsect.S	/^	push	dx				! save for error dump$/;"	d
push	src/bootsect.S	/^	push	dx$/;"	d
push	src/bootsect.s	/^	push	di$/;"	d
push	src/bootsect.s	/^	push	ds$/;"	d
push	src/bootsect.s	/^	push	dx				! save for error dump$/;"	d
push	src/bootsect.s	/^	push	dx$/;"	d
push	src/chain.S	/^	push	di$/;"	d
push	src/chain.S	/^	push	ds$/;"	d
push	src/chain.s	/^ push di$/;"	d
push	src/chain.s	/^ push ds$/;"	d
push	src/crt.S	/^	push	di$/;"	d
push	src/crt.S	/^	push	dx			;save current cursor position$/;"	d
push	src/crt.S	/^	push	dx		; save cursor position$/;"	d
push	src/crt.S	/^	push	dx$/;"	d
push	src/disk.S	/^                push    di$/;"	d
push	src/disk.S	/^                push    ds$/;"	d
push	src/disk.S	/^                push    dx$/;"	d
push	src/disk.s	/^	push	di		; do not trust anyone$/;"	d
push	src/disk.s	/^	push	di		;$/;"	d
push	src/disk.s	/^	push	di$/;"	d
push	src/disk.s	/^	push	ds$/;"	d
push	src/disk.s	/^	push	dx		; paranoia, protect DL$/;"	d
push	src/disk.s	/^	push	dx		; protect this register$/;"	d
push	src/disk.s	/^	push	dx$/;"	d
push	src/disk.s	/^                push    di              ;LBA hi word$/;"	d
push	src/disk.s	/^                push    di$/;"	d
push	src/disk.s	/^                push    ds              ;save DS$/;"	d
push	src/disk.s	/^                push    ds$/;"	d
push	src/disk.s	/^                push    dx$/;"	d
push	src/display4.S	/^	push	di$/;"	d
push	src/display4.S	/^	push	ds$/;"	d
push	src/display4.S	/^	push	dx$/;"	d
push	src/display4.S	/^        push    di$/;"	d
push	src/display4.S	/^        push    ds$/;"	d
push	src/display4.S	/^        push    dx      ;x2-x1+1$/;"	d
push	src/display4.S	/^        push    dx$/;"	d
push	src/dparam.S	/^	push	dx$/;"	d
push	src/dump.S	/^	push	di$/;"	d
push	src/dump.S	/^	push	ds$/;"	d
push	src/dump.S	/^	push	dx$/;"	d
push	src/first.S	/^	push	ds	! 0x7c0$/;"	d
push	src/first.S	/^	push	ds$/;"	d
push	src/first.S	/^	push	dx		! save flags$/;"	d
push	src/first.S	/^	push	dx		! set ext_dl (and ext_dh, which is not used) \/ first.S가 mbr이면 dl = drive number$/;"	d
push	src/first.S	/^	push	dx$/;"	d
push	src/first.s	/^ push ds ! 0x7c0$/;"	d
push	src/first.s	/^ push dx ! save flags$/;"	d
push	src/first.s	/^ push dx ! set ext_dl (and ext_dh, which is not used) \/ first.S가 mbr이면 dl = drive number$/;"	d
push	src/first.s	/^ push dx$/;"	d
push	src/mbr.S	/^	push	dx$/;"	d
push	src/mbr.s	/^	push	dx$/;"	d
push	src/mbr2.s	/^	push	dx$/;"	d
push	src/menu.S	/^	push	ds$/;"	d
push	src/menu.S	/^	push	dx$/;"	d
push	src/read.S	/^                push    di              ;LBA hi word$/;"	d
push	src/read.S	/^                push    di$/;"	d
push	src/read.S	/^                push    ds              ;save DS$/;"	d
push	src/read.S	/^                push    dx$/;"	d
push	src/second.S	/^		push	di$/;"	d
push	src/second.S	/^	push	di$/;"	d
push	src/second.S	/^	push	ds		; save DS$/;"	d
push	src/second.S	/^	push	ds$/;"	d
push	src/second.S	/^	push	dx		; save base address$/;"	d
push	src/second.S	/^	push	dx$/;"	d
push	src/second.S	/^	push    dx$/;"	d
push	src/second.S	/^        push    ds                      ;$/;"	d
push	src/second.S	/^        push    dx              ; save high order$/;"	d
push	src/second.s	/^                push di ;LBA hi word$/;"	d
push	src/second.s	/^                push di$/;"	d
push	src/second.s	/^                push ds ;save DS$/;"	d
push	src/second.s	/^                push dx$/;"	d
push	src/second.s	/^        push ds ;$/;"	d
push	src/second.s	/^        push dx ; save high order$/;"	d
push	src/second.s	/^  push di$/;"	d
push	src/second.s	/^ push di ; do not trust anyone$/;"	d
push	src/second.s	/^ push di ;$/;"	d
push	src/second.s	/^ push di$/;"	d
push	src/second.s	/^ push ds ; save DS$/;"	d
push	src/second.s	/^ push ds$/;"	d
push	src/second.s	/^ push dx ; paranoia, protect DL$/;"	d
push	src/second.s	/^ push dx ; protect this register$/;"	d
push	src/second.s	/^ push dx ; save base address$/;"	d
push	src/second.s	/^ push dx$/;"	d
push	src/shs3.S	/^	push	di$/;"	d
push	src/shs3.S	/^	push    di$/;"	d
push	src/shs3.S	/^	push    ds$/;"	d
push	src/third.s	/^                push di ;LBA hi word$/;"	d
push	src/third.s	/^                push di$/;"	d
push	src/third.s	/^                push ds ;save DS$/;"	d
push	src/third.s	/^                push dx$/;"	d
push	src/third.s	/^        push ds ;$/;"	d
push	src/third.s	/^        push dx ; save high order$/;"	d
push	src/third.s	/^  push di$/;"	d
push	src/third.s	/^ push di ; do not trust anyone$/;"	d
push	src/third.s	/^ push di ;$/;"	d
push	src/third.s	/^ push di$/;"	d
push	src/third.s	/^ push ds ; save DS$/;"	d
push	src/third.s	/^ push ds$/;"	d
push	src/third.s	/^ push dx ; paranoia, protect DL$/;"	d
push	src/third.s	/^ push dx ; protect this register$/;"	d
push	src/third.s	/^ push dx ; save base address$/;"	d
push	src/third.s	/^ push dx ; save cursor position$/;"	d
push	src/third.s	/^ push dx ;save current cursor position$/;"	d
push	src/third.s	/^ push dx$/;"	d
push	src/volume.S	/^	push	di$/;"	d
push	src/volume.S	/^	push	dx		; save device code$/;"	d
push	src/volume.S	/^	push	dx$/;"	d
put_std_bmpfile	src/edit.c	/^int put_std_bmpfile(int fd, int ifd,$/;"	f
putc	src/disk.S	/^putc:           push    bx$/;"	l
putc	src/disk.s	/^putc:           push    bx$/;"	l
putc2	src/disk.S	/^putc2:          int     0x10$/;"	l
putc2	src/disk.s	/^putc2:          int     0x10$/;"	l
putch	diagnose/cprintf.c	17;"	d	file:
putch	diagnose/cprintf.c	19;"	d	file:
putch	diagnose/test4.c	16;"	d	file:
putch	diagnose/test4.c	22;"	d	file:
putch	diagnose/test5.c	17;"	d	file:
putch	diagnose/test5.c	23;"	d	file:
putkbd	src/bitmap.s	/^putkbd: add si,#4 ; skip over "kbd="$/;"	l
putkbd	src/second.S	/^putkbd:	add	si,#4		; skip over "kbd="$/;"	l
putkbd	src/second.s	/^putkbd: add si,#4 ; skip over "kbd="$/;"	l
putkbd	src/third.s	/^putkbd: add si,#4 ; skip over "kbd="$/;"	l
pw_file	src/cfg.c	/^FILE *pw_file = NULL;$/;"	v
pw_file_name	src/cfg.c	/^static char *pw_file_name;$/;"	v	file:
pw_file_update	src/bsect.c	/^void pw_file_update(int passw)$/;"	f
pw_fill_cache	src/bsect.c	/^void pw_fill_cache(void)$/;"	f
pw_get	src/bsect.c	/^static void pw_get(char *pass, int crcval[], int option)$/;"	f	file:
pw_input	src/bsect.c	/^char *pw_input(void)$/;"	f
pw_wipe	src/bsect.c	/^void pw_wipe(char *pass)$/;"	f
pwbad	src/second.S	/^pwbad:	inc	cl		; count error$/;"	l
pwbs	src/bitmap.s	/^pwbs: mov bx,#bs$/;"	l
pwbs	src/second.S	/^pwbs:	mov	bx,#bs$/;"	l
pwbs	src/second.s	/^pwbs: mov bx,#bs$/;"	l
pwbs	src/third.s	/^pwbs: mov bx,#bs$/;"	l
pwcleanup	src/bitmap.s	/^pwcleanup:$/;"	l
pwcleanup	src/second.S	/^pwcleanup:$/;"	l
pwcleanup	src/second.s	/^pwcleanup:$/;"	l
pwcleanup	src/third.s	/^pwcleanup:$/;"	l
pwcr	src/bitmap.s	/^pwcr:$/;"	l
pwcr	src/second.S	/^pwcr:	$/;"	l
pwcr	src/second.S	/^pwcr:	call	crlf$/;"	l
pwcr	src/second.s	/^pwcr:$/;"	l
pwcr	src/third.s	/^pwcr:$/;"	l
pwdel	src/bitmap.s	/^pwdel: dec di$/;"	l
pwdel	src/second.S	/^pwdel:	dec	di$/;"	l
pwdel	src/second.s	/^pwdel: dec di$/;"	l
pwdel	src/third.s	/^pwdel: dec di$/;"	l
pwdelch	src/bitmap.s	/^pwdelch: or di,di$/;"	l
pwdelch	src/second.S	/^pwdelch: or	di,di$/;"	l
pwdelch	src/second.s	/^pwdelch: or di,di$/;"	l
pwdelch	src/third.s	/^pwdelch: or di,di$/;"	l
pwdell	src/bitmap.s	/^pwdell: inc di$/;"	l
pwdell	src/second.S	/^pwdell:	inc	di$/;"	l
pwdell	src/second.S	/^pwdell:	pop	si		; reset the pointer$/;"	l
pwdell	src/second.s	/^pwdell: inc di$/;"	l
pwdell	src/third.s	/^pwdell: inc di$/;"	l
pwfail	src/bitmap.s	/^pwfail: mov bx,#msg_pf ; display an error message$/;"	l
pwfail	src/second.S	/^pwfail:	mov	bx,#msg_pf	; display an error message$/;"	l
pwfail	src/second.s	/^pwfail: mov bx,#msg_pf ; display an error message$/;"	l
pwfail	src/third.s	/^pwfail: mov bx,#msg_pf ; display an error message$/;"	l
pwgood	src/second.S	/^pwgood:	inc	si		; good character -> go on$/;"	l
pwloop	src/bitmap.s	/^pwloop:$/;"	l
pwloop	src/second.S	/^pwloop:	push	cx		; get a key$/;"	l
pwloop	src/second.S	/^pwloop:$/;"	l
pwloop	src/second.s	/^pwloop:$/;"	l
pwloop	src/third.s	/^pwloop:$/;"	l
pwsave	src/bsect.c	/^static PASSWORD *pwsave = NULL;$/;"	v	file:
pwtime	src/bitmap.s	/^pwtime: ; CX != 0 if enter here$/;"	l
pwtime	src/second.S	/^pwtime:				; CX != 0 if enter here$/;"	l
pwtime	src/second.S	/^pwtime:	pop	cx		; drop CX ...$/;"	l
pwtime	src/second.s	/^pwtime: ; CX != 0 if enter here$/;"	l
pwtime	src/third.s	/^pwtime: ; CX != 0 if enter here$/;"	l
query	src/common.c	/^      ireloc = 0, force_fs = 0, force_raid = 0, extended_pt = 0, query = 0,$/;"	v
raid	src/first.S	/^raid:	.long	0		! raid sector offset$/;"	l
raid	src/first.s	/^raid: .long 0 ! raid sector offset$/;"	l
raid	src/geometry.h	/^    int raid; \/* file references require raid1 relocation *\/$/;"	m	struct:__anon6
raid_base	src/raid.c	/^static unsigned int raid_base, raid_offset[MAX_RAID];$/;"	v	file:
raid_bios	src/raid.c	/^static int raid_bios[MAX_RAID+1];$/;"	v	file:
raid_dev_mask	src/common.h	/^;*\/	unsigned short raid_dev_mask;			\/* 16 bit raid device mask flagging items in serial_no$/;"	m	struct:__anon15
raid_device	src/raid.c	/^static int raid_device[MAX_RAID+1];$/;"	v	file:
raid_disk	src/md-int.h	/^	md_u32 raid_disk;	\/* 3 The role of the device in the raid set   *\/$/;"	m	struct:md_device_descriptor_s
raid_disk	src/md-int.h	/^	md_u32 raid_disk;$/;"	m	struct:md_disk_info_s
raid_disks	src/md-int.h	/^	md_u32 raid_disks;	\/* 10 disks in a fully functional raid set    *\/$/;"	m	struct:md_superblock_s
raid_disks	src/md-int.h	/^	md_u32 raid_disks;$/;"	m	struct:md_array_info_s
raid_final	src/raid.c	/^void raid_final(void)$/;"	f
raid_flags	src/common.c	/^int verbose = 0, test = 0, compact = 0, linear = 0, raid_flags = 0, zflag = 0,$/;"	v
raid_index	src/common.c	/^int boot_dev_nr, raid_index, do_md_install;$/;"	v
raid_list	src/raid.c	/^static char *raid_list[MAX_RAID];$/;"	v	file:
raid_mask	src/raid.c	/^int raid_mask(int *offsets)$/;"	f
raid_mbr	src/raid.c	/^static char *raid_mbr[MAX_RAID];$/;"	v	file:
raid_offset	src/common.h	/^;*\/	unsigned int raid_offset[MAX_RAID_DEVICES];	\/* RAID offsets for flagged devices$/;"	m	struct:__anon15
raid_offset	src/common.h	/^;*\/    unsigned int raid_offset; \/* raid partition\/partition offset$/;"	m	struct:__anon12
raid_offset	src/raid.c	/^static unsigned int raid_base, raid_offset[MAX_RAID];$/;"	v	file:
raid_setup	src/raid.c	/^int raid_setup(void)$/;"	f
ralloc	src/common.c	/^void *ralloc(void *old,int size)$/;"	f
ram_size	src/bootsect.S	/^ram_size:$/;"	l
ram_size	src/bootsect.s	/^ram_size:$/;"	l
ramdisk	src/common.h	/^    unsigned int ramdisk;	\/* 24: RAM disk start address *\/$/;"	m	struct:__anon23
ramdisk_max	src/common.h	/^    unsigned int ramdisk_max;	\/* 44: 2.03 address32 of highest mem. for ramdisk *\/$/;"	m	struct:__anon23
ramdisk_size	src/common.h	/^    unsigned int ramdisk_size;	\/* 28: RAM disk size *\/$/;"	m	struct:__anon23
rate	src/geometry.h	/^			rate,		\/* data rate. |= 0x40 for perpendicular *\/$/;"	m	struct:floppy_struct
rd_have_hma	src/bitmap.s	/^rd_have_hma: ; have the HMA \/ 1k in EAX$/;"	l
rd_have_hma	src/second.S	/^rd_have_hma:	; have the HMA \/ 1k in EAX$/;"	l
rd_have_hma	src/second.s	/^rd_have_hma: ; have the HMA \/ 1k in EAX$/;"	l
rd_have_hma	src/third.s	/^rd_have_hma: ; have the HMA \/ 1k in EAX$/;"	l
rd_okay	src/bitmap.s	/^rd_okay:$/;"	l
rd_okay	src/second.S	/^rd_okay:$/;"	l
rd_okay	src/second.s	/^rd_okay:$/;"	l
rd_okay	src/third.s	/^rd_okay:$/;"	l
rd_setup	src/bitmap.s	/^rd_setup:$/;"	l
rd_setup	src/second.S	/^rd_setup:$/;"	l
rd_setup	src/second.s	/^rd_setup:$/;"	l
rd_setup	src/third.s	/^rd_setup:$/;"	l
rd_size	src/common.h	/^;*\/    unsigned short rd_size[2]; \/* RAM disk size in sectors, 0 if none$/;"	m	struct:__anon9
rd_use_eax	src/bitmap.s	/^rd_use_eax:$/;"	l
rd_use_eax	src/second.S	/^rd_use_eax:$/;"	l
rd_use_eax	src/second.s	/^rd_use_eax:$/;"	l
rd_use_eax	src/third.s	/^rd_use_eax:$/;"	l
rdbeg	src/bitmap.s	/^rdbeg: .word 0,0 ; RAM dist begin address (dword)$/;"	l
rdbeg	src/second.S	/^rdbeg:	.word	0,0		; RAM dist begin address (dword)$/;"	l
rdbeg	src/second.s	/^rdbeg: .word 0,0 ; RAM dist begin address (dword)$/;"	l
rdbeg	src/third.s	/^rdbeg: .word 0,0 ; RAM dist begin address (dword)$/;"	l
rdhigh	src/bitmap.s	/^rdhigh: push bx ; okay - DS:BX points to GDT in this case$/;"	l
rdhigh	src/second.S	/^rdhigh:	push	bx		; okay - DS:BX points to GDT in this case$/;"	l
rdhigh	src/second.s	/^rdhigh: push bx ; okay - DS:BX points to GDT in this case$/;"	l
rdhigh	src/third.s	/^rdhigh: push bx ; okay - DS:BX points to GDT in this case$/;"	l
rdszh	src/bitmap.s	/^rdszh: .word 0$/;"	l
rdszh	src/second.S	/^rdszh:	.word	0$/;"	l
rdszh	src/second.s	/^rdszh: .word 0$/;"	l
rdszh	src/third.s	/^rdszh: .word 0$/;"	l
rdszl	src/bitmap.s	/^rdszl: .word 0 ; RAM disk size$/;"	l
rdszl	src/second.S	/^rdszl:	.word	0		; RAM disk size$/;"	l
rdszl	src/second.s	/^rdszl: .word 0 ; RAM disk size$/;"	l
rdszl	src/third.s	/^rdszl: .word 0 ; RAM disk size$/;"	l
read	diagnose/bios.c	/^read(fd,buf,len)$/;"	f
readClus1	diagnose/sector.S	/^readClus1:$/;"	l
readClus2	diagnose/sector.S	/^readClus2:$/;"	l
readClus3	diagnose/sector.S	/^readClus3:$/;"	l
readCluster	diagnose/sector.S	/^readCluster:$/;"	l
read_it	src/bootsect.S	/^read_it:$/;"	l
read_it	src/bootsect.s	/^read_it:$/;"	l
read_partitions	src/partition.c	/^int read_partitions(char *part, int max, int *volid,$/;"	f
read_track	src/bootsect.S	/^read_track:$/;"	l
read_track	src/bootsect.s	/^read_track:$/;"	l
read_vol_id	src/bitmap.s	/^read_vol_id:$/;"	l
read_vol_id	src/second.s	/^read_vol_id:$/;"	l
read_vol_id	src/third.s	/^read_vol_id:$/;"	l
read_vol_id	src/volume.S	/^read_vol_id:$/;"	l
readcont	diagnose/sector.S	/^readcont:$/;"	l
realmode	src/disk.S	/^realmode:$/;"	l
realmode	src/disk.s	/^realmode:$/;"	l
red	src/bitmap.h	/^   bm_byte  blue, green, red, null;$/;"	m	struct:Rgb
red	src/bitmap.h	/^   bm_byte  blue, green, red;$/;"	m	struct:Rgb2
reg	diagnose/test4.c	/^union REGS reg, oreg;$/;"	v	typeref:union:REGS
reg	diagnose/test5.c	/^union REGS reg, oreg;$/;"	v	typeref:union:REGS
reg	src/probe.h	/^           fn48_t reg;		\/* AH & flags returned from the call *\/$/;"	m	struct:Edd
register_bios	src/device.c	/^unsigned int register_bios(int bios, int device)$/;"	f
reloc	src/first.S	/^reloc:$/;"	l
reloc	src/first.s	/^reloc:$/;"	l
remto	src/bitmap.s	/^remto: push es ; remove the interrupt handler$/;"	l
remto	src/second.S	/^remto:	push	es		; remove the interrupt handler$/;"	l
remto	src/second.s	/^remto: push es ; remove the interrupt handler$/;"	l
remto	src/third.s	/^remto: push es ; remove the interrupt handler$/;"	l
rerror	src/bitmap.s	/^rerror:$/;"	l
rerror	src/second.S	/^rerror:$/;"	l
rerror	src/second.s	/^rerror:$/;"	l
rerror	src/third.s	/^rerror:$/;"	l
reserved	src/bitmap.h	/^;*\/	short mincol, reserved[3];	\/* BMP min per col before spill to next, reserved spacer$/;"	m	struct:BitmapLiloHeader
reserved	src/common.h	/^;*\/	short mincol, reserved[3];	\/* BMP min per col before spill to next, reserved spacer$/;"	m	struct:__anon15
reserved	src/common.h	/^;*\/    unsigned char  reserved[7];		\/* pad to 32 bytes$/;"	m	struct:__anon10
reserved	src/md-int.h	/^	md_u32 reserved[MD_SB_DESCRIPTOR_WORDS - 5];$/;"	m	struct:md_device_descriptor_s
reserved	src/md-int.h	/^	md_u32 reserved[MD_SB_RESERVED_WORDS];$/;"	m	struct:md_superblock_s
reserved_sectors	diagnose/sector.S	/^reserved_sectors:	dw	1$/;"	d
reserved_sectors	src/common.h	/^;*\/    unsigned char  reserved_sectors[2];	\/*$/;"	m	struct:__anon10
reset	src/bitmap.s	/^reset: call say$/;"	l
reset	src/second.S	/^reset:	call	say$/;"	l
reset	src/second.s	/^reset: call say$/;"	l
reset	src/third.s	/^reset: call say$/;"	l
restrt	src/bitmap.s	/^restrt: mov bx,cs ; adjust segment registers$/;"	l
restrt	src/second.S	/^restrt: mov	bx,cs		; adjust segment registers$/;"	l
restrt	src/second.s	/^restrt: mov bx,cs ; adjust segment registers$/;"	l
restrt	src/third.s	/^restrt: mov bx,cs ; adjust segment registers$/;"	l
restrt1	src/bitmap.s	/^restrt1:$/;"	l
restrt1	src/second.S	/^restrt1:$/;"	l
restrt1	src/second.s	/^restrt1:$/;"	l
restrt1	src/third.s	/^restrt1:$/;"	l
retrieve_crc	src/bsect.c	/^static void retrieve_crc(int crcval[])$/;"	f	file:
retry	diagnose/sector.S	/^retry:$/;"	l
return	diagnose/sector.S	/^return:$/;"	l
rev0	src/chain.S	/^rev0:	lodsw			; get to, from pair$/;"	l
rev0	src/chain.s	/^rev0: lodsw ; get to, from pair$/;"	l
rev9	src/chain.S	/^rev9:	pop	si		; restore SI$/;"	l
rev9	src/chain.s	/^rev9: pop si ; restore SI$/;"	l
rev_map_device	src/volume.S	/^rev_map_device:$/;"	l
revmap1	src/chain.S	/^revmap1:$/;"	l
revmap1	src/chain.s	/^revmap1:$/;"	l
rmask	src/bitmap.s	/^rmask: .word 0 ; physical raid mask$/;"	l
rmask	src/second.s	/^rmask: .word 0 ; physical raid mask$/;"	l
rmask	src/third.s	/^rmask: .word 0 ; physical raid mask$/;"	l
rmask	src/volume.S	/^rmask:	.word	0		; physical raid mask$/;"	l
rokay	src/bitmap.s	/^rokay: pop bx$/;"	l
rokay	src/second.S	/^rokay:	pop	bx$/;"	l
rokay	src/second.s	/^rokay: pop bx$/;"	l
rokay	src/third.s	/^rokay: pop bx$/;"	l
root_defined	src/bootsect.S	/^root_defined:$/;"	l
root_dev	src/bootsect.S	/^root_dev:$/;"	l
root_dev	src/bootsect.s	/^root_dev:$/;"	l
root_dir_entries	src/common.h	/^;*\/    unsigned char  root_dir_entries[2];	\/*$/;"	m	struct:__anon10
root_flags	src/bootsect.S	/^root_flags:$/;"	l
root_flags	src/bootsect.s	/^root_flags:$/;"	l
row	src/bitmap.h	/^;*\/	short row, col, ncol;		\/* BMP row, col, and ncols$/;"	m	struct:BitmapLiloHeader
row	src/common.h	/^;*\/	short row, col, ncol;		\/* BMP row, col, and ncols$/;"	m	struct:__anon15
row	src/probe.c	/^static int mode, col, row, page;$/;"	v	file:
row1	src/bitmap.S	/^row1:$/;"	l
row1	src/bitmap.s	/^row1:$/;"	l
row1	src/crt.S	/^row1:	cbw$/;"	l
row1	src/third.s	/^row1: cbw$/;"	l
row2	src/bitmap.S	/^row2:$/;"	l
row2	src/bitmap.s	/^row2:$/;"	l
rp_read	src/bootsect.S	/^rp_read:$/;"	l
rp_read	src/bootsect.s	/^rp_read:$/;"	l
rsector	src/geometry.c	/^    __u64 rsector;$/;"	m	struct:evms_get_bmap_t	file:
rtab	src/bitmap.s	/^rtab = *$/;"	d
rtab	src/second.s	/^rtab = *$/;"	d
rtab	src/third.s	/^rtab = *$/;"	d
rtab	src/volume.S	/^rtab	=	*$/;"	d
rtab	src/volume.S	/^rtab:	.blkw	MAX_BIOS_DEVICES_asm*2	; raid offsets indexed the same$/;"	l
rvi_9	src/bitmap.s	/^rvi_9:$/;"	l
rvi_9	src/second.s	/^rvi_9:$/;"	l
rvi_9	src/third.s	/^rvi_9:$/;"	l
rvi_9	src/volume.S	/^rvi_9:$/;"	l
rvi_exit	src/bitmap.s	/^rvi_exit:$/;"	l
rvi_exit	src/second.s	/^rvi_exit:$/;"	l
rvi_exit	src/third.s	/^rvi_exit:$/;"	l
rvi_exit	src/volume.S	/^rvi_exit:$/;"	l
s2lbad	src/bitmap.s	/^s2lbad:$/;"	l
s2lbad	src/second.S	/^s2lbad:	$/;"	l
s2lbad	src/second.s	/^s2lbad:$/;"	l
s2lbad	src/third.s	/^s2lbad:$/;"	l
s2ldone	src/bitmap.s	/^s2ldone:$/;"	l
s2ldone	src/second.S	/^s2ldone:$/;"	l
s2ldone	src/second.s	/^s2ldone:$/;"	l
s2ldone	src/third.s	/^s2ldone:$/;"	l
s2lhex	src/bitmap.s	/^s2lhex: add cx,cx ; it is hexadecimal$/;"	l
s2lhex	src/second.S	/^s2lhex: add	cx,cx		; it is hexadecimal$/;"	l
s2lhex	src/second.s	/^s2lhex: add cx,cx ; it is hexadecimal$/;"	l
s2lhex	src/third.s	/^s2lhex: add cx,cx ; it is hexadecimal$/;"	l
s2lmul	src/bitmap.s	/^s2lmul:$/;"	l
s2lmul	src/second.S	/^s2lmul:$/;"	l
s2lmul	src/second.s	/^s2lmul:$/;"	l
s2lmul	src/third.s	/^s2lmul:$/;"	l
s2lnext	src/bitmap.s	/^s2lnext:$/;"	l
s2lnext	src/second.S	/^s2lnext:$/;"	l
s2lnext	src/second.s	/^s2lnext:$/;"	l
s2lnext	src/third.s	/^s2lnext:$/;"	l
s4	src/probe.c	/^   } s4;$/;"	m	union:Buf	typeref:struct:Buf::__anon53	file:
s5	src/probe.c	/^   } s5;$/;"	m	union:Buf	typeref:struct:Buf::__anon54	file:
s_hls	src/edit.c	/^			s_hls[NPALETTE], v_hsv[NPALETTE], l_hls[NPALETTE];$/;"	v	file:
s_hsv	src/edit.c	/^static float hue[NPALETTE], y_yiq[NPALETTE], s_hsv[NPALETTE], $/;"	v	file:
sa6_from_sa	src/map.c	/^static int sa6_from_sa(SECTOR_ADDR6 *sa6, SECTOR_ADDR *sa)$/;"	f	file:
sa_device	src/common.s	/^						sa_device:	.blkb	1$/;"	l
sa_head	src/common.s	/^						sa_head:	.blkb	1$/;"	l
sa_num_sect	src/common.s	/^						sa_num_sect:	.blkb	1$/;"	l
sa_sector	src/common.s	/^						sa_sector:	.blkb	1$/;"	l
sa_size	src/common.s	/^						sa_size:$/;"	l
sa_track	src/common.s	/^						sa_track:	.blkb	1$/;"	l
sameFATsec	diagnose/sector.S	/^sameFATsec:$/;"	l
sane	src/disk.S	/^sane:$/;"	l
sane	src/disk.s	/^sane:$/;"	l
sax	src/second.S	/^sax:	.ascii	"AX="$/;"	l
say	src/bitmap.s	/^say: mov al,(bx) ; get byte$/;"	l
say	src/chain.S	/^say:	push	ax$/;"	l
say	src/chain.s	/^say: push ax$/;"	l
say	src/disk.S	/^say:            push    bp$/;"	l
say	src/disk.s	/^say:            push    bp$/;"	l
say	src/dump.S	/^say:	mov	al,(bx)		! get byte$/;"	l
say	src/mbr.S	/^say:	pop	si		! get CS:SI pointer to character string$/;"	l
say	src/mbr.s	/^say:	pop	si		! get CS:SI pointer to character string$/;"	l
say	src/mbr2.s	/^say:	pop	si		! get CS:SI pointer to character string$/;"	l
say	src/second.S	/^say:	mov	al,(bx)		; get byte$/;"	l
say	src/second.s	/^say: mov al,(bx) ; get byte$/;"	l
say	src/third.s	/^say: mov al,(bx) ; get byte$/;"	l
say1	src/disk.S	/^say1:           lodsb$/;"	l
say1	src/disk.s	/^say1:           lodsb$/;"	l
say1	src/mbr.S	/^say1:	lodsb			! but DS==CS, so this works$/;"	l
say1	src/mbr.s	/^say1:	lodsb			! but DS==CS, so this works$/;"	l
say1	src/mbr2.s	/^say1:	lodsb			! but DS==CS, so this works$/;"	l
say2	src/disk.S	/^say2:           mov     (bp+2),si$/;"	l
say2	src/disk.s	/^say2:           mov     (bp+2),si$/;"	l
say9	src/mbr.S	/^say9:$/;"	l
say9	src/mbr.s	/^say9:$/;"	l
say9	src/mbr2.s	/^say9:$/;"	l
say_2	src/chain.S	/^say_2:	lodsb			! get byte$/;"	l
say_2	src/chain.s	/^say_2: lodsb ! get byte$/;"	l
say_loop	src/bitmap.s	/^say_loop:$/;"	l
say_loop	src/second.S	/^say_loop:$/;"	l
say_loop	src/second.s	/^say_loop:$/;"	l
say_loop	src/third.s	/^say_loop:$/;"	l
sbx	src/second.S	/^sbx:	.ascii	" BX="$/;"	l
scan_dir	src/device.c	/^static int scan_dir(ST_BUF *next,DEVICE *dev,char *parent,int number)$/;"	f	file:
scroll1	src/second.S	/^scroll1:$/;"	l
scroll1	src/third.s	/^scroll1:$/;"	l
scroll2	src/second.S	/^scroll2:$/;"	l
scroll2	src/third.s	/^scroll2:$/;"	l
scroll_set	src/second.S	/^scroll_set:$/;"	l
scroll_set	src/third.s	/^scroll_set:$/;"	l
scrollit	src/second.S	/^scrollit:$/;"	l
scrollit	src/third.s	/^scrollit:$/;"	l
scx	src/second.S	/^scx:	.ascii	" CX="$/;"	l
sdone	src/second.S	/^sdone:	.byte	10$/;"	l
sdx	src/second.S	/^sdx:	.ascii	" DX="$/;"	l
secPerCl	diagnose/sector.S	/^secPerCl:	.blkb	1	; sectors_per_cluster$/;"	l
secPerFAT	diagnose/sector.S	/^secPerFAT:	.blkw	1	; sectors_per_FAT$/;"	l
secSiz	diagnose/sector.S	/^secSiz:		.blkw	1	; bytes_per_sector$/;"	l
secondary	src/common.h	/^;*\/    SECTOR_ADDR secondary; \/* sectors of the second stage loader$/;"	m	struct:__anon12
secondary_map	src/bsect.c	/^static char secondary_map[SECTOR_SIZE];$/;"	v	file:
sect	src/geometry.h	/^			sect,		\/* sectors per track *\/$/;"	m	struct:floppy_struct
sector	diagnose/test5.c	/^	byte sector[SECTOR_SIZE];$/;"	m	union:Buffer::__anon57	file:
sector	src/common.h	/^    	unsigned int sector[SECTOR_SIZE\/4*MAX_DESCR_SECS - 1];$/;"	m	struct:__anon18::__anon20
sector	src/common.h	/^    unsigned char sector[SECTOR_SIZE*MAX_DESCR_SECS];$/;"	m	union:__anon18
sector	src/common.h	/^    unsigned char sector[SECTOR_SIZE];$/;"	m	union:__anon17
sector	src/common.h	/^    unsigned int sector;$/;"	m	struct:__anon22
sector	src/common.h	/^;*\/    unsigned char sector,track; \/* CX $/;"	m	struct:__anon8
sector	src/partition.h	/^	unsigned char sector;		\/* starting sector *\/$/;"	m	struct:partition
sector_size	src/probe.h	/^   unsigned short sector_size;$/;"	m	struct:Edd
sectors	src/bootsect.S	/^sectors:$/;"	l
sectors	src/bootsect.s	/^sectors:$/;"	l
sectors	src/geometry.h	/^      unsigned char sectors;$/;"	m	struct:hd_geometry
sectors	src/geometry.h	/^    int cylinders,sectors;$/;"	m	struct:__anon6
sectors	src/geometry.h	/^    int sectors;$/;"	m	struct:_dt_entry
sectors	src/probe.h	/^   unsigned int  sectors;$/;"	m	struct:Edd
sectors_per_FAT	diagnose/sector.S	/^sectors_per_FAT:	dw	9$/;"	d
sectors_per_FAT	src/common.h	/^;*\/    unsigned char  sectors_per_FAT[2];	\/*$/;"	m	struct:__anon10
sectors_per_cluster	diagnose/sector.S	/^sectors_per_cluster:	db	1$/;"	d
sectors_per_cluster	src/common.h	/^;*\/    unsigned char  sectors_per_cluster;	\/*$/;"	m	struct:__anon10
sectors_per_track	diagnose/sector.S	/^sectors_per_track:	dw	18$/;"	d
sectors_per_track	src/common.h	/^;*\/    unsigned char  sectors_per_track[2];	\/* DOS v.3$/;"	m	struct:__anon10
seg	src/crt.S	/^	seg ds$/;"	d
seg	src/third.s	/^ seg ds$/;"	d
segment	src/probe.h	/^   		  segment;$/;"	m	struct:Edd
select_loader	src/bsect.c	/^BUILTIN_FILE *select_loader(void)$/;"	f
semi	src/common.h	460;"	d
semi	src/edit.h	18;"	d
ser1	src/bitmap.s	/^ser1: seg cs$/;"	l
ser1	src/second.S	/^ser1:	seg	cs$/;"	l
ser1	src/second.s	/^ser1: seg cs$/;"	l
ser1	src/third.s	/^ser1: seg cs$/;"	l
serLI	src/bitmap.s	/^serLI: .byte 13,10,0x4c,0x49 ; cr,lf,"LI"$/;"	l
serLI	src/second.S	/^serLI:	.byte	13,10,0x4c,0x49		; cr,lf,"LI"$/;"	l
serLI	src/second.s	/^serLI: .byte 13,10,0x4c,0x49 ; cr,lf,"LI"$/;"	l
serLI	src/third.s	/^serLI: .byte 13,10,0x4c,0x49 ; cr,lf,"LI"$/;"	l
ser_param	src/common.h	/^;*\/    unsigned char ser_param; \/* RS-232 parameters, must be 0 if unused$/;"	m	struct:__anon13
serial_no	src/common.h	/^;*\/	unsigned int serial_no[MAX_BIOS_DEVICES];	\/* Known device serial nos. 0x80 .. 0x8F$/;"	m	struct:__anon15
serial_no	src/device.c	/^unsigned int serial_no[MAX_BIOS_DEVICES];$/;"	v
serial_no	src/mbr.S	/^serial_no:	.blkb	4	! volume serial number$/;"	l
serial_no	src/mbr.s	/^serial_no:	.blkb	4	! volume serial number$/;"	l
serial_no	src/mbr2.s	/^serial_no:	.blkb	4	! volume serial number$/;"	l
serial_no	src/probe.h	/^   int serial_no;		\/* added at PROBE_VERSION==4 *\/$/;"	m	struct:disk_geom
serial_number	diagnose/sector.S	/^serial_number:		dd      0       ; volume unique ID number$/;"	d
serial_setup	src/bitmap.s	/^serial_setup:$/;"	l
serial_setup	src/second.S	/^serial_setup:$/;"	l
serial_setup	src/second.s	/^serial_setup:$/;"	l
serial_setup	src/third.s	/^serial_setup:$/;"	l
serial_valid	src/device.c	/^int serial_valid(unsigned int serial, int disk_bios)$/;"	f
serret	src/bitmap.s	/^serret: pop dx ; done$/;"	l
serret	src/second.S	/^serret:	pop	dx		; done$/;"	l
serret	src/second.s	/^serret: pop dx ; done$/;"	l
serret	src/third.s	/^serret: pop dx ; done$/;"	l
ses	src/second.S	/^ses:	.ascii	" ES="$/;"	l
set_fs	diagnose/test4.c	/^int set_fs(int val)$/;"	f	file:
set_magic	src/md-int.h	/^	md_u32 set_magic;	\/*  5 Raid set identifier		      *\/$/;"	m	struct:md_superblock_s
setto	src/bitmap.s	/^setto: or ax,ax ; time out immediately ?$/;"	l
setto	src/second.S	/^setto:	or	ax,ax		; time out immediately ?$/;"	l
setto	src/second.s	/^setto: or ax,ax ; time out immediately ?$/;"	l
setto	src/third.s	/^setto: or ax,ax ; time out immediately ?$/;"	l
setup	diagnose/test5.c	/^void setup(int rval)$/;"	f	file:
setup_sects	src/bootsect.S	/^setup_sects:$/;"	l
setup_sects	src/bootsect.s	/^setup_sects:$/;"	l
setupseg	src/bitmap.s	/^setupseg = *-2 ; setupseg is filled in now$/;"	d
setupseg	src/bootsect.S	/^setupseg	=	*-2$/;"	d
setupseg	src/bootsect.s	/^setupseg	=	*-2$/;"	d
setupseg	src/second.S	/^setupseg	=	*-2		;   setupseg is filled in now$/;"	d
setupseg	src/second.s	/^setupseg = *-2 ; setupseg is filled in now$/;"	d
setupseg	src/third.s	/^setupseg = *-2 ; setupseg is filled in now$/;"	d
setvga	src/bitmap.s	/^setvga: add si,#4 ; skip over "vga="$/;"	l
setvga	src/second.S	/^setvga:	add	si,#4		; skip over "vga="$/;"	l
setvga	src/second.s	/^setvga: add si,#4 ; skip over "vga="$/;"	l
setvga	src/third.s	/^setvga: add si,#4 ; skip over "vga="$/;"	l
sh	src/bitmap.h	/^   short int fg, bg, sh;$/;"	m	struct:Scheme
sh	src/bitmap.h	/^;*\/	short fg, bg, sh;		\/* BMP normal text fore, backgr, shadow$/;"	m	struct:BitmapLiloHeader
sh	src/common.h	/^;*\/	short fg, bg, sh;		\/* BMP normal text fore, backgr, shadow$/;"	m	struct:__anon15
shiftIt	diagnose/sector.S	/^shiftIt:$/;"	l
short_wait	src/second.S	/^short_wait:$/;"	l
show_colors	src/edit.c	/^static void show_colors(int timopt)$/;"	f	file:
show_geom	src/probe.c	/^static void show_geom(char *who, int cyl, int head, int sect)$/;"	f	file:
show_images	src/lilo.c	/^static void show_images(char *map_file)$/;"	f	file:
show_layout	src/edit.c	/^static void show_layout(void)$/;"	f	file:
show_link	src/common.c	/^void show_link(char *name)$/;"	f
show_other	src/lilo.c	/^static void show_other(int fd)$/;"	f	file:
show_timer	src/edit.c	/^static void show_timer(void)$/;"	f	file:
shsFinal	src/shs2.c	/^void shsFinal(void)$/;"	f
shsInfo	src/shs2.c	/^SHS_INFO shsInfo;    \/* global *\/$/;"	v
shsInit	src/shs2.c	/^void shsInit(void)$/;"	f
shsJ1	src/bitmap.s	/^shsJ1:$/;"	l
shsJ1	src/second.s	/^shsJ1:$/;"	l
shsJ1	src/shs3.S	/^shsJ1:$/;"	l
shsJ1	src/third.s	/^shsJ1:$/;"	l
shsJ2	src/bitmap.s	/^shsJ2:$/;"	l
shsJ2	src/second.s	/^shsJ2:$/;"	l
shsJ2	src/shs3.S	/^shsJ2:$/;"	l
shsJ2	src/third.s	/^shsJ2:$/;"	l
shsTransCommon	src/bitmap.s	/^shsTransCommon:$/;"	l
shsTransCommon	src/second.s	/^shsTransCommon:$/;"	l
shsTransCommon	src/shs3.S	/^shsTransCommon:$/;"	l
shsTransCommon	src/third.s	/^shsTransCommon:$/;"	l
shsTransform	src/bitmap.s	/^shsTransform:$/;"	l
shsTransform	src/second.s	/^shsTransform:$/;"	l
shsTransform	src/shs2.c	/^static void shsTransform(void)$/;"	f	file:
shsTransform	src/shs3.S	/^shsTransform:$/;"	l
shsTransform	src/third.s	/^shsTransform:$/;"	l
shsUpdate	src/shs2.c	/^void shsUpdate(BYTE *buffer, int count)$/;"	f
shs_F356	src/bitmap.s	/^shs_F356:$/;"	l
shs_F356	src/second.s	/^shs_F356:$/;"	l
shs_F356	src/shs3.S	/^shs_F356:$/;"	l
shs_F356	src/third.s	/^shs_F356:$/;"	l
shs_F359	src/bitmap.s	/^shs_F359:$/;"	l
shs_F359	src/second.s	/^shs_F359:$/;"	l
shs_F359	src/shs3.S	/^shs_F359:$/;"	l
shs_F359	src/third.s	/^shs_F359:$/;"	l
shs_F362	src/bitmap.s	/^shs_F362:$/;"	l
shs_F362	src/second.s	/^shs_F362:$/;"	l
shs_F362	src/shs3.S	/^shs_F362:$/;"	l
shs_F362	src/third.s	/^shs_F362:$/;"	l
shs_F365	src/bitmap.s	/^shs_F365:$/;"	l
shs_F365	src/second.s	/^shs_F365:$/;"	l
shs_F365	src/shs3.S	/^shs_F365:$/;"	l
shs_F365	src/third.s	/^shs_F365:$/;"	l
shs_F376	src/bitmap.s	/^shs_F376:$/;"	l
shs_F376	src/second.s	/^shs_F376:$/;"	l
shs_F376	src/shs3.S	/^shs_F376:$/;"	l
shs_F376	src/third.s	/^shs_F376:$/;"	l
shs_J10	src/bitmap.s	/^shs_J10:$/;"	l
shs_J10	src/second.s	/^shs_J10:$/;"	l
shs_J10	src/shs3.S	/^shs_J10:$/;"	l
shs_J10	src/third.s	/^shs_J10:$/;"	l
shs_J11	src/bitmap.s	/^shs_J11:$/;"	l
shs_J11	src/second.s	/^shs_J11:$/;"	l
shs_J11	src/shs3.S	/^shs_J11:$/;"	l
shs_J11	src/third.s	/^shs_J11:$/;"	l
shs_J4	src/bitmap.s	/^shs_J4:$/;"	l
shs_J4	src/second.s	/^shs_J4:$/;"	l
shs_J4	src/shs3.S	/^shs_J4:$/;"	l
shs_J4	src/third.s	/^shs_J4:$/;"	l
shs_J6	src/bitmap.s	/^shs_J6:$/;"	l
shs_J6	src/second.s	/^shs_J6:$/;"	l
shs_J6	src/shs3.S	/^shs_J6:$/;"	l
shs_J6	src/third.s	/^shs_J6:$/;"	l
shs_count	src/bitmap.s	/^shs_count = *$/;"	d
shs_count	src/second.s	/^shs_count = *$/;"	d
shs_count	src/shs3.S	/^shs_count	=	*$/;"	d
shs_count	src/shs3.S	/^shs_count:	.blkb	2*4$/;"	l
shs_count	src/third.s	/^shs_count = *$/;"	d
shs_digest	src/bitmap.s	/^shs_digest = *$/;"	d
shs_digest	src/second.s	/^shs_digest = *$/;"	d
shs_digest	src/shs3.S	/^shs_digest	=	*$/;"	d
shs_digest	src/shs3.S	/^shs_digest:	.blkb	5*4$/;"	l
shs_digest	src/third.s	/^shs_digest = *$/;"	d
sig	src/bitmap.s	/^sig: .ascii "LILO"$/;"	l
sig	src/first.S	/^sig:	.ascii	"LILO"$/;"	l
sig	src/first.s	/^sig: .ascii "LILO"$/;"	l
sig	src/mbr.S	/^sig:	.ascii	"LILO"		! signature$/;"	l
sig	src/mbr.s	/^sig:	.ascii	"LILO"		! signature$/;"	l
sig	src/mbr2.s	/^sig:	.ascii	"LILO"		! signature$/;"	l
sig	src/probe.h	/^               char  sig[4];$/;"	m	struct:Video3::__anon38
sig	src/probe.h	/^      unsigned char  sig[4];$/;"	m	struct:Video::__anon44
sig	src/second.S	/^sig:		.ascii	"LILO"$/;"	l
sig	src/second.s	/^sig: .ascii "LILO"$/;"	l
sig	src/third.s	/^sig: .ascii "LILO"$/;"	l
signature	src/common.h	/^    char signature[4];		\/*  2: "HdrS" *\/$/;"	m	struct:__anon23
signature	src/common.h	/^;*\/    char signature[4]; \/* "LILO" $/;"	m	struct:__anon14
signature	src/common.h	/^;*\/    char signature[4]; \/* "LILO"$/;"	m	struct:__anon12
signature	src/common.h	/^;*\/    char signature[4]; \/* "LILO"$/;"	m	struct:__anon13
signature	src/probe.c	/^      char signature[4];$/;"	m	struct:Buf::__anon53	file:
signature	src/probe.c	/^      char signature[4];$/;"	m	struct:Buf::__anon54	file:
size	src/bitmap.h	/^   bm_uint16   size[2];				\/* actually bm_uint32 *\/$/;"	m	struct:BitMapFileHeader
size	src/bitmap.h	/^   bm_uint16   size[2];$/;"	m	struct:BitmapLiloHeader
size	src/bitmap.h	/^   bm_uint32   size;$/;"	m	struct:BitMapHeader
size	src/bitmap.h	/^   bm_uint32   size;$/;"	m	struct:BitMapHeader2
size	src/common.h	/^    int size;$/;"	m	struct:__anon21
size	src/geometry.h	/^	unsigned int	size,		\/* nr of sectors total *\/$/;"	m	struct:floppy_struct
size	src/md-int.h	/^	md_u32 size;		\/*  8 Apparent size of each individual disk   *\/$/;"	m	struct:md_superblock_s
size	src/md-int.h	/^	md_u32 size;$/;"	m	struct:md_array_info_s
size	src/probe.h	/^   unsigned short size;			\/* 26 or 30 *\/$/;"	m	struct:Edd
sizeImageData	src/bitmap.h	/^   bm_uint32   sizeImageData;$/;"	m	struct:BitMapHeader
sizeit	diagnose/test4.c	/^void sizeit(unsigned long sectors)$/;"	f	file:
sizeit	diagnose/test5.c	/^void sizeit(unsigned long sectors)$/;"	f	file:
sizeit	src/disk.S	/^sizeit:$/;"	l
sizeit	src/disk.s	/^sizeit:$/;"	l
skip_prompt	src/bitmap.s	/^skip_prompt:$/;"	l
skip_prompt	src/second.S	/^skip_prompt:$/;"	l
skip_prompt	src/second.s	/^skip_prompt:$/;"	l
skip_prompt	src/third.s	/^skip_prompt:$/;"	l
sklp	src/bitmap.s	/^sklp: test word ptr (di+id_flags),#4096 ; single-key entry ?$/;"	l
sklp	src/second.S	/^sklp:	test	word ptr (di+id_flags),#FLAG_SINGLE ; single-key entry ?$/;"	l
sklp	src/second.s	/^sklp: test word ptr (di+id_flags),#4096 ; single-key entry ?$/;"	l
sklp	src/third.s	/^sklp: test word ptr (di+id_flags),#4096 ; single-key entry ?$/;"	l
sknext	src/bitmap.s	/^sknext: add di,#id_size ; test next entry$/;"	l
sknext	src/second.S	/^sknext:	add	di,#id_size	; test next entry$/;"	l
sknext	src/second.s	/^sknext: add di,#id_size ; test next entry$/;"	l
sknext	src/third.s	/^sknext: add di,#id_size ; test next entry$/;"	l
slashes	src/device.c	/^static int slashes(char *cp)$/;"	f	file:
slbase	src/bitmap.s	/^slbase: .word 0 ; serial port base (or 0 if unused)$/;"	l
slbase	src/second.S	/^slbase:	.word	0		; serial port base (or 0 if unused)$/;"	l
slbase	src/second.s	/^slbase: .word 0 ; serial port base (or 0 if unused)$/;"	l
slbase	src/third.s	/^slbase: .word 0 ; serial port base (or 0 if unused)$/;"	l
sload	src/first.S	/^sload:$/;"	l
sload	src/first.s	/^sload:$/;"	l
smsw	diagnose/test4.c	/^int smsw(void)$/;"	f	file:
sn11	src/chain.S	/^sn11:	pop	si$/;"	l
snext	src/bitmap.s	/^snext:$/;"	l
snext	src/second.S	/^snext:$/;"	l
snext	src/second.s	/^snext:$/;"	l
snext	src/third.s	/^snext:$/;"	l
sort	src/device.c	/^    int sort;		\/* the device number used for sorting *\/$/;"	m	struct:VolumeMgmt	file:
source	src/crt.S	/^source directory.$/;"	l
source	src/dparam.S	/^source directory.$/;"	l
source	src/first.S	/^source directory.$/;"	l
source	src/graph.S	/^source directory.$/;"	l
source	src/menu.S	/^source directory.$/;"	l
source	src/second.S	/^source directory.$/;"	l
source	src/volume.S	/^source directory.$/;"	l
sp	diagnose/cprintf.c	/^add	sp,*-4$/;"	v
sp	diagnose/cprintf.c	/^add	sp,*4$/;"	v
space	src/dparam.S	/^space:	mov	dx,#spc			! display two blanks$/;"	l
space	src/vesainfo.h	/^      char  space[512];$/;"	m	union:__anon1
sparam	src/bitmap.s	/^sparam: .byte 0 ; serial port parameters (0 = unused)$/;"	l
sparam	src/second.S	/^sparam:	.byte	0		; serial port parameters (0 = unused)$/;"	l
sparam	src/second.s	/^sparam: .byte 0 ; serial port parameters (0 = unused)$/;"	l
sparam	src/third.s	/^sparam: .byte 0 ; serial port parameters (0 = unused)$/;"	l
spare_disks	src/md-int.h	/^	md_u32 spare_disks;	\/*  5 Number of spare disks		      *\/$/;"	m	struct:md_array_info_s
spare_disks	src/md-int.h	/^	md_u32 spare_disks;	\/*  5 Number of spare disks		      *\/$/;"	m	struct:md_superblock_s
spb	src/geometry.h	/^    int spb; \/* sectors per block *\/$/;"	m	struct:__anon6
spc	src/dparam.S	/^spc:	.ascii	"  $"$/;"	l
spcbps	src/bitmap.s	/^spcbps: ; CLI: do not disturb ...$/;"	l
spcbps	src/second.S	/^spcbps:				; CLI: do not disturb ...$/;"	l
spcbps	src/second.s	/^spcbps: ; CLI: do not disturb ...$/;"	l
spcbps	src/third.s	/^spcbps: ; CLI: do not disturb ...$/;"	l
spec1	src/geometry.h	/^			spec1,		\/* stepping rate, head unload time *\/$/;"	m	struct:floppy_struct
srch	src/chain.S	/^srch:	seg es$/;"	l
srch	src/chain.s	/^srch: seg es$/;"	l
sread	src/bitmap.s	/^sread: push bx ; save registers$/;"	l
sread	src/bootsect.S	/^sread:	.word 0			! sectors read of current track$/;"	l
sread	src/bootsect.s	/^sread:	.word 0			! sectors read of current track$/;"	l
sread	src/second.S	/^sread:	push	bx		; save registers$/;"	l
sread	src/second.s	/^sread: push bx ; save registers$/;"	l
sread	src/third.s	/^sread: push bx ; save registers$/;"	l
sreg	diagnose/test4.c	/^struct SREGS sreg;$/;"	v	typeref:struct:SREGS
sreg	diagnose/test5.c	/^struct SREGS sreg;$/;"	v	typeref:struct:SREGS
ss1	src/display4.S	/^ss1:	pop	bx$/;"	l
ss2	src/display4.S	/^ss2:	pop	bx$/;"	l
ssize	src/disk.S	/^ssize:          .word   0$/;"	l
ssize	src/disk.s	/^ssize:          .word   0$/;"	l
st	src/boot.c	/^static struct stat st;$/;"	v	typeref:struct:stat	file:
st	src/device.c	/^    struct stat st;$/;"	m	struct:_st_buf	typeref:struct:_st_buf::stat	file:
st	src/device.h	/^    struct stat st;$/;"	m	struct:__anon5	typeref:struct:__anon5::stat
st	src/geometry.c	/^    struct stat st;$/;"	m	struct:_st_buf	typeref:struct:_st_buf::stat	file:
stack	diagnose/sector.S	/^stack:	\/* this had better be zero *\/$/;"	l
stacksize	diagnose/sector.S	/^stacksize	equ	20$/;"	d
stage	src/bitmap.s	/^stage: .word 2|STAGE_SERIAL|STAGE_MENU|STAGE_BITMAP$/;"	l
stage	src/common.h	/^;*\/    unsigned char stage;  \/*$/;"	m	struct:__anon12
stage	src/common.h	/^;*\/    unsigned short stage,version; \/* stage is 0x10$/;"	m	struct:__anon14
stage	src/common.h	/^;*\/    unsigned short stage;	\/*$/;"	m	struct:__anon13
stage	src/first.S	/^stage:	.byte	STAGE_FIRST$/;"	l
stage	src/first.s	/^stage: .byte 1$/;"	l
stage	src/mbr.S	/^stage:	.byte	STAGE_MBR	! search primary parition only$/;"	l
stage	src/mbr.S	/^stage:	.byte	STAGE_MBR2	! search extended partitions, too$/;"	l
stage	src/mbr.s	/^stage:	.byte	0x12	! search primary parition only$/;"	l
stage	src/mbr2.s	/^stage:	.byte	0x13	! search extended partitions, too$/;"	l
stage	src/second.S	/^stage:		.word	STAGE_SECOND|STAGE_SERIAL|STAGE_MENU|STAGE_BITMAP$/;"	l
stage	src/second.s	/^stage: .word 2|STAGE_SERIAL|STAGE_MENU|STAGE_BITMAP$/;"	l
stage	src/third.s	/^stage: .word 2|STAGE_SERIAL|STAGE_MENU|STAGE_BITMAP$/;"	l
stage_flags	src/bsect.c	/^static unsigned short stage_flags;$/;"	v	file:
start	diagnose/test4.c	/^  long	start, start_hi,$/;"	m	struct:__anon58	file:
start	src/bitmap.s	/^start: cld ; only CLD in the code; there is no STD$/;"	l
start	src/chain.S	/^start:$/;"	l
start	src/chain.s	/^start:$/;"	l
start	src/common.h	/^    unsigned int start;	\/* 20: kernel start, filled in by loader *\/$/;"	m	struct:__anon23
start	src/common.h	/^;*\/    SECTOR_ADDR initrd,start;  \/* start of initrd & kernel$/;"	m	struct:__anon9
start	src/disk.S	/^start:          pop     bx              ;this MUST immediately follow the 'call'$/;"	l
start	src/disk.s	/^start:          pop     bx              ;this MUST immediately follow the 'call'$/;"	l
start	src/first.S	/^start:$/;"	l
start	src/first.s	/^start:$/;"	l
start	src/geometry.c	/^    uint64_t start,length,offset;$/;"	m	struct:_dm_target	file:
start	src/geometry.h	/^      unsigned long start;$/;"	m	struct:hd_geometry
start	src/geometry.h	/^    int start; \/* partition offset *\/$/;"	m	struct:__anon6
start	src/geometry.h	/^    int start;$/;"	m	struct:_dt_entry
start	src/mbr.S	/^start:$/;"	l
start	src/mbr.s	/^start:$/;"	l
start	src/mbr2.s	/^start:$/;"	l
start	src/second.S	/^start:	cld			; only CLD in the code; there is no STD$/;"	l
start	src/second.s	/^start: cld ; only CLD in the code; there is no STD$/;"	l
start	src/third.s	/^start: cld ; only CLD in the code; there is no STD$/;"	l
start_hi	diagnose/test4.c	/^  long	start, start_hi,$/;"	m	struct:__anon58	file:
start_sect	src/partition.h	/^	unsigned int start_sect;	\/* starting sector counting from 0 *\/$/;"	m	struct:partition
start_setup	src/bitmap.s	/^start_setup: ; kernel boot comes here$/;"	l
start_setup	src/second.S	/^start_setup:			; kernel boot comes here$/;"	l
start_setup	src/second.s	/^start_setup: ; kernel boot comes here$/;"	l
start_setup	src/third.s	/^start_setup: ; kernel boot comes here$/;"	l
start_setup2	src/bitmap.s	/^start_setup2: ; chain loader boot comes here$/;"	l
start_setup2	src/second.S	/^start_setup2:			; chain loader boot comes here$/;"	l
start_setup2	src/second.s	/^start_setup2: ; chain loader boot comes here$/;"	l
start_setup2	src/third.s	/^start_setup2: ; chain loader boot comes here$/;"	l
start_setup3	src/bitmap.s	/^start_setup3:$/;"	l
start_setup3	src/second.S	/^start_setup3:$/;"	l
start_setup3	src/second.s	/^start_setup3:$/;"	l
start_setup3	src/third.s	/^start_setup3:$/;"	l
stat_equal	src/common.c	/^int stat_equal(struct stat *a,struct stat *b)$/;"	f
state	src/md-int.h	/^	md_u32 state;		\/*  1 State bits (clean, ...)		      *\/$/;"	m	struct:md_array_info_s
state	src/md-int.h	/^	md_u32 state;		\/*  1 State bits (clean, ...)		      *\/$/;"	m	struct:md_superblock_s
state	src/md-int.h	/^	md_u32 state;		\/* 4 Operational state			      *\/$/;"	m	struct:md_device_descriptor_s
state	src/md-int.h	/^	md_u32 state;$/;"	m	struct:md_disk_info_s
status	src/geometry.c	/^    int status;$/;"	m	struct:evms_get_bmap_t	file:
stdbps	src/bitmap.s	/^stdbps: ; CLI: redundant if fell in from above$/;"	l
stdbps	src/second.S	/^stdbps: 			; CLI: redundant if fell in from above$/;"	l
stdbps	src/second.s	/^stdbps: ; CLI: redundant if fell in from above$/;"	l
stdbps	src/third.s	/^stdbps: ; CLI: redundant if fell in from above$/;"	l
step0	src/second.S	/^step0:	.ascii	" map page,"$/;"	l
step0b	src/second.S	/^step0b:	.ascii	" fallback,"$/;"	l
step1	src/second.S	/^step1:	.ascii	" options,"$/;"	l
step1b	src/second.S	/^step1b:	.ascii	" fallback,"$/;"	l
step2	src/second.S	/^step2:	.ascii	" boot,"$/;"	l
step3	src/second.S	/^step3:	.ascii	" setup,"$/;"	l
step4	src/second.S	/^step4:	.ascii	" system "$/;"	l
stepa	src/second.S	/^stepa:	.ascii	" RAM disk,"$/;"	l
stop	src/mbr.S	/^stop:$/;"	l
stop	src/mbr.s	/^stop:$/;"	l
stop	src/mbr2.s	/^stop:$/;"	l
stop1	src/mbr.S	/^stop1:	br	stop$/;"	l
str	src/probe.c	/^	char *str;$/;"	m	struct:Probes	file:
str_com1	src/crt.S	/^str_com1:$/;"	l
str_com1	src/third.s	/^str_com1:$/;"	l
str_com1u	src/crt.S	/^str_com1u:$/;"	l
str_com1u	src/third.s	/^str_com1u:$/;"	l
str_com2	src/crt.S	/^str_com2:$/;"	l
str_com2	src/third.s	/^str_com2:$/;"	l
str_com3	src/crt.S	/^str_com3:$/;"	l
str_com3	src/third.s	/^str_com3:$/;"	l
str_timer	src/crt.S	/^str_timer:$/;"	l
str_timer	src/third.s	/^str_timer:$/;"	l
str_title	src/crt.S	/^str_title:$/;"	l
str_title	src/third.s	/^str_title:$/;"	l
str_title_len	src/crt.S	/^str_title_len	= str_timer-str_title-1$/;"	d
str_title_len	src/third.s	/^str_title_len = str_timer-str_title-1$/;"	d
stralloc	src/common.c	/^char *stralloc(const char *str)$/;"	f
strerror	src/common.c	/^char * strerror(int err)$/;"	f
stretch	src/geometry.h	/^			stretch;	\/* !=0 means double track steps *\/$/;"	m	struct:floppy_struct
strlen	src/bitmap.s	/^strlen:$/;"	l
strlen	src/strlen.S	/^strlen:$/;"	l
strlen	src/third.s	/^strlen:$/;"	l
strlen1	src/bitmap.s	/^strlen1:$/;"	l
strlen1	src/strlen.S	/^strlen1:$/;"	l
strlen1	src/third.s	/^strlen1:$/;"	l
strlen2	src/bitmap.s	/^strlen2:$/;"	l
strlen2	src/strlen.S	/^strlen2:$/;"	l
strlen2	src/third.s	/^strlen2:$/;"	l
strtoul	src/bitmap.s	/^strtoul:$/;"	l
strtoul	src/second.S	/^strtoul:          \/* string to unsigned long in DX:AX *\/$/;"	l
strtoul	src/second.s	/^strtoul:$/;"	l
strtoul	src/third.s	/^strtoul:$/;"	l
strtoull	src/bitmap.s	/^strtoull: ; numeric conversion to EAX$/;"	l
strtoull	src/second.S	/^strtoull:			; numeric conversion to EAX$/;"	l
strtoull	src/second.s	/^strtoull: ; numeric conversion to EAX$/;"	l
strtoull	src/third.s	/^strtoull: ; numeric conversion to EAX$/;"	l
subRound1	src/shs2.c	64;"	d	file:
subRound2	src/shs2.c	72;"	d	file:
subRound3	src/shs2.c	80;"	d	file:
subRound4	src/shs2.c	88;"	d	file:
svgatb	src/bitmap.s	/^svgatb: pop si ; get pointer to option value$/;"	l
svgatb	src/second.S	/^svgatb:	pop	si		; get pointer to option value$/;"	l
svgatb	src/second.s	/^svgatb: pop si ; get pointer to option value$/;"	l
svgatb	src/third.s	/^svgatb: pop si ; get pointer to option value$/;"	l
sw13b	src/chain.S	/^sw13b:	seg es$/;"	l
sw13p	src/chain.S	/^sw13p:	.asciz	" -> "$/;"	l
sw13z	src/chain.S	/^sw13z:$/;"	l
swap13_null	src/chain.S	/^swap13_null:$/;"	l
swap13_null	src/chain.s	/^swap13_null:$/;"	l
swap_dev	src/bootsect.S	/^swap_dev:$/;"	l
swap_dev	src/bootsect.s	/^swap_dev:$/;"	l
swout	src/second.S	/^swout:	push	ax$/;"	l
sys_ind	src/partition.h	/^	unsigned char sys_ind;		\/* What partition type *\/$/;"	m	struct:partition
syssize	src/bootsect.S	/^syssize:$/;"	l
syssize	src/bootsect.s	/^syssize:$/;"	l
system	src/common.h	/^;*\/    char system[8];		\/* system ID$/;"	m	struct:__anon11
system_id_string	diagnose/sector.S	/^system_id_string:	.ascii	"DISKBOOT"	; 8 chars$/;"	l
t_bg	src/bitmap.h	/^;*\/	short t_fg, t_bg, t_sh;		\/* timer fg, bg, & shadow colors$/;"	m	struct:BitmapLiloHeader
t_bg	src/common.h	/^;*\/	short t_fg, t_bg, t_sh;		\/* timer fg, bg, & shadow colors$/;"	m	struct:__anon15
t_col	src/bitmap.h	/^;*\/	short t_row, t_col;		\/* timer position$/;"	m	struct:BitmapLiloHeader
t_col	src/common.h	/^;*\/	short t_row, t_col;		\/* timer position$/;"	m	struct:__anon15
t_fg	src/bitmap.h	/^;*\/	short t_fg, t_bg, t_sh;		\/* timer fg, bg, & shadow colors$/;"	m	struct:BitmapLiloHeader
t_fg	src/common.h	/^;*\/	short t_fg, t_bg, t_sh;		\/* timer fg, bg, & shadow colors$/;"	m	struct:__anon15
t_row	src/bitmap.h	/^;*\/	short t_row, t_col;		\/* timer position$/;"	m	struct:BitmapLiloHeader
t_row	src/common.h	/^;*\/	short t_row, t_col;		\/* timer position$/;"	m	struct:__anon15
t_sh	src/bitmap.h	/^;*\/	short t_fg, t_bg, t_sh;		\/* timer fg, bg, & shadow colors$/;"	m	struct:BitmapLiloHeader
t_sh	src/common.h	/^;*\/	short t_fg, t_bg, t_sh;		\/* timer fg, bg, & shadow colors$/;"	m	struct:__anon15
table	src/bsect.c	/^static unsigned char table[SECTOR_SIZE];	\/* keytable & params *\/$/;"	v	file:
target	src/geometry.c	/^    struct _dm_target *target;$/;"	m	struct:_dm_table	typeref:struct:_dm_table::_dm_target	file:
temp_check	src/temp.h	16;"	d
temp_file	src/edit.c	/^static	char *temp_file, *bitmap_file;$/;"	v	file:
temp_map	src/bsect.c	/^static char temp_map[PATH_MAX+1];$/;"	v	file:
temp_register	src/temp.c	/^void temp_register(char *name)$/;"	f
temp_remove	src/temp.c	/^void temp_remove(void)$/;"	f
temp_shs	src/shs3.S	/^#define temp_shs ebp$/;"	d
temp_unregister	src/temp.c	/^void temp_unregister(char *name)$/;"	f
tempal	src/bitmap.s	/^tempal: .byte 0$/;"	l
tempal	src/second.S	/^tempal:	.byte	0$/;"	l
tempal	src/second.s	/^tempal: .byte 0$/;"	l
tempal	src/third.s	/^tempal: .byte 0$/;"	l
test	src/common.c	/^int verbose = 0, test = 0, compact = 0, linear = 0, raid_flags = 0, zflag = 0,$/;"	v
testDX	diagnose/test4.c	/^void testDX(void)$/;"	f	file:
the_end1	src/bitmap.s	/^the_end1 = theend+511$/;"	d
the_end1	src/chain.S	/^the_end1	= theend+511$/;"	d
the_end1	src/chain.s	/^the_end1 = theend+511$/;"	d
the_end1	src/second.S	/^the_end1	= theend+511$/;"	d
the_end1	src/second.s	/^the_end1 = theend+511$/;"	d
the_end1	src/third.s	/^the_end1 = theend+511$/;"	d
theend	diagnose/sector.S	/^theend:$/;"	l
theend	src/bitmap.s	/^theend:$/;"	l
theend	src/chain.S	/^theend:$/;"	l
theend	src/chain.s	/^theend:$/;"	l
theend	src/disk.S	/^theend:$/;"	l
theend	src/disk.s	/^theend:$/;"	l
theend	src/first.S	/^theend:$/;"	l
theend	src/first.s	/^theend:$/;"	l
theend	src/mbr.S	/^theend:	! must be 0000:0800$/;"	l
theend	src/mbr.s	/^theend:	! must be 0000:0800$/;"	l
theend	src/mbr2.s	/^theend:	! must be 0000:0800$/;"	l
theend	src/pseudo.S	/^theend:$/;"	l
theend	src/second.S	/^theend:$/;"	l
theend	src/second.s	/^theend:$/;"	l
theend	src/third.s	/^theend:$/;"	l
theend1	src/mbr.S	/^theend1:	\/* better be at or below 07B6 *\/$/;"	l
theend1	src/mbr.s	/^theend1:	$/;"	l
theend1	src/mbr2.s	/^theend1:	$/;"	l
theend2	src/bitmap.s	/^theend2 = lkcbuf+CL_LENGTH ; lkcbuf is 256$/;"	d
theend2	src/second.S	/^theend2 =	lkcbuf+CL_LENGTH	; lkcbuf is 256$/;"	d
theend2	src/second.s	/^theend2 = lkcbuf+CL_LENGTH ; lkcbuf is 256$/;"	d
theend2	src/third.s	/^theend2 = lkcbuf+CL_LENGTH ; lkcbuf is 256$/;"	d
theends	src/bitmap.s	/^theends = the_end1\/512$/;"	d
theends	src/chain.S	/^theends	=	the_end1\/512$/;"	d
theends	src/chain.s	/^theends = the_end1\/512$/;"	d
theends	src/second.S	/^theends	=	the_end1\/512$/;"	d
theends	src/second.s	/^theends = the_end1\/512$/;"	d
theends	src/third.s	/^theends = the_end1\/512$/;"	d
tick	src/bitmap.s	/^tick: pushf ; save flags$/;"	l
tick	src/bsect.c	876;"	d	file:
tick	src/second.S	/^tick:	pushf			; save flags$/;"	l
tick	src/second.s	/^tick: pushf ; save flags$/;"	l
tick	src/third.s	/^tick: pushf ; save flags$/;"	l
tim_min	src/bitmap.S	/^tim_min: db	0,0$/;"	d
tim_min	src/bitmap.s	/^tim_min: db 0,0$/;"	d
tim_min	src/crt.S	/^tim_min: db	0,0$/;"	d
tim_min	src/third.s	/^tim_min: db 0,0$/;"	d
tim_old	src/bitmap.S	/^tim_old:  dw	0		; last # seconds$/;"	d
tim_old	src/bitmap.s	/^tim_old: dw 0 ; last # seconds$/;"	d
tim_old	src/crt.S	/^tim_old: .ascii	"*****"$/;"	l
tim_old	src/third.s	/^tim_old: .ascii "*****"$/;"	l
tim_sec	src/bitmap.S	/^tim_sec: db	0,0$/;"	d
tim_sec	src/bitmap.s	/^tim_sec: db 0,0$/;"	d
tim_sec	src/crt.S	/^tim_sec: db	0,0$/;"	d
tim_sec	src/third.s	/^tim_sec: db 0,0$/;"	d
tim_tick	src/bitmap.S	/^tim_tick: dw	0		; last timer tick value examined$/;"	d
tim_tick	src/bitmap.s	/^tim_tick: dw 0 ; last timer tick value examined$/;"	d
tim_tick	src/crt.S	/^tim_tick: dw	0		; last timer tick value examined$/;"	d
tim_tick	src/third.s	/^tim_tick: dw 0 ; last timer tick value examined$/;"	d
timeerr	src/bitmap.s	/^timeerr:$/;"	l
timeerr	src/second.S	/^timeerr:$/;"	l
timeerr	src/second.s	/^timeerr:$/;"	l
timeerr	src/third.s	/^timeerr:$/;"	l
timeout	src/common.h	/^;*\/    unsigned short timeout; \/* 54 msec delay until input time-out, 0xffff: never $/;"	m	struct:__anon13
timer	src/edit.c	202;"	d	file:
timer8	src/bitmap.S	/^timer8:$/;"	l
timer8	src/bitmap.s	/^timer8:$/;"	l
timer8	src/crt.S	/^timer8:$/;"	l
timer8	src/third.s	/^timer8:$/;"	l
timer91	src/crt.S	/^timer91:$/;"	l
timer91	src/third.s	/^timer91:$/;"	l
timer92	src/crt.S	/^timer92:$/;"	l
timer92	src/third.s	/^timer92:$/;"	l
timer99	src/bitmap.S	/^timer99:$/;"	l
timer99	src/bitmap.s	/^timer99:$/;"	l
timer99	src/crt.S	/^timer99:$/;"	l
timer99	src/third.s	/^timer99:$/;"	l
timer_display	src/bitmap.S	/^timer_display:$/;"	l
timer_display	src/bitmap.s	/^timer_display:$/;"	l
timer_display	src/crt.S	/^timer_display:$/;"	l
timer_display	src/third.s	/^timer_display:$/;"	l
timer_dx	src/crt.S	/^timer_dx: dw	0	; timer location$/;"	d
timer_dx	src/third.s	/^timer_dx: dw 0 ; timer location$/;"	d
timer_number	src/common.c	/^int timer_number(char *num)$/;"	f
timestamp	src/common.h	/^;*\/    unsigned int timestamp; \/* timestamp for restoration$/;"	m	struct:__anon12
timout	src/bitmap.s	/^timout: .word 0 ; input timeout$/;"	l
timout	src/second.S	/^timout: .word	0		; input timeout$/;"	l
timout	src/second.s	/^timout: .word 0 ; input timeout$/;"	l
timout	src/third.s	/^timout: .word 0 ; input timeout$/;"	l
title	src/common.h	/^;*\/	char title[MAX_MENU_TITLE+2];	\/* MENU title to override default$/;"	m	struct:__anon15
title_stuff	src/crt.S	/^title_stuff:$/;"	l
title_stuff	src/third.s	/^title_stuff:$/;"	l
titlemov	src/crt.S	/^titlemov:$/;"	l
titlemov	src/third.s	/^titlemov:$/;"	l
tm	src/edit.c	/^	} tm;$/;"	v	typeref:union:__anon31	file:
toNull	src/bitmap.s	/^toNull: je near null ; cursor control$/;"	l
toNull	src/second.S	/^toNull:	je	near null	; cursor control$/;"	l
toNull	src/third.s	/^toNull: je near null ; cursor control$/;"	l
to_number	src/common.c	/^int to_number(char *num)$/;"	f
toboot	src/bitmap.s	/^toboot: br doboot ; ...$/;"	l
toboot	src/second.S	/^toboot:	br	doboot		; ...$/;"	l
toboot	src/second.s	/^toboot: br doboot ; ...$/;"	l
toboot	src/third.s	/^toboot: br doboot ; ...$/;"	l
todell	src/bitmap.s	/^todell: br delline ; ...$/;"	l
todell	src/second.S	/^todell:	br	delline		; ...$/;"	l
todell	src/second.s	/^todell: br delline ; ...$/;"	l
todell	src/third.s	/^todell: br delline ; ...$/;"	l
tofind	diagnose/sector.S	/^tofind: .ascii	"HIPBOOT SYS"$/;"	l
tolist	src/bitmap.s	/^tolist:$/;"	l
tolist	src/second.S	/^tolist:$/;"	l
tolist	src/second.s	/^tolist:$/;"	l
tolist	src/third.s	/^tolist:$/;"	l
tosnext	src/bitmap.s	/^tosnext: jmp snext ; next character$/;"	l
tosnext	src/second.S	/^tosnext: jmp	snext		; next character$/;"	l
tosnext	src/second.s	/^tosnext: jmp snext ; next character$/;"	l
tosnext	src/third.s	/^tosnext: jmp snext ; next character$/;"	l
totSec	diagnose/sector.S	/^totSec:		.blkw	1	; total_sectors$/;"	l
total_sectors	diagnose/sector.S	/^total_sectors:		dw	2880$/;"	d
total_sectors	src/common.h	/^;*\/    unsigned char  total_sectors[2];		\/*$/;"	m	struct:__anon10
total_sectors	src/probe.h	/^   long long      total_sectors;$/;"	m	struct:Edd
total_sectors_2	diagnose/sector.S	/^total_sectors_2:	dd      0       ; actual value if 'total_sectors' is zero$/;"	d
total_sectors_long	src/common.h	/^;*\/    unsigned char  total_sectors_long[4];	\/* if total_sectors==0$/;"	m	struct:__anon10
track	src/bootsect.S	/^track:	.word 0			! current track$/;"	l
track	src/bootsect.s	/^track:	.word 0			! current track$/;"	l
track	src/common.h	/^;*\/    unsigned char sector,track; \/* CX $/;"	m	struct:__anon8
track	src/geometry.h	/^			track,		\/* nr of tracks *\/$/;"	m	struct:floppy_struct
trans_01	src/volume.S	/^trans_01:$/;"	l
trans_02	src/volume.S	/^trans_02:$/;"	l
trans_03	src/volume.S	/^trans_03:$/;"	l
trans_1	src/bitmap.s	/^trans_1:$/;"	l
trans_1	src/second.s	/^trans_1:$/;"	l
trans_1	src/third.s	/^trans_1:$/;"	l
trans_1	src/volume.S	/^trans_1:$/;"	l
trans_ret	src/bitmap.s	/^trans_ret:$/;"	l
trans_ret	src/second.s	/^trans_ret:$/;"	l
trans_ret	src/third.s	/^trans_ret:$/;"	l
trans_ret	src/volume.S	/^trans_ret:$/;"	l
transfer_params	src/edit.c	/^static void transfer_params(char *config_file)$/;"	f	file:
translate	src/bitmap.s	/^translate:$/;"	l
translate	src/second.s	/^translate:$/;"	l
translate	src/third.s	/^translate:$/;"	l
translate	src/volume.S	/^translate:$/;"	l
try_sig	src/chain.S	/^try_sig:$/;"	l
try_sig	src/chain.s	/^try_sig:$/;"	l
tstamp	src/first.S	/^tstamp:	.long	0		! timestamp$/;"	l
tstamp	src/first.s	/^tstamp: .long 0 ! timestamp$/;"	l
type	src/cfg.h	/^    CONFIG_TYPE type;$/;"	m	struct:__anon33
type	src/partition.h	/^    const char *type;$/;"	m	struct:_change_rule
type	src/probe.c	/^	unsigned char type;$/;"	m	struct:partitions	file:
type	src/probe.h	/^   char type;$/;"	m	struct:disk_geom
unbootable	src/bsect.c	/^static void unbootable(void)$/;"	f	file:
unique	src/bsect.c	/^    char *unique;$/;"	m	struct:Pass	file:
unused	src/common.h	/^;*\/	char unused[150-MAX_BIOS_DEVICES*sizeof(int)-(MAX_RAID_DEVICES)*sizeof(int)-MAX_DESCR_SECS*sizeof(SECTOR_ADDR)];		\/* spacer$/;"	m	struct:__anon15
unused2	src/common.h	/^;*\/	char unused2;			\/* spacer beyond checksum$/;"	m	struct:__anon15
upcase	src/bitmap.s	/^upcase: cmp al,#0x61 ; lower case character ? ('a')$/;"	l
upcase	src/second.S	/^upcase:	cmp	al,#0x61	; lower case character ? ('a')$/;"	l
upcase	src/second.s	/^upcase: cmp al,#0x61 ; lower case character ? ('a')$/;"	l
upcase	src/third.s	/^upcase: cmp al,#0x61 ; lower case character ? ('a')$/;"	l
update	src/chain.S	/^update:$/;"	l
usage	keytab-lilo.pl	/^sub usage$/;"	s
usage	mkrescue	/^usage () {$/;"	f
usage	src/lilo.c	/^static void usage(char *name)$/;"	f	file:
use_boot	src/first.S	/^use_boot:$/;"	l
use_boot	src/first.s	/^use_boot:$/;"	l
use_boot	src/mbr.S	/^use_boot:$/;"	l
use_boot	src/mbr.s	/^use_boot:$/;"	l
use_boot	src/mbr2.s	/^use_boot:$/;"	l
use_dev_close	src/bsect.c	/^static int use_dev_close = 0;$/;"	v	file:
use_installed	src/first.S	/^use_installed:$/;"	l
use_installed	src/first.s	/^use_installed:$/;"	l
use_linear	src/bitmap.s	/^use_linear:$/;"	l
use_linear	src/second.S	/^use_linear:$/;"	l
use_linear	src/second.s	/^use_linear:$/;"	l
use_linear	src/third.s	/^use_linear:$/;"	l
use_setupsecs_m_1	src/chain.S	/^use_setupsecs_m_1:$/;"	l
user	src/device.c	/^    	int user;	\/* user used a disk= bios= section *\/$/;"	m	struct:VolumeMgmt::__anon30	file:
utime	src/md-int.h	/^	md_u32 utime;		\/*  0 Superblock update time		      *\/$/;"	m	struct:md_array_info_s
utime	src/md-int.h	/^	md_u32 utime;		\/*  0 Superblock update time		      *\/$/;"	m	struct:md_superblock_s
v	src/probe.c	/^      video_t v;$/;"	m	struct:Buf::__anon53	file:
v1	src/probe.c	/^static video_t1 *v1;$/;"	v	file:
v2	src/probe.c	/^static video_t2 *v2;$/;"	v	file:
v25	src/probe.c	/^static video_t25 *v25;	\/* extension for PROBE_VERSION 5 *\/$/;"	v	file:
v3	src/probe.c	/^static video_t3 *v3;$/;"	v	file:
v86mode	src/disk.S	/^v86mode:$/;"	l
v86mode	src/disk.s	/^v86mode:$/;"	l
v86test	diagnose/test4.c	/^void v86test(void)$/;"	f	file:
v_BytesPerScanLine	src/bitmap.s	/^v_BytesPerScanLine = 16 ; short$/;"	d
v_BytesPerScanLine	src/vesainfo.h	/^v_BytesPerScanLine = 16		; short$/;"	v
v_Capabilities	src/bitmap.s	/^v_Capabilities = 10 ; offset to Capabilities (int)$/;"	d
v_ModeAttributes	src/bitmap.s	/^v_ModeAttributes = 0 ; short$/;"	d
v_Signature	src/bitmap.s	/^v_Signature = 0 ; offset to Signature (int)$/;"	d
v_WinAAttributes	src/bitmap.s	/^v_WinAAttributes = 2 ; char$/;"	d
v_WinAAttributes	src/vesainfo.h	/^v_WinAAttributes = 2		; char$/;"	v
v_WinASegment	src/bitmap.s	/^v_WinASegment = 8 ; short$/;"	d
v_WinASegment	src/vesainfo.h	/^v_WinASegment	= 8		; short$/;"	v
v_WinBAttributes	src/bitmap.s	/^v_WinBAttributes = 3 ; char$/;"	d
v_WinBAttributes	src/vesainfo.h	/^v_WinBAttributes = 3		; char$/;"	v
v_WinBSegment	src/bitmap.s	/^v_WinBSegment = 10 ; short$/;"	d
v_WinBSegment	src/vesainfo.h	/^v_WinBSegment	= 10		; short$/;"	v
v_WinFuncPointer	src/bitmap.s	/^v_WinFuncPointer = 12 ; far pointer$/;"	d
v_WinFuncPointer	src/vesainfo.h	/^v_WinFuncPointer = 12		; far pointer$/;"	v
v_WinGranularity	src/bitmap.s	/^v_WinGranularity = 4 ; short$/;"	d
v_WinGranularity	src/vesainfo.h	/^v_WinGranularity = 4		; short$/;"	v
v_WinSize	src/bitmap.s	/^v_WinSize = 6 ; short$/;"	d
v_WinSize	src/vesainfo.h	/^v_WinSize	= 6		; short$/;"	v
v_hsv	src/edit.c	/^			s_hls[NPALETTE], v_hsv[NPALETTE], l_hls[NPALETTE];$/;"	v	file:
vagain	src/first.S	/^vagain:$/;"	l
vagain	src/first.s	/^vagain:$/;"	l
vagain	src/mbr.S	/^vagain:$/;"	l
vagain	src/mbr.s	/^vagain:$/;"	l
vagain	src/mbr2.s	/^vagain:$/;"	l
vdone	src/crt.S	/^vdone:$/;"	l
vdone	src/third.s	/^vdone:$/;"	l
vdone3	src/bitmap.S	/^vdone3:$/;"	l
vdone3	src/bitmap.s	/^vdone3:$/;"	l
vdone3	src/crt.S	/^vdone3:$/;"	l
vdone3	src/third.s	/^vdone3:$/;"	l
ver_offset	src/common.h	/^    unsigned short ver_offset;	\/* 14: kernel version string *\/$/;"	m	struct:__anon23
verbose	src/common.c	/^int verbose = 0, test = 0, compact = 0, linear = 0, raid_flags = 0, zflag = 0,$/;"	v
vers	src/first.S	/^vers:	.word	VERSION$/;"	l
vers	src/first.s	/^vers: .word 256*2 +23$/;"	l
vers	src/mbr.S	/^vers:	.word	VERSION$/;"	l
vers	src/mbr.s	/^vers:	.word	256*2+23$/;"	l
vers	src/mbr2.s	/^vers:	.word	256*2+23$/;"	l
vers_min	checkit	/^vers_min() {$/;"	f
version	src/bitmap.s	/^version: .word 256*2 +23$/;"	l
version	src/common.h	/^    unsigned short version;	\/*  6: header version *\/$/;"	m	struct:__anon23
version	src/common.h	/^;*\/    unsigned short stage,version; \/* stage is 0x10$/;"	m	struct:__anon14
version	src/common.h	/^;*\/    unsigned short version;	\/*$/;"	m	struct:__anon13
version	src/common.h	/^;*\/    unsigned short version;  \/*$/;"	m	struct:__anon12
version	src/probe.c	/^      short version;$/;"	m	struct:Buf::__anon53	file:
version	src/probe.c	/^      short version;$/;"	m	struct:Buf::__anon54	file:
version	src/second.S	/^version:	.word	VERSION$/;"	l
version	src/second.s	/^version: .word 256*2 +23$/;"	l
version	src/third.s	/^version: .word 256*2 +23$/;"	l
vga_mode	src/common.h	/^;*\/    unsigned short flags,vga_mode; \/* image flags & video mode$/;"	m	struct:__anon9
vga_palette	src/edit.c	/^static RGB vga_palette[16] = {$/;"	v	file:
vgacmp	src/bitmap.s	/^vgacmp: lodsb$/;"	l
vgacmp	src/second.S	/^vgacmp:	lodsb$/;"	l
vgacmp	src/second.s	/^vgacmp: lodsb$/;"	l
vgacmp	src/third.s	/^vgacmp: lodsb$/;"	l
vgadig	src/second.S	/^vgadig:	lodsb			; get the next character$/;"	l
vgaerr	src/bitmap.s	/^vgaerr: mov bx,#msg_v ; display an error message$/;"	l
vgaerr	src/second.S	/^vgaerr:	mov	bx,#msg_v	; display an error message$/;"	l
vgaerr	src/second.s	/^vgaerr: mov bx,#msg_v ; display an error message$/;"	l
vgaerr	src/third.s	/^vgaerr: mov bx,#msg_v ; display an error message$/;"	l
vgafnd	src/bitmap.s	/^vgafnd: pop ax ; drop SI$/;"	l
vgafnd	src/second.S	/^vgafnd:	pop	ax		; drop SI$/;"	l
vgafnd	src/second.s	/^vgafnd: pop ax ; drop SI$/;"	l
vgafnd	src/third.s	/^vgafnd: pop ax ; drop SI$/;"	l
vganum	src/bitmap.s	/^vganum: pop si ; get SI$/;"	l
vganum	src/second.S	/^vganum:	pop	si		; get SI$/;"	l
vganum	src/second.s	/^vganum: pop si ; get SI$/;"	l
vganum	src/third.s	/^vganum: pop si ; get SI$/;"	l
vgaovr	src/bitmap.s	/^vgaovr: .word 0 ; VGA mode overwrite$/;"	l
vgaovr	src/second.S	/^vgaovr:	.word	0		; VGA mode overwrite$/;"	l
vgaovr	src/second.s	/^vgaovr: .word 0 ; VGA mode overwrite$/;"	l
vgaovr	src/third.s	/^vgaovr: .word 0 ; VGA mode overwrite$/;"	l
vgaput	src/bitmap.s	/^vgaput: dec si ; read last character again$/;"	l
vgaput	src/second.S	/^vgaput:	dec	si		; read last character again$/;"	l
vgaput	src/second.s	/^vgaput: dec si ; read last character again$/;"	l
vgaput	src/third.s	/^vgaput: dec si ; read last character again$/;"	l
vgaput1	src/bitmap.s	/^vgaput1: mov vgaovr,cx ; set VGA mode$/;"	l
vgaput1	src/second.S	/^vgaput1: mov	vgaovr,cx	; set VGA mode$/;"	l
vgaput1	src/second.s	/^vgaput1: mov vgaovr,cx ; set VGA mode$/;"	l
vgaput1	src/third.s	/^vgaput1: mov vgaovr,cx ; set VGA mode$/;"	l
vgaset	src/bitmap.s	/^vgaset: seg es$/;"	l
vgaset	src/second.S	/^vgaset:	seg	es$/;"	l
vgaset	src/second.s	/^vgaset: seg es$/;"	l
vgaset	src/third.s	/^vgaset: seg es$/;"	l
vgaskp	src/bitmap.s	/^vgaskp: mov al,(bx) ; skip to end of reference string$/;"	l
vgaskp	src/second.S	/^vgaskp:	mov	al,(bx)		; skip to end of reference string$/;"	l
vgaskp	src/second.s	/^vgaskp: mov al,(bx) ; skip to end of reference string$/;"	l
vgaskp	src/third.s	/^vgaskp: mov al,(bx) ; skip to end of reference string$/;"	l
vgatab	src/bitmap.s	/^vgatab:$/;"	l
vgatab	src/second.S	/^vgatab:$/;"	l
vgatab	src/second.s	/^vgatab:$/;"	l
vgatab	src/third.s	/^vgatab:$/;"	l
vid	src/probe.c	/^      unsigned char vid, mflp, mhrd;$/;"	m	struct:Buf::__anon53	file:
vid	src/probe.c	/^      unsigned char vid, mflp, mhrd;$/;"	m	struct:Buf::__anon54	file:
vid0F	src/probe.h	/^   } vid0F;$/;"	m	struct:Video	typeref:struct:Video::__anon41
vid0F	src/probe.h	/^   } vid0F;$/;"	m	struct:Video1	typeref:struct:Video1::__anon34
vid101	src/probe.h	/^   } vid101;$/;"	m	struct:Video	typeref:struct:Video::__anon45
vid101	src/probe.h	/^   } vid101;$/;"	m	struct:Video3	typeref:struct:Video3::__anon39
vid103	src/probe.h	/^   } vid103;$/;"	m	struct:Video	typeref:struct:Video::__anon46
vid103	src/probe.h	/^   } vid103;$/;"	m	struct:Video3	typeref:struct:Video3::__anon40
vid12	src/probe.h	/^   } vid12;$/;"	m	struct:Video	typeref:struct:Video::__anon42
vid12	src/probe.h	/^   } vid12;$/;"	m	struct:Video2	typeref:struct:Video2::__anon35
vid1A	src/probe.h	/^   } vid1A;$/;"	m	struct:Video	typeref:struct:Video::__anon43
vid1A	src/probe.h	/^   } vid1A;$/;"	m	struct:Video2	typeref:struct:Video2::__anon36
vid36	src/probe.h	/^   } vid36;$/;"	m	struct:Video25	typeref:struct:Video25::__anon37
vid4F00	src/probe.h	/^   } vid4F00;$/;"	m	struct:Video	typeref:struct:Video::__anon44
vid4F00	src/probe.h	/^   } vid4F00;$/;"	m	struct:Video3	typeref:struct:Video3::__anon38
vid_mode	src/bootsect.S	/^vid_mode:$/;"	l
vid_mode	src/bootsect.s	/^vid_mode:$/;"	l
video	src/probe.c	/^      short video;		\/* byte offset to the video information *\/$/;"	m	struct:Buf::__anon54	file:
video_1	diagnose/test4.c	/^int video_1 = 0xF00;$/;"	v
video_36_bug	src/probe.c	/^static int video_36_bug;$/;"	v	file:
video_fix	diagnose/test4.c	/^void video_fix(void)$/;"	f	file:
video_fix	diagnose/test5.c	/^void video_fix(void)$/;"	f	file:
video_t	src/probe.h	/^} video_t;$/;"	t	typeref:struct:Video
video_t1	src/probe.h	/^} video_t1;$/;"	t	typeref:struct:Video1
video_t2	src/probe.h	/^} video_t2;$/;"	t	typeref:struct:Video2
video_t25	src/probe.h	/^} video_t25;$/;"	t	typeref:struct:Video25
video_t3	src/probe.h	/^} video_t3;$/;"	t	typeref:struct:Video3
vimage	src/bitmap.S	/^vimage:	dw	0	; vmdefault image$/;"	d
vimage	src/bitmap.s	/^vimage: dw 0 ; vmdefault image$/;"	d
vimage	src/crt.S	/^vimage:	dw	0	; vmdefault image$/;"	d
vimage	src/third.s	/^vimage: dw 0 ; vmdefault image$/;"	d
vir_loop	src/bitmap.s	/^vir_loop:$/;"	l
vir_loop	src/second.S	/^vir_loop:$/;"	l
vir_loop	src/second.s	/^vir_loop:$/;"	l
vir_loop	src/third.s	/^vir_loop:$/;"	l
vir_loop1	src/bitmap.s	/^vir_loop1:$/;"	l
vir_loop1	src/second.S	/^vir_loop1:$/;"	l
vir_loop1	src/second.s	/^vir_loop1:$/;"	l
vir_loop1	src/third.s	/^vir_loop1:$/;"	l
vir_skip	src/bitmap.s	/^vir_skip:$/;"	l
vir_skip	src/second.S	/^vir_skip:$/;"	l
vir_skip	src/second.s	/^vir_skip:$/;"	l
vir_skip	src/third.s	/^vir_skip:$/;"	l
virtual_done	src/bitmap.s	/^virtual_done:$/;"	l
virtual_done	src/second.S	/^virtual_done:$/;"	l
virtual_done	src/second.s	/^virtual_done:$/;"	l
virtual_done	src/third.s	/^virtual_done:$/;"	l
vl1	src/crt.S	/^vl1:	jcxz	vl3$/;"	l
vl1	src/third.s	/^vl1: jcxz vl3$/;"	l
vl2	src/crt.S	/^vl2:	mov	bx,si$/;"	l
vl2	src/third.s	/^vl2: mov bx,si$/;"	l
vl20	src/crt.S	/^vl20:	call	mn_wrcha$/;"	l
vl20	src/third.s	/^vl20: call mn_wrcha$/;"	l
vl21	src/crt.S	/^vl21:	$/;"	l
vl21	src/third.s	/^vl21:$/;"	l
vl22	src/crt.S	/^vl22:	call	mn_wrcha$/;"	l
vl22	src/third.s	/^vl22: call mn_wrcha$/;"	l
vl23	src/crt.S	/^vl23:	pop	dx$/;"	l
vl23	src/third.s	/^vl23: pop dx$/;"	l
vl3	src/crt.S	/^vl3:$/;"	l
vl3	src/third.s	/^vl3:$/;"	l
vlines	src/crt.S	/^vlines:$/;"	l
vlines	src/third.s	/^vlines:$/;"	l
vm_cache	src/second.S	/^vm_cache:$/;"	l
vm_pt1	src/second.S	/^vm_pt1:$/;"	l
vm_pt2	src/second.S	/^vm_pt2:$/;"	l
vm_ret	src/bitmap.s	/^vm_ret: popad ; restore all the extended registers$/;"	l
vm_ret	src/second.S	/^vm_ret:	popad		; restore all the extended registers$/;"	l
vm_ret	src/second.S	/^vm_ret:$/;"	l
vm_ret	src/second.s	/^vm_ret: popad ; restore all the extended registers$/;"	l
vm_ret	src/third.s	/^vm_ret: popad ; restore all the extended registers$/;"	l
vm_vir	src/bitmap.s	/^vm_vir:$/;"	l
vm_vir	src/second.S	/^vm_vir:$/;"	l
vm_vir	src/second.s	/^vm_vir:$/;"	l
vm_vir	src/third.s	/^vm_vir:$/;"	l
vmtest	src/bitmap.s	/^vmtest:$/;"	l
vmtest	src/second.S	/^vmtest:$/;"	l
vmtest	src/second.s	/^vmtest:$/;"	l
vmtest	src/third.s	/^vmtest:$/;"	l
vmwto	src/bitmap.s	/^vmwto:$/;"	l
vmwto	src/second.S	/^vmwto:$/;"	l
vmwto	src/second.s	/^vmwto:$/;"	l
vmwto	src/third.s	/^vmwto:$/;"	l
vol_found	src/first.S	/^vol_found:$/;"	l
vol_found	src/first.s	/^vol_found:$/;"	l
vol_found	src/mbr.S	/^vol_found:$/;"	l
vol_found	src/mbr.s	/^vol_found:$/;"	l
vol_found	src/mbr2.s	/^vol_found:$/;"	l
vol_id	src/device.c	/^    } vol_id;$/;"	m	struct:VolumeMgmt	typeref:struct:VolumeMgmt::__anon29	file:
vol_id_marker	diagnose/sector.S	/^vol_id_marker:		db      0x29    ; marker? for volume ID$/;"	d
volid_get_set	src/device.c	/^static int volid_get_set(int device, int vol_in, int option)$/;"	f	file:
volume_id	src/common.h	/^    int  volume_id;$/;"	m	struct:__anon16
volume_label	diagnose/sector.S	/^volume_label:		.ascii	"NO NAME    "	; 11 chars$/;"	l
vpaus1	src/bitmap.s	/^vpaus1: test byte ptr timeout,#-1$/;"	l
vpaus1	src/second.S	/^vpaus1:	test	byte ptr timeout,#-1$/;"	l
vpaus1	src/second.s	/^vpaus1: test byte ptr timeout,#-1$/;"	l
vpaus1	src/third.s	/^vpaus1: test byte ptr timeout,#-1$/;"	l
vskdb	src/bitmap.s	/^vskdb: dec di ; discard last blank$/;"	l
vskdb	src/second.S	/^vskdb:	dec	di		; discard last blank$/;"	l
vskdb	src/second.s	/^vskdb: dec di ; discard last blank$/;"	l
vskdb	src/third.s	/^vskdb: dec di ; discard last blank$/;"	l
vsknb	src/bitmap.s	/^vsknb:$/;"	l
vsknb	src/second.S	/^vsknb:$/;"	l
vsknb	src/second.s	/^vsknb:$/;"	l
vsknb	src/third.s	/^vsknb:$/;"	l
vsktk	src/bitmap.s	/^vsktk:$/;"	l
vsktk	src/second.S	/^vsktk:$/;"	l
vsktk	src/second.s	/^vsktk:$/;"	l
vsktk	src/third.s	/^vsktk:$/;"	l
vsktl	src/bitmap.s	/^vsktl:$/;"	l
vsktl	src/second.S	/^vsktl:$/;"	l
vsktl	src/second.s	/^vsktl:$/;"	l
vsktl	src/third.s	/^vsktl:$/;"	l
vsktm	src/bitmap.s	/^vsktm:$/;"	l
vsktm	src/second.S	/^vsktm:$/;"	l
vsktm	src/second.s	/^vsktm:$/;"	l
vsktm	src/third.s	/^vsktm:$/;"	l
vsktnbd	src/bitmap.s	/^vsktnbd:$/;"	l
vsktnbd	src/second.S	/^vsktnbd:$/;"	l
vsktnbd	src/second.s	/^vsktnbd:$/;"	l
vsktnbd	src/third.s	/^vsktnbd:$/;"	l
vsktv	src/bitmap.s	/^vsktv:$/;"	l
vsktv	src/second.S	/^vsktv:$/;"	l
vsktv	src/second.s	/^vsktv:$/;"	l
vsktv	src/third.s	/^vsktv:$/;"	l
vskwd	src/bitmap.s	/^vskwd: add si,#4 ; skip word$/;"	l
vskwd	src/second.S	/^vskwd:	add	si,#4		; skip word$/;"	l
vskwd	src/second.s	/^vskwd: add si,#4 ; skip word$/;"	l
vskwd	src/third.s	/^vskwd: add si,#4 ; skip word$/;"	l
vtab	src/bitmap.s	/^vtab = *$/;"	d
vtab	src/second.s	/^vtab = *$/;"	d
vtab	src/third.s	/^vtab = *$/;"	d
vtab	src/volume.S	/^vtab	=	*$/;"	d
vtab	src/volume.S	/^vtab:	.blkw	MAX_BIOS_DEVICES_asm*2	; volume IDs indexed by$/;"	l
w	src/shs2.c	57;"	d	file:
w	src/shs2.c	59;"	d	file:
wait_kbd_ctrl_ready	src/bitmap.s	/^wait_kbd_ctrl_ready:$/;"	l
wait_kbd_ctrl_ready	src/second.S	/^wait_kbd_ctrl_ready:$/;"	l
wait_kbd_ctrl_ready	src/second.s	/^wait_kbd_ctrl_ready:$/;"	l
wait_kbd_ctrl_ready	src/third.s	/^wait_kbd_ctrl_ready:$/;"	l
waitsh	src/bitmap.s	/^waitsh: call setto ; set timeout$/;"	l
waitsh	src/second.S	/^waitsh:	call	setto		; set timeout$/;"	l
waitsh	src/second.s	/^waitsh: call setto ; set timeout$/;"	l
waitsh	src/third.s	/^waitsh: call setto ; set timeout$/;"	l
warn	src/common.c	/^\/*volatile*\/ void warn(char *fmt,...)$/;"	f
warned	src/probe.c	/^static char warned[16];$/;"	v	file:
warnings	src/common.c	/^int colormax = 15, warnings = 0;$/;"	v
width	src/bitmap.h	/^   bm_sint16   width;$/;"	m	struct:BitMapHeader2
width	src/bitmap.h	/^   bm_sint32   width;$/;"	m	struct:BitMapHeader
winnt_check	src/device.c	/^static int winnt_check(struct VolumeMgmt *vm, int fatal)$/;"	f	file:
word	diagnose/test4.c	/^typedef unsigned short word;$/;"	t	file:
word	diagnose/test5.c	/^typedef unsigned short word;$/;"	t	file:
working_disks	src/md-int.h	/^	md_u32 working_disks;	\/*  3 Number of working disks		      *\/$/;"	m	struct:md_array_info_s
working_disks	src/md-int.h	/^	md_u32 working_disks;	\/*  3 Number of working disks		      *\/$/;"	m	struct:md_superblock_s
wout	src/chain.S	/^wout:	push	ax$/;"	l
wout	src/disk.S	/^wout:		xchg	ah,al$/;"	l
wout	src/disk.s	/^wout:		xchg	ah,al$/;"	l
wout	src/dump.S	/^wout:	push	ax		! display one word$/;"	l
wout	src/first.S	/^wout:	push	ax$/;"	l
wout	src/mbr.S	/^wout:	push	ax$/;"	l
wout	src/second.S	/^wout:	push	ax$/;"	l
wrfail	src/chain.S	/^wrfail:	mov	si,#failmsg		! complain$/;"	l
wrfail	src/chain.s	/^wrfail: mov si,#failmsg ! complain$/;"	l
write	diagnose/sector.S	/^write:$/;"	l
write1	diagnose/sector.S	/^write1:$/;"	l
wsector	diagnose/test5.c	/^	word wsector[SECTOR_SIZE\/2];$/;"	m	union:Buffer::__anon57	file:
x	diagnose/test5.c	/^    } x;$/;"	m	struct:Buffer	typeref:union:Buffer::__anon57	file:
x	src/common.h	/^    unsigned short x,y,z;	\/*  8: LOADLIN hacks *\/$/;"	m	struct:__anon23
xHotspot	src/bitmap.h	/^   bm_sint16   xHotspot, yHotspot;$/;"	m	struct:BitMapFileHeader
xResolution	src/bitmap.h	/^   bm_uint32   xResolution, yResolution;$/;"	m	struct:BitMapHeader
xdd1	src/disk.S	/^xdd1:$/;"	l
xdd1	src/disk.s	/^xdd1:$/;"	l
xdd1a	src/disk.S	/^xdd1a:          inc     byte (bigcyl)$/;"	l
xdd1a	src/disk.s	/^xdd1a:          inc     byte (bigcyl)$/;"	l
xdd1b	src/disk.S	/^xdd1b:$/;"	l
xdd1b	src/disk.s	/^xdd1b:$/;"	l
xdd2	src/disk.S	/^xdd2:$/;"	l
xdd2	src/disk.s	/^xdd2:$/;"	l
xdd2a	src/disk.S	/^xdd2a:          inc     byte bigflag$/;"	l
xdd2a	src/disk.s	/^xdd2a:          inc     byte bigflag$/;"	l
xdd3	src/disk.S	/^xdd3:$/;"	l
xdd3	src/disk.s	/^xdd3:$/;"	l
xdd4	src/disk.S	/^xdd4:$/;"	l
xdd4	src/disk.s	/^xdd4:$/;"	l
xlat	doc/t2a.pl	/^sub xlat$/;"	s
xpitch	src/bitmap.h	/^;*\/	short maxcol, xpitch;		\/* BMP max per col, xpitch between cols$/;"	m	struct:BitmapLiloHeader
xpitch	src/common.h	/^;*\/	short maxcol, xpitch;		\/* BMP max per col, xpitch between cols$/;"	m	struct:__anon15
xread	src/bitmap.s	/^xread: push ax ; ES == 0 ?$/;"	l
xread	src/second.S	/^xread:	push	ax		; ES == 0 ?$/;"	l
xread	src/second.s	/^xread: push ax ; ES == 0 ?$/;"	l
xread	src/third.s	/^xread: push ax ; ES == 0 ?$/;"	l
y	src/common.h	/^    unsigned short x,y,z;	\/*  8: LOADLIN hacks *\/$/;"	m	struct:__anon23
yHotspot	src/bitmap.h	/^   bm_sint16   xHotspot, yHotspot;$/;"	m	struct:BitMapFileHeader
yResolution	src/bitmap.h	/^   bm_uint32   xResolution, yResolution;$/;"	m	struct:BitMapHeader
y_yiq	src/edit.c	/^static float hue[NPALETTE], y_yiq[NPALETTE], s_hsv[NPALETTE], $/;"	v	file:
yesno	diagnose/test4.c	/^void yesno(int i)$/;"	f	file:
yesno	diagnose/test5.c	/^void yesno(int i)$/;"	f	file:
yesno	src/device.c	/^int yesno(char *prompt, int expect)$/;"	f
yesno	src/edit.c	/^static int yesno(char *query, int def)$/;"	f	file:
z	src/common.h	/^    unsigned short x,y,z;	\/*  8: LOADLIN hacks *\/$/;"	m	struct:__anon23
zero	src/disk.S	/^zero:$/;"	l
zero	src/disk.s	/^zero:$/;"	l
zero	src/first.S	/^zero:$/;"	l
zero	src/first.s	/^zero:$/;"	l
zero	src/mbr.S	/^zero:$/;"	l
zero	src/mbr.s	/^zero:$/;"	l
zero	src/mbr2.s	/^zero:$/;"	l
zero	src/pseudo.S	/^zero:$/;"	l
zero_addr	src/map.c	/^static SECTOR_ADDR zero_addr;$/;"	v	file:
zflag	src/common.c	/^int verbose = 0, test = 0, compact = 0, linear = 0, raid_flags = 0, zflag = 0,$/;"	v
zz	src/bitmap.s	/^zz: call say$/;"	l
zz	src/second.S	/^zz:	call	say$/;"	l
zz	src/second.s	/^zz: call say$/;"	l
zz	src/third.s	/^zz: call say$/;"	l
zzz	src/bitmap.s	/^zzz: hlt ; wait for interrupt$/;"	l
zzz	src/first.S	/^zzz:$/;"	l
zzz	src/first.s	/^zzz:$/;"	l
zzz	src/second.S	/^zzz:	hlt			; wait for interrupt$/;"	l
zzz	src/second.s	/^zzz: hlt ; wait for interrupt$/;"	l
zzz	src/third.s	/^zzz: hlt ; wait for interrupt$/;"	l
